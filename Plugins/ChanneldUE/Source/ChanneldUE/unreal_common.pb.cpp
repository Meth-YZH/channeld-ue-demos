// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unreal_common.proto

#ifdef _MSC_VER
#	pragma warning(disable: 4125)
#	pragma warning(disable: 4647)
#	pragma warning(disable: 4668)
#	pragma warning(disable: 4800)
#	pragma warning(disable: 4946)
#endif

#include "unreal_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace unrealpb {
PROTOBUF_CONSTEXPR FVector::FVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FVectorDefaultTypeInternal() {}
  union {
    FVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FVectorDefaultTypeInternal _FVector_default_instance_;
PROTOBUF_CONSTEXPR UnrealObjectRef::UnrealObjectRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.netguid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnrealObjectRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnrealObjectRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnrealObjectRefDefaultTypeInternal() {}
  union {
    UnrealObjectRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnrealObjectRefDefaultTypeInternal _UnrealObjectRef_default_instance_;
PROTOBUF_CONSTEXPR RemoteFunctionMessage::RemoteFunctionMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.functionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.paramspayload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetobj_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteFunctionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteFunctionMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteFunctionMessageDefaultTypeInternal() {}
  union {
    RemoteFunctionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteFunctionMessageDefaultTypeInternal _RemoteFunctionMessage_default_instance_;
PROTOBUF_CONSTEXPR SceneComponentState::SceneComponentState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attachchildren_)*/{}
  , /*decltype(_impl_.attachsocketname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attachparent_)*/nullptr
  , /*decltype(_impl_.relativelocation_)*/nullptr
  , /*decltype(_impl_.relativerotation_)*/nullptr
  , /*decltype(_impl_.relativescale_)*/nullptr
  , /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_.babsolutelocation_)*/false
  , /*decltype(_impl_.babsoluterotation_)*/false
  , /*decltype(_impl_.babsolutescale_)*/false
  , /*decltype(_impl_.bvisible_)*/false
  , /*decltype(_impl_.bshouldbeattached_)*/false
  , /*decltype(_impl_.bshouldsnaplocationwhenattached_)*/false
  , /*decltype(_impl_.bshouldsnaprotationwhenattached_)*/false} {}
struct SceneComponentStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneComponentStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneComponentStateDefaultTypeInternal() {}
  union {
    SceneComponentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneComponentStateDefaultTypeInternal _SceneComponentState_default_instance_;
PROTOBUF_CONSTEXPR RootMotionMontage::RootMotionMontage(
    ::_pbi::ConstantInitialized) {}
struct RootMotionMontageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootMotionMontageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootMotionMontageDefaultTypeInternal() {}
  union {
    RootMotionMontage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootMotionMontageDefaultTypeInternal _RootMotionMontage_default_instance_;
PROTOBUF_CONSTEXPR BasedMovementInfo::BasedMovementInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bonename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.movementbase_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.bserverhasbasecomponent_)*/false
  , /*decltype(_impl_.brelativerotation_)*/false
  , /*decltype(_impl_.bserverhasvelocity_)*/false} {}
struct BasedMovementInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasedMovementInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasedMovementInfoDefaultTypeInternal() {}
  union {
    BasedMovementInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasedMovementInfoDefaultTypeInternal _BasedMovementInfo_default_instance_;
PROTOBUF_CONSTEXPR CharacterState::CharacterState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rootmotion_)*/nullptr
  , /*decltype(_impl_.basedmovement_)*/nullptr
  , /*decltype(_impl_.serverlasttransformupdatetimestamp_)*/0
  , /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_.biscrouched_)*/false
  , /*decltype(_impl_.bproxyisjumpforceapplied_)*/false
  , /*decltype(_impl_.movementmode_)*/0u
  , /*decltype(_impl_.animrootmotiontranslationscale_)*/0
  , /*decltype(_impl_.replaylasttransformupdatetimestamp_)*/0} {}
struct CharacterStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterStateDefaultTypeInternal() {}
  union {
    CharacterState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterStateDefaultTypeInternal _CharacterState_default_instance_;
PROTOBUF_CONSTEXPR Character_ServerMovePacked_Params::Character_ServerMovePacked_Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packedbits_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Character_ServerMovePacked_ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Character_ServerMovePacked_ParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Character_ServerMovePacked_ParamsDefaultTypeInternal() {}
  union {
    Character_ServerMovePacked_Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Character_ServerMovePacked_ParamsDefaultTypeInternal _Character_ServerMovePacked_Params_default_instance_;
PROTOBUF_CONSTEXPR Character_ClientMoveResponsePacked_Params::Character_ClientMoveResponsePacked_Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packedbits_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal() {}
  union {
    Character_ClientMoveResponsePacked_Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal _Character_ClientMoveResponsePacked_Params_default_instance_;
PROTOBUF_CONSTEXPR PlayerControllerState::PlayerControllerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.targetviewrotation_)*/nullptr
  , /*decltype(_impl_.spawnlocation_)*/nullptr} {}
struct PlayerControllerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerControllerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerControllerStateDefaultTypeInternal() {}
  union {
    PlayerControllerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerControllerStateDefaultTypeInternal _PlayerControllerState_default_instance_;
PROTOBUF_CONSTEXPR PlayerController_ServerUpdateCamera_Params::PlayerController_ServerUpdateCamera_Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camloc_)*/nullptr
  , /*decltype(_impl_.campitchandyaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal() {}
  union {
    PlayerController_ServerUpdateCamera_Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal _PlayerController_ServerUpdateCamera_Params_default_instance_;
}  // namespace unrealpb
static ::_pb::Metadata file_level_metadata_unreal_5fcommon_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_unreal_5fcommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_unreal_5fcommon_2eproto = nullptr;

const uint32_t TableStruct_unreal_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::FVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::FVector, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::FVector, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::FVector, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::UnrealObjectRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::UnrealObjectRef, _impl_.netguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::RemoteFunctionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::RemoteFunctionMessage, _impl_.targetobj_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::RemoteFunctionMessage, _impl_.functionname_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::RemoteFunctionMessage, _impl_.paramspayload_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.removed_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.babsolutelocation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.babsoluterotation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.babsolutescale_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.bvisible_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.bshouldbeattached_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.bshouldsnaplocationwhenattached_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.bshouldsnaprotationwhenattached_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.attachparent_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.attachchildren_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.attachsocketname_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.relativelocation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.relativerotation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::SceneComponentState, _impl_.relativescale_),
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  1,
  ~0u,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::RootMotionMontage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.movementbase_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.bonename_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.bserverhasbasecomponent_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.brelativerotation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::BasedMovementInfo, _impl_.bserverhasvelocity_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.removed_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.rootmotion_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.basedmovement_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.serverlasttransformupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.movementmode_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.biscrouched_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.bproxyisjumpforceapplied_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.animrootmotiontranslationscale_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::CharacterState, _impl_.replaylasttransformupdatetimestamp_),
  ~0u,
  0,
  1,
  2,
  5,
  3,
  4,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::Character_ServerMovePacked_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::Character_ServerMovePacked_Params, _impl_.packedbits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::Character_ClientMoveResponsePacked_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::Character_ClientMoveResponsePacked_Params, _impl_.packedbits_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerControllerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerControllerState, _impl_.targetviewrotation_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerControllerState, _impl_.spawnlocation_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerController_ServerUpdateCamera_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerController_ServerUpdateCamera_Params, _impl_.camloc_),
  PROTOBUF_FIELD_OFFSET(::unrealpb::PlayerController_ServerUpdateCamera_Params, _impl_.campitchandyaw_),
};
static const ::_pbi::MigrationSchema schemas_unreal_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::unrealpb::FVector)},
  { 9, -1, -1, sizeof(::unrealpb::UnrealObjectRef)},
  { 16, -1, -1, sizeof(::unrealpb::RemoteFunctionMessage)},
  { 25, 45, -1, sizeof(::unrealpb::SceneComponentState)},
  { 59, -1, -1, sizeof(::unrealpb::RootMotionMontage)},
  { 65, 78, -1, sizeof(::unrealpb::BasedMovementInfo)},
  { 85, 100, -1, sizeof(::unrealpb::CharacterState)},
  { 109, -1, -1, sizeof(::unrealpb::Character_ServerMovePacked_Params)},
  { 116, -1, -1, sizeof(::unrealpb::Character_ClientMoveResponsePacked_Params)},
  { 123, 131, -1, sizeof(::unrealpb::PlayerControllerState)},
  { 133, -1, -1, sizeof(::unrealpb::PlayerController_ServerUpdateCamera_Params)},
};

static const ::_pb::Message* const file_default_instances_unreal_5fcommon_2eproto[] = {
  &::unrealpb::_FVector_default_instance_._instance,
  &::unrealpb::_UnrealObjectRef_default_instance_._instance,
  &::unrealpb::_RemoteFunctionMessage_default_instance_._instance,
  &::unrealpb::_SceneComponentState_default_instance_._instance,
  &::unrealpb::_RootMotionMontage_default_instance_._instance,
  &::unrealpb::_BasedMovementInfo_default_instance_._instance,
  &::unrealpb::_CharacterState_default_instance_._instance,
  &::unrealpb::_Character_ServerMovePacked_Params_default_instance_._instance,
  &::unrealpb::_Character_ClientMoveResponsePacked_Params_default_instance_._instance,
  &::unrealpb::_PlayerControllerState_default_instance_._instance,
  &::unrealpb::_PlayerController_ServerUpdateCamera_Params_default_instance_._instance,
};

const char descriptor_table_protodef_unreal_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023unreal_common.proto\022\010unrealpb\"*\n\007FVect"
  "or\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\"\n\017U"
  "nrealObjectRef\022\017\n\007NetGUID\030\001 \001(\r\"r\n\025Remot"
  "eFunctionMessage\022,\n\ttargetObj\030\001 \001(\0132\031.un"
  "realpb.UnrealObjectRef\022\024\n\014functionName\030\002"
  " \001(\t\022\025\n\rparamsPayload\030\003 \001(\014\"\275\006\n\023SceneCom"
  "ponentState\022\017\n\007removed\030\001 \001(\010\022\036\n\021bAbsolut"
  "eLocation\030\002 \001(\010H\000\210\001\001\022\036\n\021bAbsoluteRotatio"
  "n\030\003 \001(\010H\001\210\001\001\022\033\n\016bAbsoluteScale\030\004 \001(\010H\002\210\001"
  "\001\022\025\n\010bVisible\030\005 \001(\010H\003\210\001\001\022\036\n\021bShouldBeAtt"
  "ached\030\006 \001(\010H\004\210\001\001\022,\n\037bShouldSnapLocationW"
  "henAttached\030\007 \001(\010H\005\210\001\001\022,\n\037bShouldSnapRot"
  "ationWhenAttached\030\010 \001(\010H\006\210\001\001\0224\n\014attachPa"
  "rent\030\t \001(\0132\031.unrealpb.UnrealObjectRefH\007\210"
  "\001\001\0221\n\016attachChildren\030\n \003(\0132\031.unrealpb.Un"
  "realObjectRef\022\035\n\020attachSocketName\030\013 \001(\tH"
  "\010\210\001\001\0220\n\020relativeLocation\030\014 \001(\0132\021.unrealp"
  "b.FVectorH\t\210\001\001\0220\n\020relativeRotation\030\r \001(\013"
  "2\021.unrealpb.FVectorH\n\210\001\001\022-\n\rrelativeScal"
  "e\030\016 \001(\0132\021.unrealpb.FVectorH\013\210\001\001B\024\n\022_bAbs"
  "oluteLocationB\024\n\022_bAbsoluteRotationB\021\n\017_"
  "bAbsoluteScaleB\013\n\t_bVisibleB\024\n\022_bShouldB"
  "eAttachedB\"\n _bShouldSnapLocationWhenAtt"
  "achedB\"\n _bShouldSnapRotationWhenAttache"
  "dB\017\n\r_attachParentB\023\n\021_attachSocketNameB"
  "\023\n\021_relativeLocationB\023\n\021_relativeRotatio"
  "nB\020\n\016_relativeScale\"\023\n\021RootMotionMontage"
  "\"\234\003\n\021BasedMovementInfo\0224\n\014movementBase\030\001"
  " \001(\0132\031.unrealpb.UnrealObjectRefH\000\210\001\001\022\025\n\010"
  "boneName\030\002 \001(\tH\001\210\001\001\022(\n\010location\030\003 \001(\0132\021."
  "unrealpb.FVectorH\002\210\001\001\022(\n\010rotation\030\004 \001(\0132"
  "\021.unrealpb.FVectorH\003\210\001\001\022$\n\027bServerHasBas"
  "eComponent\030\005 \001(\010H\004\210\001\001\022\036\n\021bRelativeRotati"
  "on\030\006 \001(\010H\005\210\001\001\022\037\n\022bServerHasVelocity\030\007 \001("
  "\010H\006\210\001\001B\017\n\r_movementBaseB\013\n\t_boneNameB\013\n\t"
  "_locationB\013\n\t_rotationB\032\n\030_bServerHasBas"
  "eComponentB\024\n\022_bRelativeRotationB\025\n\023_bSe"
  "rverHasVelocity\"\313\004\n\016CharacterState\022\017\n\007re"
  "moved\030\001 \001(\010\0224\n\nrootMotion\030\002 \001(\0132\033.unreal"
  "pb.RootMotionMontageH\000\210\001\001\0227\n\rbasedMoveme"
  "nt\030\003 \001(\0132\033.unrealpb.BasedMovementInfoH\001\210"
  "\001\001\022/\n\"serverLastTransformUpdateTimeStamp"
  "\030\004 \001(\002H\002\210\001\001\022\031\n\014movementMode\030\005 \001(\rH\003\210\001\001\022\030"
  "\n\013bIsCrouched\030\006 \001(\010H\004\210\001\001\022%\n\030bProxyIsJump"
  "ForceApplied\030\007 \001(\010H\005\210\001\001\022+\n\036animRootMotio"
  "nTranslationScale\030\010 \001(\002H\006\210\001\001\022/\n\"replayLa"
  "stTransformUpdateTimeStamp\030\t \001(\002H\007\210\001\001B\r\n"
  "\013_rootMotionB\020\n\016_basedMovementB%\n#_serve"
  "rLastTransformUpdateTimeStampB\017\n\r_moveme"
  "ntModeB\016\n\014_bIsCrouchedB\033\n\031_bProxyIsJumpF"
  "orceAppliedB!\n\037_animRootMotionTranslatio"
  "nScaleB%\n#_replayLastTransformUpdateTime"
  "Stamp\"7\n!Character_ServerMovePacked_Para"
  "ms\022\022\n\nPackedBits\030\001 \001(\014\"\?\n)Character_Clie"
  "ntMoveResponsePacked_Params\022\022\n\nPackedBit"
  "s\030\001 \001(\014\"\243\001\n\025PlayerControllerState\0222\n\022tar"
  "getViewRotation\030\001 \001(\0132\021.unrealpb.FVector"
  "H\000\210\001\001\022-\n\rspawnLocation\030\002 \001(\0132\021.unrealpb."
  "FVectorH\001\210\001\001B\025\n\023_targetViewRotationB\020\n\016_"
  "spawnLocation\"g\n*PlayerController_Server"
  "UpdateCamera_Params\022!\n\006camLoc\030\001 \001(\0132\021.un"
  "realpb.FVector\022\026\n\016camPitchAndYaw\030\002 \001(\005B,"
  "Z*channeld.clewcat.com/channeld/pkg/unre"
  "alpbb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_unreal_5fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_unreal_5fcommon_2eproto = {
    false, false, 2532, descriptor_table_protodef_unreal_5fcommon_2eproto,
    "unreal_common.proto",
    &descriptor_table_unreal_5fcommon_2eproto_once, nullptr, 0, 11,
    schemas_unreal_5fcommon_2eproto, file_default_instances_unreal_5fcommon_2eproto, TableStruct_unreal_5fcommon_2eproto::offsets,
    file_level_metadata_unreal_5fcommon_2eproto, file_level_enum_descriptors_unreal_5fcommon_2eproto,
    file_level_service_descriptors_unreal_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_unreal_5fcommon_2eproto_getter() {
  return &descriptor_table_unreal_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_unreal_5fcommon_2eproto(&descriptor_table_unreal_5fcommon_2eproto);
namespace unrealpb {

// ===================================================================

class FVector::_Internal {
 public:
};

FVector::FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.FVector)
}
FVector::FVector(const FVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:unrealpb.FVector)
}

inline void FVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FVector::~FVector() {
  // @@protoc_insertion_point(destructor:unrealpb.FVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FVector::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.FVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.FVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.FVector)
  return target;
}

size_t FVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.FVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FVector::GetClassData() const { return &_class_data_; }


void FVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FVector*>(&to_msg);
  auto& from = static_cast<const FVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.FVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FVector::CopyFrom(const FVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.FVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FVector::IsInitialized() const {
  return true;
}

void FVector::InternalSwap(FVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FVector, _impl_.z_)
      + sizeof(FVector::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(FVector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[0]);
}

// ===================================================================

class UnrealObjectRef::_Internal {
 public:
};

UnrealObjectRef::UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.UnrealObjectRef)
}
UnrealObjectRef::UnrealObjectRef(const UnrealObjectRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnrealObjectRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.netguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.netguid_ = from._impl_.netguid_;
  // @@protoc_insertion_point(copy_constructor:unrealpb.UnrealObjectRef)
}

inline void UnrealObjectRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.netguid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnrealObjectRef::~UnrealObjectRef() {
  // @@protoc_insertion_point(destructor:unrealpb.UnrealObjectRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnrealObjectRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnrealObjectRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnrealObjectRef::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.UnrealObjectRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.netguid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnrealObjectRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 NetGUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.netguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnrealObjectRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.UnrealObjectRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 NetGUID = 1;
  if (this->_internal_netguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_netguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.UnrealObjectRef)
  return target;
}

size_t UnrealObjectRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.UnrealObjectRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 NetGUID = 1;
  if (this->_internal_netguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_netguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnrealObjectRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnrealObjectRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnrealObjectRef::GetClassData() const { return &_class_data_; }


void UnrealObjectRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnrealObjectRef*>(&to_msg);
  auto& from = static_cast<const UnrealObjectRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.UnrealObjectRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_netguid() != 0) {
    _this->_internal_set_netguid(from._internal_netguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnrealObjectRef::CopyFrom(const UnrealObjectRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.UnrealObjectRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnrealObjectRef::IsInitialized() const {
  return true;
}

void UnrealObjectRef::InternalSwap(UnrealObjectRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.netguid_, other->_impl_.netguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnrealObjectRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[1]);
}

// ===================================================================

class RemoteFunctionMessage::_Internal {
 public:
  static const ::unrealpb::UnrealObjectRef& targetobj(const RemoteFunctionMessage* msg);
};

const ::unrealpb::UnrealObjectRef&
RemoteFunctionMessage::_Internal::targetobj(const RemoteFunctionMessage* msg) {
  return *msg->_impl_.targetobj_;
}
RemoteFunctionMessage::RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.RemoteFunctionMessage)
}
RemoteFunctionMessage::RemoteFunctionMessage(const RemoteFunctionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteFunctionMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.functionname_){}
    , decltype(_impl_.paramspayload_){}
    , decltype(_impl_.targetobj_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.functionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.functionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_functionname().empty()) {
    _this->_impl_.functionname_.Set(from._internal_functionname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.paramspayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramspayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_paramspayload().empty()) {
    _this->_impl_.paramspayload_.Set(from._internal_paramspayload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_targetobj()) {
    _this->_impl_.targetobj_ = new ::unrealpb::UnrealObjectRef(*from._impl_.targetobj_);
  }
  // @@protoc_insertion_point(copy_constructor:unrealpb.RemoteFunctionMessage)
}

inline void RemoteFunctionMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.functionname_){}
    , decltype(_impl_.paramspayload_){}
    , decltype(_impl_.targetobj_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.functionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.functionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.paramspayload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.paramspayload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteFunctionMessage::~RemoteFunctionMessage() {
  // @@protoc_insertion_point(destructor:unrealpb.RemoteFunctionMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteFunctionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.functionname_.Destroy();
  _impl_.paramspayload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.targetobj_;
}

void RemoteFunctionMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteFunctionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.RemoteFunctionMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.functionname_.ClearToEmpty();
  _impl_.paramspayload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.targetobj_ != nullptr) {
    delete _impl_.targetobj_;
  }
  _impl_.targetobj_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteFunctionMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unrealpb.UnrealObjectRef targetObj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetobj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string functionName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_functionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unrealpb.RemoteFunctionMessage.functionName"));
        } else
          goto handle_unusual;
        continue;
      // bytes paramsPayload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_paramspayload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteFunctionMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.RemoteFunctionMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unrealpb.UnrealObjectRef targetObj = 1;
  if (this->_internal_has_targetobj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::targetobj(this),
        _Internal::targetobj(this).GetCachedSize(), target, stream);
  }

  // string functionName = 2;
  if (!this->_internal_functionname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_functionname().data(), static_cast<int>(this->_internal_functionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unrealpb.RemoteFunctionMessage.functionName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_functionname(), target);
  }

  // bytes paramsPayload = 3;
  if (!this->_internal_paramspayload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_paramspayload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.RemoteFunctionMessage)
  return target;
}

size_t RemoteFunctionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.RemoteFunctionMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string functionName = 2;
  if (!this->_internal_functionname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_functionname());
  }

  // bytes paramsPayload = 3;
  if (!this->_internal_paramspayload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paramspayload());
  }

  // .unrealpb.UnrealObjectRef targetObj = 1;
  if (this->_internal_has_targetobj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetobj_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteFunctionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteFunctionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteFunctionMessage::GetClassData() const { return &_class_data_; }


void RemoteFunctionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteFunctionMessage*>(&to_msg);
  auto& from = static_cast<const RemoteFunctionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.RemoteFunctionMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_functionname().empty()) {
    _this->_internal_set_functionname(from._internal_functionname());
  }
  if (!from._internal_paramspayload().empty()) {
    _this->_internal_set_paramspayload(from._internal_paramspayload());
  }
  if (from._internal_has_targetobj()) {
    _this->_internal_mutable_targetobj()->::unrealpb::UnrealObjectRef::MergeFrom(
        from._internal_targetobj());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteFunctionMessage::CopyFrom(const RemoteFunctionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.RemoteFunctionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFunctionMessage::IsInitialized() const {
  return true;
}

void RemoteFunctionMessage::InternalSwap(RemoteFunctionMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.functionname_, lhs_arena,
      &other->_impl_.functionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.paramspayload_, lhs_arena,
      &other->_impl_.paramspayload_, rhs_arena
  );
  swap(_impl_.targetobj_, other->_impl_.targetobj_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteFunctionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[2]);
}

// ===================================================================

class SceneComponentState::_Internal {
 public:
  using HasBits = decltype(std::declval<SceneComponentState>()._impl_._has_bits_);
  static void set_has_babsolutelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_babsoluterotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_babsolutescale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bvisible(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bshouldbeattached(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bshouldsnaplocationwhenattached(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bshouldsnaprotationwhenattached(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::unrealpb::UnrealObjectRef& attachparent(const SceneComponentState* msg);
  static void set_has_attachparent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attachsocketname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::unrealpb::FVector& relativelocation(const SceneComponentState* msg);
  static void set_has_relativelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::unrealpb::FVector& relativerotation(const SceneComponentState* msg);
  static void set_has_relativerotation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::unrealpb::FVector& relativescale(const SceneComponentState* msg);
  static void set_has_relativescale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::unrealpb::UnrealObjectRef&
SceneComponentState::_Internal::attachparent(const SceneComponentState* msg) {
  return *msg->_impl_.attachparent_;
}
const ::unrealpb::FVector&
SceneComponentState::_Internal::relativelocation(const SceneComponentState* msg) {
  return *msg->_impl_.relativelocation_;
}
const ::unrealpb::FVector&
SceneComponentState::_Internal::relativerotation(const SceneComponentState* msg) {
  return *msg->_impl_.relativerotation_;
}
const ::unrealpb::FVector&
SceneComponentState::_Internal::relativescale(const SceneComponentState* msg) {
  return *msg->_impl_.relativescale_;
}
SceneComponentState::SceneComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.SceneComponentState)
}
SceneComponentState::SceneComponentState(const SceneComponentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneComponentState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attachchildren_){from._impl_.attachchildren_}
    , decltype(_impl_.attachsocketname_){}
    , decltype(_impl_.attachparent_){nullptr}
    , decltype(_impl_.relativelocation_){nullptr}
    , decltype(_impl_.relativerotation_){nullptr}
    , decltype(_impl_.relativescale_){nullptr}
    , decltype(_impl_.removed_){}
    , decltype(_impl_.babsolutelocation_){}
    , decltype(_impl_.babsoluterotation_){}
    , decltype(_impl_.babsolutescale_){}
    , decltype(_impl_.bvisible_){}
    , decltype(_impl_.bshouldbeattached_){}
    , decltype(_impl_.bshouldsnaplocationwhenattached_){}
    , decltype(_impl_.bshouldsnaprotationwhenattached_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.attachsocketname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attachsocketname()) {
    _this->_impl_.attachsocketname_.Set(from._internal_attachsocketname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_attachparent()) {
    _this->_impl_.attachparent_ = new ::unrealpb::UnrealObjectRef(*from._impl_.attachparent_);
  }
  if (from._internal_has_relativelocation()) {
    _this->_impl_.relativelocation_ = new ::unrealpb::FVector(*from._impl_.relativelocation_);
  }
  if (from._internal_has_relativerotation()) {
    _this->_impl_.relativerotation_ = new ::unrealpb::FVector(*from._impl_.relativerotation_);
  }
  if (from._internal_has_relativescale()) {
    _this->_impl_.relativescale_ = new ::unrealpb::FVector(*from._impl_.relativescale_);
  }
  ::memcpy(&_impl_.removed_, &from._impl_.removed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bshouldsnaprotationwhenattached_) -
    reinterpret_cast<char*>(&_impl_.removed_)) + sizeof(_impl_.bshouldsnaprotationwhenattached_));
  // @@protoc_insertion_point(copy_constructor:unrealpb.SceneComponentState)
}

inline void SceneComponentState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attachchildren_){arena}
    , decltype(_impl_.attachsocketname_){}
    , decltype(_impl_.attachparent_){nullptr}
    , decltype(_impl_.relativelocation_){nullptr}
    , decltype(_impl_.relativerotation_){nullptr}
    , decltype(_impl_.relativescale_){nullptr}
    , decltype(_impl_.removed_){false}
    , decltype(_impl_.babsolutelocation_){false}
    , decltype(_impl_.babsoluterotation_){false}
    , decltype(_impl_.babsolutescale_){false}
    , decltype(_impl_.bvisible_){false}
    , decltype(_impl_.bshouldbeattached_){false}
    , decltype(_impl_.bshouldsnaplocationwhenattached_){false}
    , decltype(_impl_.bshouldsnaprotationwhenattached_){false}
  };
  _impl_.attachsocketname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneComponentState::~SceneComponentState() {
  // @@protoc_insertion_point(destructor:unrealpb.SceneComponentState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneComponentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attachchildren_.~RepeatedPtrField();
  _impl_.attachsocketname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.attachparent_;
  if (this != internal_default_instance()) delete _impl_.relativelocation_;
  if (this != internal_default_instance()) delete _impl_.relativerotation_;
  if (this != internal_default_instance()) delete _impl_.relativescale_;
}

void SceneComponentState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneComponentState::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.SceneComponentState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachchildren_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.attachsocketname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.attachparent_ != nullptr);
      _impl_.attachparent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.relativelocation_ != nullptr);
      _impl_.relativelocation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.relativerotation_ != nullptr);
      _impl_.relativerotation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.relativescale_ != nullptr);
      _impl_.relativescale_->Clear();
    }
  }
  _impl_.removed_ = false;
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.babsolutelocation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.babsolutescale_) -
        reinterpret_cast<char*>(&_impl_.babsolutelocation_)) + sizeof(_impl_.babsolutescale_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.bvisible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bshouldsnaprotationwhenattached_) -
        reinterpret_cast<char*>(&_impl_.bvisible_)) + sizeof(_impl_.bshouldsnaprotationwhenattached_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneComponentState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool removed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bAbsoluteLocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_babsolutelocation(&has_bits);
          _impl_.babsolutelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bAbsoluteRotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_babsoluterotation(&has_bits);
          _impl_.babsoluterotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bAbsoluteScale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_babsolutescale(&has_bits);
          _impl_.babsolutescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bVisible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bvisible(&has_bits);
          _impl_.bvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bShouldBeAttached = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bshouldbeattached(&has_bits);
          _impl_.bshouldbeattached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bShouldSnapLocationWhenAttached = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bshouldsnaplocationwhenattached(&has_bits);
          _impl_.bshouldsnaplocationwhenattached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bShouldSnapRotationWhenAttached = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bshouldsnaprotationwhenattached(&has_bits);
          _impl_.bshouldsnaprotationwhenattached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.UnrealObjectRef attachParent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachparent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .unrealpb.UnrealObjectRef attachChildren = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachchildren(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string attachSocketName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_attachsocketname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unrealpb.SceneComponentState.attachSocketName"));
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector relativeLocation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativelocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector relativeRotation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativerotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector relativeScale = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativescale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneComponentState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.SceneComponentState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_removed(), target);
  }

  // optional bool bAbsoluteLocation = 2;
  if (_internal_has_babsolutelocation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_babsolutelocation(), target);
  }

  // optional bool bAbsoluteRotation = 3;
  if (_internal_has_babsoluterotation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_babsoluterotation(), target);
  }

  // optional bool bAbsoluteScale = 4;
  if (_internal_has_babsolutescale()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_babsolutescale(), target);
  }

  // optional bool bVisible = 5;
  if (_internal_has_bvisible()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bvisible(), target);
  }

  // optional bool bShouldBeAttached = 6;
  if (_internal_has_bshouldbeattached()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bshouldbeattached(), target);
  }

  // optional bool bShouldSnapLocationWhenAttached = 7;
  if (_internal_has_bshouldsnaplocationwhenattached()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bshouldsnaplocationwhenattached(), target);
  }

  // optional bool bShouldSnapRotationWhenAttached = 8;
  if (_internal_has_bshouldsnaprotationwhenattached()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_bshouldsnaprotationwhenattached(), target);
  }

  // optional .unrealpb.UnrealObjectRef attachParent = 9;
  if (_internal_has_attachparent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::attachparent(this),
        _Internal::attachparent(this).GetCachedSize(), target, stream);
  }

  // repeated .unrealpb.UnrealObjectRef attachChildren = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attachchildren_size()); i < n; i++) {
    const auto& repfield = this->_internal_attachchildren(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string attachSocketName = 11;
  if (_internal_has_attachsocketname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachsocketname().data(), static_cast<int>(this->_internal_attachsocketname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unrealpb.SceneComponentState.attachSocketName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_attachsocketname(), target);
  }

  // optional .unrealpb.FVector relativeLocation = 12;
  if (_internal_has_relativelocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::relativelocation(this),
        _Internal::relativelocation(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.FVector relativeRotation = 13;
  if (_internal_has_relativerotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::relativerotation(this),
        _Internal::relativerotation(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.FVector relativeScale = 14;
  if (_internal_has_relativescale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::relativescale(this),
        _Internal::relativescale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.SceneComponentState)
  return target;
}

size_t SceneComponentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.SceneComponentState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .unrealpb.UnrealObjectRef attachChildren = 10;
  total_size += 1UL * this->_internal_attachchildren_size();
  for (const auto& msg : this->_impl_.attachchildren_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string attachSocketName = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attachsocketname());
    }

    // optional .unrealpb.UnrealObjectRef attachParent = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attachparent_);
    }

    // optional .unrealpb.FVector relativeLocation = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relativelocation_);
    }

    // optional .unrealpb.FVector relativeRotation = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relativerotation_);
    }

    // optional .unrealpb.FVector relativeScale = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relativescale_);
    }

  }
  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional bool bAbsoluteLocation = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool bAbsoluteRotation = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool bAbsoluteScale = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool bVisible = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool bShouldBeAttached = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool bShouldSnapLocationWhenAttached = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool bShouldSnapRotationWhenAttached = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneComponentState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneComponentState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneComponentState::GetClassData() const { return &_class_data_; }


void SceneComponentState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneComponentState*>(&to_msg);
  auto& from = static_cast<const SceneComponentState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.SceneComponentState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attachchildren_.MergeFrom(from._impl_.attachchildren_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_attachsocketname(from._internal_attachsocketname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_attachparent()->::unrealpb::UnrealObjectRef::MergeFrom(
          from._internal_attachparent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_relativelocation()->::unrealpb::FVector::MergeFrom(
          from._internal_relativelocation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_relativerotation()->::unrealpb::FVector::MergeFrom(
          from._internal_relativerotation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_relativescale()->::unrealpb::FVector::MergeFrom(
          from._internal_relativescale());
    }
  }
  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  if (cached_has_bits & 0x000000e0u) {
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.babsolutelocation_ = from._impl_.babsolutelocation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.babsoluterotation_ = from._impl_.babsoluterotation_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.babsolutescale_ = from._impl_.babsolutescale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bvisible_ = from._impl_.bvisible_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bshouldbeattached_ = from._impl_.bshouldbeattached_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bshouldsnaplocationwhenattached_ = from._impl_.bshouldsnaplocationwhenattached_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bshouldsnaprotationwhenattached_ = from._impl_.bshouldsnaprotationwhenattached_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneComponentState::CopyFrom(const SceneComponentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.SceneComponentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneComponentState::IsInitialized() const {
  return true;
}

void SceneComponentState::InternalSwap(SceneComponentState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attachchildren_.InternalSwap(&other->_impl_.attachchildren_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attachsocketname_, lhs_arena,
      &other->_impl_.attachsocketname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneComponentState, _impl_.bshouldsnaprotationwhenattached_)
      + sizeof(SceneComponentState::_impl_.bshouldsnaprotationwhenattached_)
      - PROTOBUF_FIELD_OFFSET(SceneComponentState, _impl_.attachparent_)>(
          reinterpret_cast<char*>(&_impl_.attachparent_),
          reinterpret_cast<char*>(&other->_impl_.attachparent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneComponentState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[3]);
}

// ===================================================================

class RootMotionMontage::_Internal {
 public:
};

RootMotionMontage::RootMotionMontage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:unrealpb.RootMotionMontage)
}
RootMotionMontage::RootMotionMontage(const RootMotionMontage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RootMotionMontage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:unrealpb.RootMotionMontage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RootMotionMontage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RootMotionMontage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RootMotionMontage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[4]);
}

// ===================================================================

class BasedMovementInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BasedMovementInfo>()._impl_._has_bits_);
  static const ::unrealpb::UnrealObjectRef& movementbase(const BasedMovementInfo* msg);
  static void set_has_movementbase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::unrealpb::FVector& location(const BasedMovementInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::unrealpb::FVector& rotation(const BasedMovementInfo* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bserverhasbasecomponent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brelativerotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bserverhasvelocity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::unrealpb::UnrealObjectRef&
BasedMovementInfo::_Internal::movementbase(const BasedMovementInfo* msg) {
  return *msg->_impl_.movementbase_;
}
const ::unrealpb::FVector&
BasedMovementInfo::_Internal::location(const BasedMovementInfo* msg) {
  return *msg->_impl_.location_;
}
const ::unrealpb::FVector&
BasedMovementInfo::_Internal::rotation(const BasedMovementInfo* msg) {
  return *msg->_impl_.rotation_;
}
BasedMovementInfo::BasedMovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.BasedMovementInfo)
}
BasedMovementInfo::BasedMovementInfo(const BasedMovementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BasedMovementInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bonename_){}
    , decltype(_impl_.movementbase_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.bserverhasbasecomponent_){}
    , decltype(_impl_.brelativerotation_){}
    , decltype(_impl_.bserverhasvelocity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bonename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bonename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bonename()) {
    _this->_impl_.bonename_.Set(from._internal_bonename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_movementbase()) {
    _this->_impl_.movementbase_ = new ::unrealpb::UnrealObjectRef(*from._impl_.movementbase_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::unrealpb::FVector(*from._impl_.location_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::unrealpb::FVector(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.bserverhasbasecomponent_, &from._impl_.bserverhasbasecomponent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bserverhasvelocity_) -
    reinterpret_cast<char*>(&_impl_.bserverhasbasecomponent_)) + sizeof(_impl_.bserverhasvelocity_));
  // @@protoc_insertion_point(copy_constructor:unrealpb.BasedMovementInfo)
}

inline void BasedMovementInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bonename_){}
    , decltype(_impl_.movementbase_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.bserverhasbasecomponent_){false}
    , decltype(_impl_.brelativerotation_){false}
    , decltype(_impl_.bserverhasvelocity_){false}
  };
  _impl_.bonename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bonename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BasedMovementInfo::~BasedMovementInfo() {
  // @@protoc_insertion_point(destructor:unrealpb.BasedMovementInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasedMovementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bonename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.movementbase_;
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void BasedMovementInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BasedMovementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.BasedMovementInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bonename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.movementbase_ != nullptr);
      _impl_.movementbase_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  ::memset(&_impl_.bserverhasbasecomponent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bserverhasvelocity_) -
      reinterpret_cast<char*>(&_impl_.bserverhasbasecomponent_)) + sizeof(_impl_.bserverhasvelocity_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasedMovementInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .unrealpb.UnrealObjectRef movementBase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movementbase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string boneName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bonename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "unrealpb.BasedMovementInfo.boneName"));
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bServerHasBaseComponent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bserverhasbasecomponent(&has_bits);
          _impl_.bserverhasbasecomponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bRelativeRotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_brelativerotation(&has_bits);
          _impl_.brelativerotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bServerHasVelocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bserverhasvelocity(&has_bits);
          _impl_.bserverhasvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasedMovementInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.BasedMovementInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .unrealpb.UnrealObjectRef movementBase = 1;
  if (_internal_has_movementbase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::movementbase(this),
        _Internal::movementbase(this).GetCachedSize(), target, stream);
  }

  // optional string boneName = 2;
  if (_internal_has_bonename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bonename().data(), static_cast<int>(this->_internal_bonename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "unrealpb.BasedMovementInfo.boneName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bonename(), target);
  }

  // optional .unrealpb.FVector location = 3;
  if (_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.FVector rotation = 4;
  if (_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // optional bool bServerHasBaseComponent = 5;
  if (_internal_has_bserverhasbasecomponent()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bserverhasbasecomponent(), target);
  }

  // optional bool bRelativeRotation = 6;
  if (_internal_has_brelativerotation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_brelativerotation(), target);
  }

  // optional bool bServerHasVelocity = 7;
  if (_internal_has_bserverhasvelocity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bserverhasvelocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.BasedMovementInfo)
  return target;
}

size_t BasedMovementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.BasedMovementInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string boneName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bonename());
    }

    // optional .unrealpb.UnrealObjectRef movementBase = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movementbase_);
    }

    // optional .unrealpb.FVector location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .unrealpb.FVector rotation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

    // optional bool bServerHasBaseComponent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool bRelativeRotation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool bServerHasVelocity = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasedMovementInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BasedMovementInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasedMovementInfo::GetClassData() const { return &_class_data_; }


void BasedMovementInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BasedMovementInfo*>(&to_msg);
  auto& from = static_cast<const BasedMovementInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.BasedMovementInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_bonename(from._internal_bonename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_movementbase()->::unrealpb::UnrealObjectRef::MergeFrom(
          from._internal_movementbase());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_location()->::unrealpb::FVector::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rotation()->::unrealpb::FVector::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bserverhasbasecomponent_ = from._impl_.bserverhasbasecomponent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.brelativerotation_ = from._impl_.brelativerotation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bserverhasvelocity_ = from._impl_.bserverhasvelocity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasedMovementInfo::CopyFrom(const BasedMovementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.BasedMovementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasedMovementInfo::IsInitialized() const {
  return true;
}

void BasedMovementInfo::InternalSwap(BasedMovementInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bonename_, lhs_arena,
      &other->_impl_.bonename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BasedMovementInfo, _impl_.bserverhasvelocity_)
      + sizeof(BasedMovementInfo::_impl_.bserverhasvelocity_)
      - PROTOBUF_FIELD_OFFSET(BasedMovementInfo, _impl_.movementbase_)>(
          reinterpret_cast<char*>(&_impl_.movementbase_),
          reinterpret_cast<char*>(&other->_impl_.movementbase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BasedMovementInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[5]);
}

// ===================================================================

class CharacterState::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterState>()._impl_._has_bits_);
  static const ::unrealpb::RootMotionMontage& rootmotion(const CharacterState* msg);
  static void set_has_rootmotion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::unrealpb::BasedMovementInfo& basedmovement(const CharacterState* msg);
  static void set_has_basedmovement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverlasttransformupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_movementmode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_biscrouched(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bproxyisjumpforceapplied(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_animrootmotiontranslationscale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_replaylasttransformupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::unrealpb::RootMotionMontage&
CharacterState::_Internal::rootmotion(const CharacterState* msg) {
  return *msg->_impl_.rootmotion_;
}
const ::unrealpb::BasedMovementInfo&
CharacterState::_Internal::basedmovement(const CharacterState* msg) {
  return *msg->_impl_.basedmovement_;
}
CharacterState::CharacterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.CharacterState)
}
CharacterState::CharacterState(const CharacterState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharacterState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rootmotion_){nullptr}
    , decltype(_impl_.basedmovement_){nullptr}
    , decltype(_impl_.serverlasttransformupdatetimestamp_){}
    , decltype(_impl_.removed_){}
    , decltype(_impl_.biscrouched_){}
    , decltype(_impl_.bproxyisjumpforceapplied_){}
    , decltype(_impl_.movementmode_){}
    , decltype(_impl_.animrootmotiontranslationscale_){}
    , decltype(_impl_.replaylasttransformupdatetimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rootmotion()) {
    _this->_impl_.rootmotion_ = new ::unrealpb::RootMotionMontage(*from._impl_.rootmotion_);
  }
  if (from._internal_has_basedmovement()) {
    _this->_impl_.basedmovement_ = new ::unrealpb::BasedMovementInfo(*from._impl_.basedmovement_);
  }
  ::memcpy(&_impl_.serverlasttransformupdatetimestamp_, &from._impl_.serverlasttransformupdatetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.replaylasttransformupdatetimestamp_) -
    reinterpret_cast<char*>(&_impl_.serverlasttransformupdatetimestamp_)) + sizeof(_impl_.replaylasttransformupdatetimestamp_));
  // @@protoc_insertion_point(copy_constructor:unrealpb.CharacterState)
}

inline void CharacterState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rootmotion_){nullptr}
    , decltype(_impl_.basedmovement_){nullptr}
    , decltype(_impl_.serverlasttransformupdatetimestamp_){0}
    , decltype(_impl_.removed_){false}
    , decltype(_impl_.biscrouched_){false}
    , decltype(_impl_.bproxyisjumpforceapplied_){false}
    , decltype(_impl_.movementmode_){0u}
    , decltype(_impl_.animrootmotiontranslationscale_){0}
    , decltype(_impl_.replaylasttransformupdatetimestamp_){0}
  };
}

CharacterState::~CharacterState() {
  // @@protoc_insertion_point(destructor:unrealpb.CharacterState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharacterState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rootmotion_;
  if (this != internal_default_instance()) delete _impl_.basedmovement_;
}

void CharacterState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharacterState::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.CharacterState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rootmotion_ != nullptr);
      _impl_.rootmotion_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.basedmovement_ != nullptr);
      _impl_.basedmovement_->Clear();
    }
  }
  _impl_.serverlasttransformupdatetimestamp_ = 0;
  _impl_.removed_ = false;
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.biscrouched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.replaylasttransformupdatetimestamp_) -
        reinterpret_cast<char*>(&_impl_.biscrouched_)) + sizeof(_impl_.replaylasttransformupdatetimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool removed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.RootMotionMontage rootMotion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rootmotion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.BasedMovementInfo basedMovement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_basedmovement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float serverLastTransformUpdateTimeStamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_serverlasttransformupdatetimestamp(&has_bits);
          _impl_.serverlasttransformupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 movementMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_movementmode(&has_bits);
          _impl_.movementmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bIsCrouched = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_biscrouched(&has_bits);
          _impl_.biscrouched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bProxyIsJumpForceApplied = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bproxyisjumpforceapplied(&has_bits);
          _impl_.bproxyisjumpforceapplied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float animRootMotionTranslationScale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_animrootmotiontranslationscale(&has_bits);
          _impl_.animrootmotiontranslationscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float replayLastTransformUpdateTimeStamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_replaylasttransformupdatetimestamp(&has_bits);
          _impl_.replaylasttransformupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharacterState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.CharacterState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_removed(), target);
  }

  // optional .unrealpb.RootMotionMontage rootMotion = 2;
  if (_internal_has_rootmotion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rootmotion(this),
        _Internal::rootmotion(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.BasedMovementInfo basedMovement = 3;
  if (_internal_has_basedmovement()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::basedmovement(this),
        _Internal::basedmovement(this).GetCachedSize(), target, stream);
  }

  // optional float serverLastTransformUpdateTimeStamp = 4;
  if (_internal_has_serverlasttransformupdatetimestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_serverlasttransformupdatetimestamp(), target);
  }

  // optional uint32 movementMode = 5;
  if (_internal_has_movementmode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_movementmode(), target);
  }

  // optional bool bIsCrouched = 6;
  if (_internal_has_biscrouched()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_biscrouched(), target);
  }

  // optional bool bProxyIsJumpForceApplied = 7;
  if (_internal_has_bproxyisjumpforceapplied()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_bproxyisjumpforceapplied(), target);
  }

  // optional float animRootMotionTranslationScale = 8;
  if (_internal_has_animrootmotiontranslationscale()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_animrootmotiontranslationscale(), target);
  }

  // optional float replayLastTransformUpdateTimeStamp = 9;
  if (_internal_has_replaylasttransformupdatetimestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_replaylasttransformupdatetimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.CharacterState)
  return target;
}

size_t CharacterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.CharacterState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .unrealpb.RootMotionMontage rootMotion = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rootmotion_);
    }

    // optional .unrealpb.BasedMovementInfo basedMovement = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.basedmovement_);
    }

    // optional float serverLastTransformUpdateTimeStamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional bool bIsCrouched = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bProxyIsJumpForceApplied = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 movementMode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_movementmode());
    }

    // optional float animRootMotionTranslationScale = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float replayLastTransformUpdateTimeStamp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharacterState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharacterState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharacterState::GetClassData() const { return &_class_data_; }


void CharacterState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharacterState*>(&to_msg);
  auto& from = static_cast<const CharacterState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.CharacterState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rootmotion()->::unrealpb::RootMotionMontage::MergeFrom(
          from._internal_rootmotion());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_basedmovement()->::unrealpb::BasedMovementInfo::MergeFrom(
          from._internal_basedmovement());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.serverlasttransformupdatetimestamp_ = from._impl_.serverlasttransformupdatetimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  if (cached_has_bits & 0x000000f8u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.biscrouched_ = from._impl_.biscrouched_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bproxyisjumpforceapplied_ = from._impl_.bproxyisjumpforceapplied_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.movementmode_ = from._impl_.movementmode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.animrootmotiontranslationscale_ = from._impl_.animrootmotiontranslationscale_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.replaylasttransformupdatetimestamp_ = from._impl_.replaylasttransformupdatetimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterState::CopyFrom(const CharacterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.CharacterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterState::IsInitialized() const {
  return true;
}

void CharacterState::InternalSwap(CharacterState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterState, _impl_.replaylasttransformupdatetimestamp_)
      + sizeof(CharacterState::_impl_.replaylasttransformupdatetimestamp_)
      - PROTOBUF_FIELD_OFFSET(CharacterState, _impl_.rootmotion_)>(
          reinterpret_cast<char*>(&_impl_.rootmotion_),
          reinterpret_cast<char*>(&other->_impl_.rootmotion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[6]);
}

// ===================================================================

class Character_ServerMovePacked_Params::_Internal {
 public:
};

Character_ServerMovePacked_Params::Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.Character_ServerMovePacked_Params)
}
Character_ServerMovePacked_Params::Character_ServerMovePacked_Params(const Character_ServerMovePacked_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Character_ServerMovePacked_Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packedbits_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packedbits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packedbits().empty()) {
    _this->_impl_.packedbits_.Set(from._internal_packedbits(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unrealpb.Character_ServerMovePacked_Params)
}

inline void Character_ServerMovePacked_Params::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packedbits_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packedbits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Character_ServerMovePacked_Params::~Character_ServerMovePacked_Params() {
  // @@protoc_insertion_point(destructor:unrealpb.Character_ServerMovePacked_Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Character_ServerMovePacked_Params::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packedbits_.Destroy();
}

void Character_ServerMovePacked_Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Character_ServerMovePacked_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.Character_ServerMovePacked_Params)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packedbits_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character_ServerMovePacked_Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes PackedBits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packedbits();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character_ServerMovePacked_Params::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.Character_ServerMovePacked_Params)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes PackedBits = 1;
  if (!this->_internal_packedbits().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_packedbits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.Character_ServerMovePacked_Params)
  return target;
}

size_t Character_ServerMovePacked_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.Character_ServerMovePacked_Params)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PackedBits = 1;
  if (!this->_internal_packedbits().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packedbits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character_ServerMovePacked_Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Character_ServerMovePacked_Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character_ServerMovePacked_Params::GetClassData() const { return &_class_data_; }


void Character_ServerMovePacked_Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Character_ServerMovePacked_Params*>(&to_msg);
  auto& from = static_cast<const Character_ServerMovePacked_Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.Character_ServerMovePacked_Params)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packedbits().empty()) {
    _this->_internal_set_packedbits(from._internal_packedbits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character_ServerMovePacked_Params::CopyFrom(const Character_ServerMovePacked_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.Character_ServerMovePacked_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character_ServerMovePacked_Params::IsInitialized() const {
  return true;
}

void Character_ServerMovePacked_Params::InternalSwap(Character_ServerMovePacked_Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packedbits_, lhs_arena,
      &other->_impl_.packedbits_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Character_ServerMovePacked_Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[7]);
}

// ===================================================================

class Character_ClientMoveResponsePacked_Params::_Internal {
 public:
};

Character_ClientMoveResponsePacked_Params::Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.Character_ClientMoveResponsePacked_Params)
}
Character_ClientMoveResponsePacked_Params::Character_ClientMoveResponsePacked_Params(const Character_ClientMoveResponsePacked_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Character_ClientMoveResponsePacked_Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packedbits_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packedbits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packedbits().empty()) {
    _this->_impl_.packedbits_.Set(from._internal_packedbits(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:unrealpb.Character_ClientMoveResponsePacked_Params)
}

inline void Character_ClientMoveResponsePacked_Params::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packedbits_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packedbits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Character_ClientMoveResponsePacked_Params::~Character_ClientMoveResponsePacked_Params() {
  // @@protoc_insertion_point(destructor:unrealpb.Character_ClientMoveResponsePacked_Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Character_ClientMoveResponsePacked_Params::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packedbits_.Destroy();
}

void Character_ClientMoveResponsePacked_Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Character_ClientMoveResponsePacked_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.Character_ClientMoveResponsePacked_Params)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packedbits_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character_ClientMoveResponsePacked_Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes PackedBits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packedbits();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character_ClientMoveResponsePacked_Params::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.Character_ClientMoveResponsePacked_Params)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes PackedBits = 1;
  if (!this->_internal_packedbits().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_packedbits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.Character_ClientMoveResponsePacked_Params)
  return target;
}

size_t Character_ClientMoveResponsePacked_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.Character_ClientMoveResponsePacked_Params)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PackedBits = 1;
  if (!this->_internal_packedbits().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packedbits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character_ClientMoveResponsePacked_Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Character_ClientMoveResponsePacked_Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character_ClientMoveResponsePacked_Params::GetClassData() const { return &_class_data_; }


void Character_ClientMoveResponsePacked_Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Character_ClientMoveResponsePacked_Params*>(&to_msg);
  auto& from = static_cast<const Character_ClientMoveResponsePacked_Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.Character_ClientMoveResponsePacked_Params)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packedbits().empty()) {
    _this->_internal_set_packedbits(from._internal_packedbits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character_ClientMoveResponsePacked_Params::CopyFrom(const Character_ClientMoveResponsePacked_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.Character_ClientMoveResponsePacked_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character_ClientMoveResponsePacked_Params::IsInitialized() const {
  return true;
}

void Character_ClientMoveResponsePacked_Params::InternalSwap(Character_ClientMoveResponsePacked_Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packedbits_, lhs_arena,
      &other->_impl_.packedbits_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Character_ClientMoveResponsePacked_Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[8]);
}

// ===================================================================

class PlayerControllerState::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerControllerState>()._impl_._has_bits_);
  static const ::unrealpb::FVector& targetviewrotation(const PlayerControllerState* msg);
  static void set_has_targetviewrotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::unrealpb::FVector& spawnlocation(const PlayerControllerState* msg);
  static void set_has_spawnlocation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::unrealpb::FVector&
PlayerControllerState::_Internal::targetviewrotation(const PlayerControllerState* msg) {
  return *msg->_impl_.targetviewrotation_;
}
const ::unrealpb::FVector&
PlayerControllerState::_Internal::spawnlocation(const PlayerControllerState* msg) {
  return *msg->_impl_.spawnlocation_;
}
PlayerControllerState::PlayerControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.PlayerControllerState)
}
PlayerControllerState::PlayerControllerState(const PlayerControllerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerControllerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targetviewrotation_){nullptr}
    , decltype(_impl_.spawnlocation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetviewrotation()) {
    _this->_impl_.targetviewrotation_ = new ::unrealpb::FVector(*from._impl_.targetviewrotation_);
  }
  if (from._internal_has_spawnlocation()) {
    _this->_impl_.spawnlocation_ = new ::unrealpb::FVector(*from._impl_.spawnlocation_);
  }
  // @@protoc_insertion_point(copy_constructor:unrealpb.PlayerControllerState)
}

inline void PlayerControllerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.targetviewrotation_){nullptr}
    , decltype(_impl_.spawnlocation_){nullptr}
  };
}

PlayerControllerState::~PlayerControllerState() {
  // @@protoc_insertion_point(destructor:unrealpb.PlayerControllerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerControllerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetviewrotation_;
  if (this != internal_default_instance()) delete _impl_.spawnlocation_;
}

void PlayerControllerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.PlayerControllerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.targetviewrotation_ != nullptr);
      _impl_.targetviewrotation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.spawnlocation_ != nullptr);
      _impl_.spawnlocation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerControllerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .unrealpb.FVector targetViewRotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetviewrotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .unrealpb.FVector spawnLocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spawnlocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerControllerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.PlayerControllerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .unrealpb.FVector targetViewRotation = 1;
  if (_internal_has_targetviewrotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::targetviewrotation(this),
        _Internal::targetviewrotation(this).GetCachedSize(), target, stream);
  }

  // optional .unrealpb.FVector spawnLocation = 2;
  if (_internal_has_spawnlocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spawnlocation(this),
        _Internal::spawnlocation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.PlayerControllerState)
  return target;
}

size_t PlayerControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.PlayerControllerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .unrealpb.FVector targetViewRotation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.targetviewrotation_);
    }

    // optional .unrealpb.FVector spawnLocation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spawnlocation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerControllerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerControllerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerControllerState::GetClassData() const { return &_class_data_; }


void PlayerControllerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerControllerState*>(&to_msg);
  auto& from = static_cast<const PlayerControllerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.PlayerControllerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_targetviewrotation()->::unrealpb::FVector::MergeFrom(
          from._internal_targetviewrotation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_spawnlocation()->::unrealpb::FVector::MergeFrom(
          from._internal_spawnlocation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerControllerState::CopyFrom(const PlayerControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.PlayerControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerControllerState::IsInitialized() const {
  return true;
}

void PlayerControllerState::InternalSwap(PlayerControllerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerControllerState, _impl_.spawnlocation_)
      + sizeof(PlayerControllerState::_impl_.spawnlocation_)
      - PROTOBUF_FIELD_OFFSET(PlayerControllerState, _impl_.targetviewrotation_)>(
          reinterpret_cast<char*>(&_impl_.targetviewrotation_),
          reinterpret_cast<char*>(&other->_impl_.targetviewrotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerControllerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[9]);
}

// ===================================================================

class PlayerController_ServerUpdateCamera_Params::_Internal {
 public:
  static const ::unrealpb::FVector& camloc(const PlayerController_ServerUpdateCamera_Params* msg);
};

const ::unrealpb::FVector&
PlayerController_ServerUpdateCamera_Params::_Internal::camloc(const PlayerController_ServerUpdateCamera_Params* msg) {
  return *msg->_impl_.camloc_;
}
PlayerController_ServerUpdateCamera_Params::PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:unrealpb.PlayerController_ServerUpdateCamera_Params)
}
PlayerController_ServerUpdateCamera_Params::PlayerController_ServerUpdateCamera_Params(const PlayerController_ServerUpdateCamera_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerController_ServerUpdateCamera_Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camloc_){nullptr}
    , decltype(_impl_.campitchandyaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camloc()) {
    _this->_impl_.camloc_ = new ::unrealpb::FVector(*from._impl_.camloc_);
  }
  _this->_impl_.campitchandyaw_ = from._impl_.campitchandyaw_;
  // @@protoc_insertion_point(copy_constructor:unrealpb.PlayerController_ServerUpdateCamera_Params)
}

inline void PlayerController_ServerUpdateCamera_Params::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camloc_){nullptr}
    , decltype(_impl_.campitchandyaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerController_ServerUpdateCamera_Params::~PlayerController_ServerUpdateCamera_Params() {
  // @@protoc_insertion_point(destructor:unrealpb.PlayerController_ServerUpdateCamera_Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerController_ServerUpdateCamera_Params::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.camloc_;
}

void PlayerController_ServerUpdateCamera_Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerController_ServerUpdateCamera_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:unrealpb.PlayerController_ServerUpdateCamera_Params)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.camloc_ != nullptr) {
    delete _impl_.camloc_;
  }
  _impl_.camloc_ = nullptr;
  _impl_.campitchandyaw_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerController_ServerUpdateCamera_Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unrealpb.FVector camLoc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_camloc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 camPitchAndYaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.campitchandyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerController_ServerUpdateCamera_Params::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:unrealpb.PlayerController_ServerUpdateCamera_Params)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unrealpb.FVector camLoc = 1;
  if (this->_internal_has_camloc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::camloc(this),
        _Internal::camloc(this).GetCachedSize(), target, stream);
  }

  // int32 camPitchAndYaw = 2;
  if (this->_internal_campitchandyaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_campitchandyaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:unrealpb.PlayerController_ServerUpdateCamera_Params)
  return target;
}

size_t PlayerController_ServerUpdateCamera_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:unrealpb.PlayerController_ServerUpdateCamera_Params)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unrealpb.FVector camLoc = 1;
  if (this->_internal_has_camloc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.camloc_);
  }

  // int32 camPitchAndYaw = 2;
  if (this->_internal_campitchandyaw() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_campitchandyaw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerController_ServerUpdateCamera_Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerController_ServerUpdateCamera_Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerController_ServerUpdateCamera_Params::GetClassData() const { return &_class_data_; }


void PlayerController_ServerUpdateCamera_Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerController_ServerUpdateCamera_Params*>(&to_msg);
  auto& from = static_cast<const PlayerController_ServerUpdateCamera_Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:unrealpb.PlayerController_ServerUpdateCamera_Params)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_camloc()) {
    _this->_internal_mutable_camloc()->::unrealpb::FVector::MergeFrom(
        from._internal_camloc());
  }
  if (from._internal_campitchandyaw() != 0) {
    _this->_internal_set_campitchandyaw(from._internal_campitchandyaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerController_ServerUpdateCamera_Params::CopyFrom(const PlayerController_ServerUpdateCamera_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unrealpb.PlayerController_ServerUpdateCamera_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerController_ServerUpdateCamera_Params::IsInitialized() const {
  return true;
}

void PlayerController_ServerUpdateCamera_Params::InternalSwap(PlayerController_ServerUpdateCamera_Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerController_ServerUpdateCamera_Params, _impl_.campitchandyaw_)
      + sizeof(PlayerController_ServerUpdateCamera_Params::_impl_.campitchandyaw_)
      - PROTOBUF_FIELD_OFFSET(PlayerController_ServerUpdateCamera_Params, _impl_.camloc_)>(
          reinterpret_cast<char*>(&_impl_.camloc_),
          reinterpret_cast<char*>(&other->_impl_.camloc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerController_ServerUpdateCamera_Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_unreal_5fcommon_2eproto_getter, &descriptor_table_unreal_5fcommon_2eproto_once,
      file_level_metadata_unreal_5fcommon_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace unrealpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::unrealpb::FVector*
Arena::CreateMaybeMessage< ::unrealpb::FVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::FVector >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::UnrealObjectRef*
Arena::CreateMaybeMessage< ::unrealpb::UnrealObjectRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::UnrealObjectRef >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::RemoteFunctionMessage*
Arena::CreateMaybeMessage< ::unrealpb::RemoteFunctionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::RemoteFunctionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::SceneComponentState*
Arena::CreateMaybeMessage< ::unrealpb::SceneComponentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::SceneComponentState >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::RootMotionMontage*
Arena::CreateMaybeMessage< ::unrealpb::RootMotionMontage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::RootMotionMontage >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::BasedMovementInfo*
Arena::CreateMaybeMessage< ::unrealpb::BasedMovementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::BasedMovementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::CharacterState*
Arena::CreateMaybeMessage< ::unrealpb::CharacterState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::CharacterState >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::Character_ServerMovePacked_Params*
Arena::CreateMaybeMessage< ::unrealpb::Character_ServerMovePacked_Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::Character_ServerMovePacked_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::Character_ClientMoveResponsePacked_Params*
Arena::CreateMaybeMessage< ::unrealpb::Character_ClientMoveResponsePacked_Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::Character_ClientMoveResponsePacked_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::PlayerControllerState*
Arena::CreateMaybeMessage< ::unrealpb::PlayerControllerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::PlayerControllerState >(arena);
}
template<> PROTOBUF_NOINLINE ::unrealpb::PlayerController_ServerUpdateCamera_Params*
Arena::CreateMaybeMessage< ::unrealpb::PlayerController_ServerUpdateCamera_Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::unrealpb::PlayerController_ServerUpdateCamera_Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

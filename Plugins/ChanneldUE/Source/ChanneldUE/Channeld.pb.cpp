// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channeld.proto

// Disable UE4 VS warnings
#ifdef _MSC_VER
#	pragma warning(disable: 4946)
#	pragma warning(disable: 4125)
#	pragma warning(disable: 4647)
#	pragma warning(disable: 4668)
#	pragma warning(disable: 4800)
#endif

#include "channeld.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace channeldpb {
class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet>
      _instance;
} _Packet_default_instance_;
class MessagePackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessagePack>
      _instance;
} _MessagePack_default_instance_;
class ServerForwardMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerForwardMessage>
      _instance;
} _ServerForwardMessage_default_instance_;
class AuthMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthMessage>
      _instance;
} _AuthMessage_default_instance_;
class AuthResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthResultMessage>
      _instance;
} _AuthResultMessage_default_instance_;
class ChannelSubscriptionOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelSubscriptionOptions>
      _instance;
} _ChannelSubscriptionOptions_default_instance_;
class ChannelDataMergeOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelDataMergeOptions>
      _instance;
} _ChannelDataMergeOptions_default_instance_;
class CreateChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateChannelMessage>
      _instance;
} _CreateChannelMessage_default_instance_;
class CreateChannelResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateChannelResultMessage>
      _instance;
} _CreateChannelResultMessage_default_instance_;
class RemoveChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveChannelMessage>
      _instance;
} _RemoveChannelMessage_default_instance_;
class ListChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListChannelMessage>
      _instance;
} _ListChannelMessage_default_instance_;
class ListChannelResultMessage_ChannelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListChannelResultMessage_ChannelInfo>
      _instance;
} _ListChannelResultMessage_ChannelInfo_default_instance_;
class ListChannelResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListChannelResultMessage>
      _instance;
} _ListChannelResultMessage_default_instance_;
class SubscribedToChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribedToChannelMessage>
      _instance;
} _SubscribedToChannelMessage_default_instance_;
class SubscribedToChannelResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribedToChannelResultMessage>
      _instance;
} _SubscribedToChannelResultMessage_default_instance_;
class UnsubscribedFromChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnsubscribedFromChannelMessage>
      _instance;
} _UnsubscribedFromChannelMessage_default_instance_;
class UnsubscribedFromChannelResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnsubscribedFromChannelResultMessage>
      _instance;
} _UnsubscribedFromChannelResultMessage_default_instance_;
class ChannelDataUpdateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelDataUpdateMessage>
      _instance;
} _ChannelDataUpdateMessage_default_instance_;
class DisconnectMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisconnectMessage>
      _instance;
} _DisconnectMessage_default_instance_;
class SpatialInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpatialInfo>
      _instance;
} _SpatialInfo_default_instance_;
class CreateSpatialChannelsResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSpatialChannelsResultMessage>
      _instance;
} _CreateSpatialChannelsResultMessage_default_instance_;
class QuerySpatialChannelMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuerySpatialChannelMessage>
      _instance;
} _QuerySpatialChannelMessage_default_instance_;
class QuerySpatialChannelResultMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuerySpatialChannelResultMessage>
      _instance;
} _QuerySpatialChannelResultMessage_default_instance_;
class ChannelDataHandoverMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChannelDataHandoverMessage>
      _instance;
} _ChannelDataHandoverMessage_default_instance_;
class SpatialRegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpatialRegion>
      _instance;
} _SpatialRegion_default_instance_;
class SpatialRegionsUpdateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpatialRegionsUpdateMessage>
      _instance;
} _SpatialRegionsUpdateMessage_default_instance_;
class DebugGetSpatialRegionsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugGetSpatialRegionsMessage>
      _instance;
} _DebugGetSpatialRegionsMessage_default_instance_;
}  // namespace channeldpb
namespace protobuf_channeld_2eproto {
void InitDefaultsPacketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsMessagePack();
  {
    void* ptr = &::channeldpb::_Packet_default_instance_;
    new (ptr) ::channeldpb::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::Packet::InitAsDefaultInstance();
}

void InitDefaultsPacket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPacketImpl);
}

void InitDefaultsMessagePackImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_MessagePack_default_instance_;
    new (ptr) ::channeldpb::MessagePack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::MessagePack::InitAsDefaultInstance();
}

void InitDefaultsMessagePack() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessagePackImpl);
}

void InitDefaultsServerForwardMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_ServerForwardMessage_default_instance_;
    new (ptr) ::channeldpb::ServerForwardMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ServerForwardMessage::InitAsDefaultInstance();
}

void InitDefaultsServerForwardMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerForwardMessageImpl);
}

void InitDefaultsAuthMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_AuthMessage_default_instance_;
    new (ptr) ::channeldpb::AuthMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::AuthMessage::InitAsDefaultInstance();
}

void InitDefaultsAuthMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthMessageImpl);
}

void InitDefaultsAuthResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_AuthResultMessage_default_instance_;
    new (ptr) ::channeldpb::AuthResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::AuthResultMessage::InitAsDefaultInstance();
}

void InitDefaultsAuthResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAuthResultMessageImpl);
}

void InitDefaultsChannelSubscriptionOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_ChannelSubscriptionOptions_default_instance_;
    new (ptr) ::channeldpb::ChannelSubscriptionOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ChannelSubscriptionOptions::InitAsDefaultInstance();
}

void InitDefaultsChannelSubscriptionOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelSubscriptionOptionsImpl);
}

void InitDefaultsChannelDataMergeOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_ChannelDataMergeOptions_default_instance_;
    new (ptr) ::channeldpb::ChannelDataMergeOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ChannelDataMergeOptions::InitAsDefaultInstance();
}

void InitDefaultsChannelDataMergeOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelDataMergeOptionsImpl);
}

void InitDefaultsCreateChannelMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsChannelSubscriptionOptions();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  protobuf_channeld_2eproto::InitDefaultsChannelDataMergeOptions();
  {
    void* ptr = &::channeldpb::_CreateChannelMessage_default_instance_;
    new (ptr) ::channeldpb::CreateChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::CreateChannelMessage::InitAsDefaultInstance();
}

void InitDefaultsCreateChannelMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateChannelMessageImpl);
}

void InitDefaultsCreateChannelResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_CreateChannelResultMessage_default_instance_;
    new (ptr) ::channeldpb::CreateChannelResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::CreateChannelResultMessage::InitAsDefaultInstance();
}

void InitDefaultsCreateChannelResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateChannelResultMessageImpl);
}

void InitDefaultsRemoveChannelMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_RemoveChannelMessage_default_instance_;
    new (ptr) ::channeldpb::RemoveChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::RemoveChannelMessage::InitAsDefaultInstance();
}

void InitDefaultsRemoveChannelMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRemoveChannelMessageImpl);
}

void InitDefaultsListChannelMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_ListChannelMessage_default_instance_;
    new (ptr) ::channeldpb::ListChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ListChannelMessage::InitAsDefaultInstance();
}

void InitDefaultsListChannelMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListChannelMessageImpl);
}

void InitDefaultsListChannelResultMessage_ChannelInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_ListChannelResultMessage_ChannelInfo_default_instance_;
    new (ptr) ::channeldpb::ListChannelResultMessage_ChannelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ListChannelResultMessage_ChannelInfo::InitAsDefaultInstance();
}

void InitDefaultsListChannelResultMessage_ChannelInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListChannelResultMessage_ChannelInfoImpl);
}

void InitDefaultsListChannelResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsListChannelResultMessage_ChannelInfo();
  {
    void* ptr = &::channeldpb::_ListChannelResultMessage_default_instance_;
    new (ptr) ::channeldpb::ListChannelResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ListChannelResultMessage::InitAsDefaultInstance();
}

void InitDefaultsListChannelResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListChannelResultMessageImpl);
}

void InitDefaultsSubscribedToChannelMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsChannelSubscriptionOptions();
  {
    void* ptr = &::channeldpb::_SubscribedToChannelMessage_default_instance_;
    new (ptr) ::channeldpb::SubscribedToChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::SubscribedToChannelMessage::InitAsDefaultInstance();
}

void InitDefaultsSubscribedToChannelMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubscribedToChannelMessageImpl);
}

void InitDefaultsSubscribedToChannelResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsChannelSubscriptionOptions();
  {
    void* ptr = &::channeldpb::_SubscribedToChannelResultMessage_default_instance_;
    new (ptr) ::channeldpb::SubscribedToChannelResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::SubscribedToChannelResultMessage::InitAsDefaultInstance();
}

void InitDefaultsSubscribedToChannelResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubscribedToChannelResultMessageImpl);
}

void InitDefaultsUnsubscribedFromChannelMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_UnsubscribedFromChannelMessage_default_instance_;
    new (ptr) ::channeldpb::UnsubscribedFromChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::UnsubscribedFromChannelMessage::InitAsDefaultInstance();
}

void InitDefaultsUnsubscribedFromChannelMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUnsubscribedFromChannelMessageImpl);
}

void InitDefaultsUnsubscribedFromChannelResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_UnsubscribedFromChannelResultMessage_default_instance_;
    new (ptr) ::channeldpb::UnsubscribedFromChannelResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::UnsubscribedFromChannelResultMessage::InitAsDefaultInstance();
}

void InitDefaultsUnsubscribedFromChannelResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUnsubscribedFromChannelResultMessageImpl);
}

void InitDefaultsChannelDataUpdateMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::channeldpb::_ChannelDataUpdateMessage_default_instance_;
    new (ptr) ::channeldpb::ChannelDataUpdateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ChannelDataUpdateMessage::InitAsDefaultInstance();
}

void InitDefaultsChannelDataUpdateMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelDataUpdateMessageImpl);
}

void InitDefaultsDisconnectMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_DisconnectMessage_default_instance_;
    new (ptr) ::channeldpb::DisconnectMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::DisconnectMessage::InitAsDefaultInstance();
}

void InitDefaultsDisconnectMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisconnectMessageImpl);
}

void InitDefaultsSpatialInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_SpatialInfo_default_instance_;
    new (ptr) ::channeldpb::SpatialInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::SpatialInfo::InitAsDefaultInstance();
}

void InitDefaultsSpatialInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpatialInfoImpl);
}

void InitDefaultsCreateSpatialChannelsResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_CreateSpatialChannelsResultMessage_default_instance_;
    new (ptr) ::channeldpb::CreateSpatialChannelsResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::CreateSpatialChannelsResultMessage::InitAsDefaultInstance();
}

void InitDefaultsCreateSpatialChannelsResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateSpatialChannelsResultMessageImpl);
}

void InitDefaultsQuerySpatialChannelMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsSpatialInfo();
  {
    void* ptr = &::channeldpb::_QuerySpatialChannelMessage_default_instance_;
    new (ptr) ::channeldpb::QuerySpatialChannelMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::QuerySpatialChannelMessage::InitAsDefaultInstance();
}

void InitDefaultsQuerySpatialChannelMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuerySpatialChannelMessageImpl);
}

void InitDefaultsQuerySpatialChannelResultMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_QuerySpatialChannelResultMessage_default_instance_;
    new (ptr) ::channeldpb::QuerySpatialChannelResultMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::QuerySpatialChannelResultMessage::InitAsDefaultInstance();
}

void InitDefaultsQuerySpatialChannelResultMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuerySpatialChannelResultMessageImpl);
}

void InitDefaultsChannelDataHandoverMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::channeldpb::_ChannelDataHandoverMessage_default_instance_;
    new (ptr) ::channeldpb::ChannelDataHandoverMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::ChannelDataHandoverMessage::InitAsDefaultInstance();
}

void InitDefaultsChannelDataHandoverMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannelDataHandoverMessageImpl);
}

void InitDefaultsSpatialRegionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsSpatialInfo();
  {
    void* ptr = &::channeldpb::_SpatialRegion_default_instance_;
    new (ptr) ::channeldpb::SpatialRegion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::SpatialRegion::InitAsDefaultInstance();
}

void InitDefaultsSpatialRegion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpatialRegionImpl);
}

void InitDefaultsSpatialRegionsUpdateMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_channeld_2eproto::InitDefaultsSpatialRegion();
  {
    void* ptr = &::channeldpb::_SpatialRegionsUpdateMessage_default_instance_;
    new (ptr) ::channeldpb::SpatialRegionsUpdateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::SpatialRegionsUpdateMessage::InitAsDefaultInstance();
}

void InitDefaultsSpatialRegionsUpdateMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpatialRegionsUpdateMessageImpl);
}

void InitDefaultsDebugGetSpatialRegionsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::channeldpb::_DebugGetSpatialRegionsMessage_default_instance_;
    new (ptr) ::channeldpb::DebugGetSpatialRegionsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::channeldpb::DebugGetSpatialRegionsMessage::InitAsDefaultInstance();
}

void InitDefaultsDebugGetSpatialRegionsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugGetSpatialRegionsMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[27];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::Packet, messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::MessagePack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::MessagePack, channelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::MessagePack, broadcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::MessagePack, stubid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::MessagePack, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::MessagePack, msgbody_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ServerForwardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ServerForwardMessage, clientconnid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ServerForwardMessage, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthMessage, playeridentifiertoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthMessage, logintoken_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthResultMessage, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthResultMessage, connid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::AuthResultMessage, compressiontype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, dataaccess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, datafieldmasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, fanoutintervalms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, fanoutdelayms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, shouldreplacelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, listsizelimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, truncatetop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, shouldcheckremovablemapfield_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelMessage, channeltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelMessage, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelMessage, suboptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelMessage, mergeoptions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, channeltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, ownerconnid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, channelid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::RemoveChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::RemoveChannelMessage, channelid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelMessage, typefilter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelMessage, metadatafilters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, channelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, channeltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ListChannelResultMessage, channels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelMessage, connid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelMessage, suboptions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, connid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, suboptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, conntype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, channeltype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelMessage, connid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, connid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, conntype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, channeltype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataUpdateMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataUpdateMessage, contextconnid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::DisconnectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::DisconnectMessage, connid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialInfo, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialInfo, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialInfo, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, spatialchannelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, ownerconnid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::QuerySpatialChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::QuerySpatialChannelMessage, spatialinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::QuerySpatialChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::QuerySpatialChannelResultMessage, channelid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, srcchannelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, dstchannelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, contextconnid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegion, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegion, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegion, channelid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegion, serverindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegionsUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::SpatialRegionsUpdateMessage, regions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::channeldpb::DebugGetSpatialRegionsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::channeldpb::Packet)},
  { 6, -1, sizeof(::channeldpb::MessagePack)},
  { 16, -1, sizeof(::channeldpb::ServerForwardMessage)},
  { 23, -1, sizeof(::channeldpb::AuthMessage)},
  { 30, -1, sizeof(::channeldpb::AuthResultMessage)},
  { 38, -1, sizeof(::channeldpb::ChannelSubscriptionOptions)},
  { 47, -1, sizeof(::channeldpb::ChannelDataMergeOptions)},
  { 56, -1, sizeof(::channeldpb::CreateChannelMessage)},
  { 66, -1, sizeof(::channeldpb::CreateChannelResultMessage)},
  { 75, -1, sizeof(::channeldpb::RemoveChannelMessage)},
  { 81, -1, sizeof(::channeldpb::ListChannelMessage)},
  { 88, -1, sizeof(::channeldpb::ListChannelResultMessage_ChannelInfo)},
  { 96, -1, sizeof(::channeldpb::ListChannelResultMessage)},
  { 102, -1, sizeof(::channeldpb::SubscribedToChannelMessage)},
  { 109, -1, sizeof(::channeldpb::SubscribedToChannelResultMessage)},
  { 118, -1, sizeof(::channeldpb::UnsubscribedFromChannelMessage)},
  { 124, -1, sizeof(::channeldpb::UnsubscribedFromChannelResultMessage)},
  { 132, -1, sizeof(::channeldpb::ChannelDataUpdateMessage)},
  { 139, -1, sizeof(::channeldpb::DisconnectMessage)},
  { 145, -1, sizeof(::channeldpb::SpatialInfo)},
  { 153, -1, sizeof(::channeldpb::CreateSpatialChannelsResultMessage)},
  { 161, -1, sizeof(::channeldpb::QuerySpatialChannelMessage)},
  { 167, -1, sizeof(::channeldpb::QuerySpatialChannelResultMessage)},
  { 173, -1, sizeof(::channeldpb::ChannelDataHandoverMessage)},
  { 182, -1, sizeof(::channeldpb::SpatialRegion)},
  { 191, -1, sizeof(::channeldpb::SpatialRegionsUpdateMessage)},
  { 197, -1, sizeof(::channeldpb::DebugGetSpatialRegionsMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_Packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_MessagePack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ServerForwardMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_AuthMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_AuthResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ChannelSubscriptionOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ChannelDataMergeOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_CreateChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_CreateChannelResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_RemoveChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ListChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ListChannelResultMessage_ChannelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ListChannelResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_SubscribedToChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_SubscribedToChannelResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_UnsubscribedFromChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_UnsubscribedFromChannelResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ChannelDataUpdateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_DisconnectMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_SpatialInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_CreateSpatialChannelsResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_QuerySpatialChannelMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_QuerySpatialChannelResultMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_ChannelDataHandoverMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_SpatialRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_SpatialRegionsUpdateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::channeldpb::_DebugGetSpatialRegionsMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "channeld.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 27);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016channeld.proto\022\nchanneldpb\032\031google/pro"
      "tobuf/any.proto\"3\n\006Packet\022)\n\010messages\030\001 "
      "\003(\0132\027.channeldpb.MessagePack\"e\n\013MessageP"
      "ack\022\021\n\tchannelId\030\001 \001(\r\022\021\n\tbroadcast\030\002 \001("
      "\r\022\016\n\006stubId\030\003 \001(\r\022\017\n\007msgType\030\004 \001(\r\022\017\n\007ms"
      "gBody\030\005 \001(\014\"=\n\024ServerForwardMessage\022\024\n\014c"
      "lientConnId\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\"@\n\013Au"
      "thMessage\022\035\n\025playerIdentifierToken\030\001 \001(\t"
      "\022\022\n\nloginToken\030\002 \001(\t\"\322\001\n\021AuthResultMessa"
      "ge\0228\n\006result\030\001 \001(\0162(.channeldpb.AuthResu"
      "ltMessage.AuthResult\022\016\n\006connId\030\002 \001(\r\0224\n\017"
      "compressionType\030\003 \001(\0162\033.channeldpb.Compr"
      "essionType\"=\n\nAuthResult\022\016\n\nSUCCESSFUL\020\000"
      "\022\017\n\013INVALID_PIT\020\001\022\016\n\nINVALID_LT\020\002\"\230\001\n\032Ch"
      "annelSubscriptionOptions\0221\n\ndataAccess\030\001"
      " \001(\0162\035.channeldpb.ChannelDataAccess\022\026\n\016d"
      "ataFieldMasks\030\002 \003(\t\022\030\n\020fanOutIntervalMs\030"
      "\003 \001(\r\022\025\n\rfanOutDelayMs\030\004 \001(\005\"\206\001\n\027Channel"
      "DataMergeOptions\022\031\n\021shouldReplaceList\030\001 "
      "\001(\010\022\025\n\rlistSizeLimit\030\002 \001(\r\022\023\n\013truncateTo"
      "p\030\003 \001(\010\022$\n\034shouldCheckRemovableMapField\030"
      "\004 \001(\010\"\361\001\n\024CreateChannelMessage\022,\n\013channe"
      "lType\030\001 \001(\0162\027.channeldpb.ChannelType\022\020\n\010"
      "metadata\030\002 \001(\t\022:\n\nsubOptions\030\003 \001(\0132&.cha"
      "nneldpb.ChannelSubscriptionOptions\022\"\n\004da"
      "ta\030\004 \001(\0132\024.google.protobuf.Any\0229\n\014mergeO"
      "ptions\030\005 \001(\0132#.channeldpb.ChannelDataMer"
      "geOptions\"\204\001\n\032CreateChannelResultMessage"
      "\022,\n\013channelType\030\001 \001(\0162\027.channeldpb.Chann"
      "elType\022\020\n\010metadata\030\002 \001(\t\022\023\n\013ownerConnId\030"
      "\003 \001(\r\022\021\n\tchannelId\030\004 \001(\r\")\n\024RemoveChanne"
      "lMessage\022\021\n\tchannelId\030\001 \001(\r\"Z\n\022ListChann"
      "elMessage\022+\n\ntypeFilter\030\001 \001(\0162\027.channeld"
      "pb.ChannelType\022\027\n\017metadataFilters\030\002 \003(\t\""
      "\300\001\n\030ListChannelResultMessage\022B\n\010channels"
      "\030\001 \003(\01320.channeldpb.ListChannelResultMes"
      "sage.ChannelInfo\032`\n\013ChannelInfo\022\021\n\tchann"
      "elId\030\001 \001(\r\022,\n\013channelType\030\002 \001(\0162\027.channe"
      "ldpb.ChannelType\022\020\n\010metadata\030\003 \001(\t\"h\n\032Su"
      "bscribedToChannelMessage\022\016\n\006connId\030\001 \001(\r"
      "\022:\n\nsubOptions\030\002 \001(\0132&.channeldpb.Channe"
      "lSubscriptionOptions\"\312\001\n SubscribedToCha"
      "nnelResultMessage\022\016\n\006connId\030\001 \001(\r\022:\n\nsub"
      "Options\030\002 \001(\0132&.channeldpb.ChannelSubscr"
      "iptionOptions\022,\n\010connType\030\003 \001(\0162\032.channe"
      "ldpb.ConnectionType\022,\n\013channelType\030\004 \001(\016"
      "2\027.channeldpb.ChannelType\"0\n\036Unsubscribe"
      "dFromChannelMessage\022\016\n\006connId\030\001 \001(\r\"\222\001\n$"
      "UnsubscribedFromChannelResultMessage\022\016\n\006"
      "connId\030\001 \001(\r\022,\n\010connType\030\002 \001(\0162\032.channel"
      "dpb.ConnectionType\022,\n\013channelType\030\003 \001(\0162"
      "\027.channeldpb.ChannelType\"U\n\030ChannelDataU"
      "pdateMessage\022\"\n\004data\030\001 \001(\0132\024.google.prot"
      "obuf.Any\022\025\n\rcontextConnId\030\002 \001(\r\"#\n\021Disco"
      "nnectMessage\022\016\n\006connId\030\001 \001(\r\".\n\013SpatialI"
      "nfo\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"e\n\""
      "CreateSpatialChannelsResultMessage\022\030\n\020sp"
      "atialChannelId\030\001 \003(\r\022\020\n\010metadata\030\002 \001(\t\022\023"
      "\n\013ownerConnId\030\003 \001(\r\"J\n\032QuerySpatialChann"
      "elMessage\022,\n\013spatialInfo\030\001 \003(\0132\027.channel"
      "dpb.SpatialInfo\"5\n QuerySpatialChannelRe"
      "sultMessage\022\021\n\tchannelId\030\001 \003(\r\"\203\001\n\032Chann"
      "elDataHandoverMessage\022\024\n\014srcChannelId\030\001 "
      "\001(\r\022\024\n\014dstChannelId\030\002 \001(\r\022\025\n\rcontextConn"
      "Id\030\003 \001(\r\022\"\n\004data\030\004 \001(\0132\024.google.protobuf"
      ".Any\"\203\001\n\rSpatialRegion\022$\n\003min\030\001 \001(\0132\027.ch"
      "anneldpb.SpatialInfo\022$\n\003max\030\002 \001(\0132\027.chan"
      "neldpb.SpatialInfo\022\021\n\tchannelId\030\003 \001(\r\022\023\n"
      "\013serverIndex\030\004 \001(\r\"I\n\033SpatialRegionsUpda"
      "teMessage\022*\n\007regions\030\001 \003(\0132\031.channeldpb."
      "SpatialRegion\"\037\n\035DebugGetSpatialRegionsM"
      "essage*\177\n\rBroadcastType\022\020\n\014NO_BROADCAST\020"
      "\000\022\007\n\003ALL\020\001\022\022\n\016ALL_BUT_SENDER\020\002\022\021\n\rALL_BU"
      "T_OWNER\020\004\022\025\n\021SINGLE_CONNECTION\020\010\022\025\n\021ADJA"
      "CENT_CHANNELS\020\020*;\n\016ConnectionType\022\021\n\rNO_"
      "CONNECTION\020\000\022\n\n\006SERVER\020\001\022\n\n\006CLIENT\020\002*\204\001\n"
      "\013ChannelType\022\013\n\007UNKNOWN\020\000\022\n\n\006GLOBAL\020\001\022\013\n"
      "\007PRIVATE\020\002\022\014\n\010SUBWORLD\020\003\022\013\n\007SPATIAL\020\004\022\010\n"
      "\004TEST\020d\022\t\n\005TEST1\020e\022\t\n\005TEST2\020f\022\t\n\005TEST3\020g"
      "\022\t\n\005TEST4\020h*\326\002\n\013MessageType\022\013\n\007INVALID\020\000"
      "\022\010\n\004AUTH\020\001\022\022\n\016CREATE_CHANNEL\020\003\022\022\n\016REMOVE"
      "_CHANNEL\020\004\022\020\n\014LIST_CHANNEL\020\005\022\022\n\016SUB_TO_C"
      "HANNEL\020\006\022\026\n\022UNSUB_FROM_CHANNEL\020\007\022\027\n\023CHAN"
      "NEL_DATA_UPDATE\020\010\022\016\n\nDISCONNECT\020\t\022\032\n\026CRE"
      "ATE_SPATIAL_CHANNEL\020\n\022\031\n\025QUERY_SPATIAL_C"
      "HANNEL\020\013\022\031\n\025CHANNEL_DATA_HANDOVER\020\014\022\032\n\026S"
      "PATIAL_REGIONS_UPDATE\020\r\022\035\n\031DEBUG_GET_SPA"
      "TIAL_REGIONS\020c\022\024\n\020USER_SPACE_START\020d*1\n\017"
      "CompressionType\022\022\n\016NO_COMPRESSION\020\000\022\n\n\006S"
      "NAPPY\020\001*E\n\021ChannelDataAccess\022\r\n\tNO_ACCES"
      "S\020\000\022\017\n\013READ_ACCESS\020\001\022\020\n\014WRITE_ACCESS\020\002B."
      "Z,channeld.clewcat.com/channeld/pkg/chan"
      "neldpbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channeld.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_channeld_2eproto
namespace channeldpb {
const ::google::protobuf::EnumDescriptor* AuthResultMessage_AuthResult_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[0];
}
bool AuthResultMessage_AuthResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthResultMessage_AuthResult AuthResultMessage::SUCCESSFUL;
const AuthResultMessage_AuthResult AuthResultMessage::INVALID_PIT;
const AuthResultMessage_AuthResult AuthResultMessage::INVALID_LT;
const AuthResultMessage_AuthResult AuthResultMessage::AuthResult_MIN;
const AuthResultMessage_AuthResult AuthResultMessage::AuthResult_MAX;
const int AuthResultMessage::AuthResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BroadcastType_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[1];
}
bool BroadcastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[2];
}
bool ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[3];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[4];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressionType_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[5];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelDataAccess_descriptor() {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_channeld_2eproto::file_level_enum_descriptors[6];
}
bool ChannelDataAccess_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsPacket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      messages_(from.messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.Packet)
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:channeldpb.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsPacket();
  return *internal_default_instance();
}

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .channeldpb.MessagePack messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.MessagePack messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.MessagePack messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->messages(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.Packet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .channeldpb.MessagePack messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  messages_.InternalSwap(&other->messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessagePack::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessagePack::kChannelIdFieldNumber;
const int MessagePack::kBroadcastFieldNumber;
const int MessagePack::kStubIdFieldNumber;
const int MessagePack::kMsgTypeFieldNumber;
const int MessagePack::kMsgBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessagePack::MessagePack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsMessagePack();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.MessagePack)
}
MessagePack::MessagePack(const MessagePack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msgbody().size() > 0) {
    msgbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgbody_);
  }
  ::memcpy(&channelid_, &from.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&channelid_)) + sizeof(msgtype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.MessagePack)
}

void MessagePack::SharedCtor() {
  msgbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&channelid_)) + sizeof(msgtype_));
  _cached_size_ = 0;
}

MessagePack::~MessagePack() {
  // @@protoc_insertion_point(destructor:channeldpb.MessagePack)
  SharedDtor();
}

void MessagePack::SharedDtor() {
  msgbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessagePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePack::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessagePack& MessagePack::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsMessagePack();
  return *internal_default_instance();
}

MessagePack* MessagePack::New(::google::protobuf::Arena* arena) const {
  MessagePack* n = new MessagePack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessagePack::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.MessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&channelid_)) + sizeof(msgtype_));
  _internal_metadata_.Clear();
}

bool MessagePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.MessagePack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channelId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 broadcast = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stubId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stubid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msgBody = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.MessagePack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.MessagePack)
  return false;
#undef DO_
}

void MessagePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.MessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // uint32 broadcast = 2;
  if (this->broadcast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->broadcast(), output);
  }

  // uint32 stubId = 3;
  if (this->stubid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stubid(), output);
  }

  // uint32 msgType = 4;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtype(), output);
  }

  // bytes msgBody = 5;
  if (this->msgbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msgbody(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.MessagePack)
}

::google::protobuf::uint8* MessagePack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.MessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // uint32 broadcast = 2;
  if (this->broadcast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->broadcast(), target);
  }

  // uint32 stubId = 3;
  if (this->stubid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stubid(), target);
  }

  // uint32 msgType = 4;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtype(), target);
  }

  // bytes msgBody = 5;
  if (this->msgbody().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msgbody(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.MessagePack)
  return target;
}

size_t MessagePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.MessagePack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes msgBody = 5;
  if (this->msgbody().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msgbody());
  }

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // uint32 broadcast = 2;
  if (this->broadcast() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->broadcast());
  }

  // uint32 stubId = 3;
  if (this->stubid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stubid());
  }

  // uint32 msgType = 4;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.MessagePack)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessagePack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.MessagePack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.MessagePack)
    MergeFrom(*source);
  }
}

void MessagePack::MergeFrom(const MessagePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.MessagePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgbody().size() > 0) {

    msgbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgbody_);
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.broadcast() != 0) {
    set_broadcast(from.broadcast());
  }
  if (from.stubid() != 0) {
    set_stubid(from.stubid());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void MessagePack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.MessagePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePack::CopyFrom(const MessagePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.MessagePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePack::IsInitialized() const {
  return true;
}

void MessagePack::Swap(MessagePack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessagePack::InternalSwap(MessagePack* other) {
  using std::swap;
  msgbody_.Swap(&other->msgbody_);
  swap(channelid_, other->channelid_);
  swap(broadcast_, other->broadcast_);
  swap(stubid_, other->stubid_);
  swap(msgtype_, other->msgtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessagePack::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerForwardMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerForwardMessage::kClientConnIdFieldNumber;
const int ServerForwardMessage::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerForwardMessage::ServerForwardMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsServerForwardMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ServerForwardMessage)
}
ServerForwardMessage::ServerForwardMessage(const ServerForwardMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  clientconnid_ = from.clientconnid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.ServerForwardMessage)
}

void ServerForwardMessage::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientconnid_ = 0u;
  _cached_size_ = 0;
}

ServerForwardMessage::~ServerForwardMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ServerForwardMessage)
  SharedDtor();
}

void ServerForwardMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerForwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerForwardMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerForwardMessage& ServerForwardMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsServerForwardMessage();
  return *internal_default_instance();
}

ServerForwardMessage* ServerForwardMessage::New(::google::protobuf::Arena* arena) const {
  ServerForwardMessage* n = new ServerForwardMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerForwardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ServerForwardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientconnid_ = 0u;
  _internal_metadata_.Clear();
}

bool ServerForwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ServerForwardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 clientConnId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientconnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ServerForwardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ServerForwardMessage)
  return false;
#undef DO_
}

void ServerForwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ServerForwardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clientConnId = 1;
  if (this->clientconnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientconnid(), output);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ServerForwardMessage)
}

::google::protobuf::uint8* ServerForwardMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ServerForwardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clientConnId = 1;
  if (this->clientconnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientconnid(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ServerForwardMessage)
  return target;
}

size_t ServerForwardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ServerForwardMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // uint32 clientConnId = 1;
  if (this->clientconnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clientconnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerForwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ServerForwardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerForwardMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerForwardMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ServerForwardMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ServerForwardMessage)
    MergeFrom(*source);
  }
}

void ServerForwardMessage::MergeFrom(const ServerForwardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ServerForwardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.clientconnid() != 0) {
    set_clientconnid(from.clientconnid());
  }
}

void ServerForwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ServerForwardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerForwardMessage::CopyFrom(const ServerForwardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ServerForwardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerForwardMessage::IsInitialized() const {
  return true;
}

void ServerForwardMessage::Swap(ServerForwardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerForwardMessage::InternalSwap(ServerForwardMessage* other) {
  using std::swap;
  payload_.Swap(&other->payload_);
  swap(clientconnid_, other->clientconnid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerForwardMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthMessage::kPlayerIdentifierTokenFieldNumber;
const int AuthMessage::kLoginTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthMessage::AuthMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsAuthMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.AuthMessage)
}
AuthMessage::AuthMessage(const AuthMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playeridentifiertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playeridentifiertoken().size() > 0) {
    playeridentifiertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playeridentifiertoken_);
  }
  logintoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logintoken().size() > 0) {
    logintoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logintoken_);
  }
  // @@protoc_insertion_point(copy_constructor:channeldpb.AuthMessage)
}

void AuthMessage::SharedCtor() {
  playeridentifiertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.AuthMessage)
  SharedDtor();
}

void AuthMessage::SharedDtor() {
  playeridentifiertoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthMessage& AuthMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsAuthMessage();
  return *internal_default_instance();
}

AuthMessage* AuthMessage::New(::google::protobuf::Arena* arena) const {
  AuthMessage* n = new AuthMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.AuthMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playeridentifiertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.AuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string playerIdentifierToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playeridentifiertoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playeridentifiertoken().data(), static_cast<int>(this->playeridentifiertoken().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.AuthMessage.playerIdentifierToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string loginToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logintoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logintoken().data(), static_cast<int>(this->logintoken().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.AuthMessage.loginToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.AuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.AuthMessage)
  return false;
#undef DO_
}

void AuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.AuthMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerIdentifierToken = 1;
  if (this->playeridentifiertoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playeridentifiertoken().data(), static_cast<int>(this->playeridentifiertoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.AuthMessage.playerIdentifierToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playeridentifiertoken(), output);
  }

  // string loginToken = 2;
  if (this->logintoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logintoken().data(), static_cast<int>(this->logintoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.AuthMessage.loginToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logintoken(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.AuthMessage)
}

::google::protobuf::uint8* AuthMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.AuthMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerIdentifierToken = 1;
  if (this->playeridentifiertoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playeridentifiertoken().data(), static_cast<int>(this->playeridentifiertoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.AuthMessage.playerIdentifierToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playeridentifiertoken(), target);
  }

  // string loginToken = 2;
  if (this->logintoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logintoken().data(), static_cast<int>(this->logintoken().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.AuthMessage.loginToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logintoken(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.AuthMessage)
  return target;
}

size_t AuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.AuthMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string playerIdentifierToken = 1;
  if (this->playeridentifiertoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playeridentifiertoken());
  }

  // string loginToken = 2;
  if (this->logintoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logintoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.AuthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.AuthMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.AuthMessage)
    MergeFrom(*source);
  }
}

void AuthMessage::MergeFrom(const AuthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.AuthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playeridentifiertoken().size() > 0) {

    playeridentifiertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playeridentifiertoken_);
  }
  if (from.logintoken().size() > 0) {

    logintoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logintoken_);
  }
}

void AuthMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.AuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.AuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {
  return true;
}

void AuthMessage::Swap(AuthMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthMessage::InternalSwap(AuthMessage* other) {
  using std::swap;
  playeridentifiertoken_.Swap(&other->playeridentifiertoken_);
  logintoken_.Swap(&other->logintoken_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthResultMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResultMessage::kResultFieldNumber;
const int AuthResultMessage::kConnIdFieldNumber;
const int AuthResultMessage::kCompressionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResultMessage::AuthResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsAuthResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.AuthResultMessage)
}
AuthResultMessage::AuthResultMessage(const AuthResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressiontype_) -
    reinterpret_cast<char*>(&result_)) + sizeof(compressiontype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.AuthResultMessage)
}

void AuthResultMessage::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressiontype_) -
      reinterpret_cast<char*>(&result_)) + sizeof(compressiontype_));
  _cached_size_ = 0;
}

AuthResultMessage::~AuthResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.AuthResultMessage)
  SharedDtor();
}

void AuthResultMessage::SharedDtor() {
}

void AuthResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthResultMessage& AuthResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsAuthResultMessage();
  return *internal_default_instance();
}

AuthResultMessage* AuthResultMessage::New(::google::protobuf::Arena* arena) const {
  AuthResultMessage* n = new AuthResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.AuthResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressiontype_) -
      reinterpret_cast<char*>(&result_)) + sizeof(compressiontype_));
  _internal_metadata_.Clear();
}

bool AuthResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.AuthResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .channeldpb.AuthResultMessage.AuthResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::channeldpb::AuthResultMessage_AuthResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 connId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.CompressionType compressionType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compressiontype(static_cast< ::channeldpb::CompressionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.AuthResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.AuthResultMessage)
  return false;
#undef DO_
}

void AuthResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.AuthResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // uint32 connId = 2;
  if (this->connid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connid(), output);
  }

  // .channeldpb.CompressionType compressionType = 3;
  if (this->compressiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->compressiontype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.AuthResultMessage)
}

::google::protobuf::uint8* AuthResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.AuthResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // uint32 connId = 2;
  if (this->connid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connid(), target);
  }

  // .channeldpb.CompressionType compressionType = 3;
  if (this->compressiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->compressiontype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.AuthResultMessage)
  return target;
}

size_t AuthResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.AuthResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // uint32 connId = 2;
  if (this->connid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connid());
  }

  // .channeldpb.CompressionType compressionType = 3;
  if (this->compressiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compressiontype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.AuthResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.AuthResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.AuthResultMessage)
    MergeFrom(*source);
  }
}

void AuthResultMessage::MergeFrom(const AuthResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.AuthResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.connid() != 0) {
    set_connid(from.connid());
  }
  if (from.compressiontype() != 0) {
    set_compressiontype(from.compressiontype());
  }
}

void AuthResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.AuthResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthResultMessage::CopyFrom(const AuthResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.AuthResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResultMessage::IsInitialized() const {
  return true;
}

void AuthResultMessage::Swap(AuthResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResultMessage::InternalSwap(AuthResultMessage* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(connid_, other->connid_);
  swap(compressiontype_, other->compressiontype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelSubscriptionOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelSubscriptionOptions::kDataAccessFieldNumber;
const int ChannelSubscriptionOptions::kDataFieldMasksFieldNumber;
const int ChannelSubscriptionOptions::kFanOutIntervalMsFieldNumber;
const int ChannelSubscriptionOptions::kFanOutDelayMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelSubscriptionOptions::ChannelSubscriptionOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsChannelSubscriptionOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ChannelSubscriptionOptions)
}
ChannelSubscriptionOptions::ChannelSubscriptionOptions(const ChannelSubscriptionOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      datafieldmasks_(from.datafieldmasks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dataaccess_, &from.dataaccess_,
    static_cast<size_t>(reinterpret_cast<char*>(&fanoutdelayms_) -
    reinterpret_cast<char*>(&dataaccess_)) + sizeof(fanoutdelayms_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelSubscriptionOptions)
}

void ChannelSubscriptionOptions::SharedCtor() {
  ::memset(&dataaccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fanoutdelayms_) -
      reinterpret_cast<char*>(&dataaccess_)) + sizeof(fanoutdelayms_));
  _cached_size_ = 0;
}

ChannelSubscriptionOptions::~ChannelSubscriptionOptions() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelSubscriptionOptions)
  SharedDtor();
}

void ChannelSubscriptionOptions::SharedDtor() {
}

void ChannelSubscriptionOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelSubscriptionOptions::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelSubscriptionOptions& ChannelSubscriptionOptions::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsChannelSubscriptionOptions();
  return *internal_default_instance();
}

ChannelSubscriptionOptions* ChannelSubscriptionOptions::New(::google::protobuf::Arena* arena) const {
  ChannelSubscriptionOptions* n = new ChannelSubscriptionOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelSubscriptionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelSubscriptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datafieldmasks_.Clear();
  ::memset(&dataaccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fanoutdelayms_) -
      reinterpret_cast<char*>(&dataaccess_)) + sizeof(fanoutdelayms_));
  _internal_metadata_.Clear();
}

bool ChannelSubscriptionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ChannelSubscriptionOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .channeldpb.ChannelDataAccess dataAccess = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dataaccess(static_cast< ::channeldpb::ChannelDataAccess >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dataFieldMasks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_datafieldmasks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->datafieldmasks(this->datafieldmasks_size() - 1).data(),
            static_cast<int>(this->datafieldmasks(this->datafieldmasks_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.ChannelSubscriptionOptions.dataFieldMasks"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fanOutIntervalMs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanoutintervalms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fanOutDelayMs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fanoutdelayms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ChannelSubscriptionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ChannelSubscriptionOptions)
  return false;
#undef DO_
}

void ChannelSubscriptionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ChannelSubscriptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelDataAccess dataAccess = 1;
  if (this->dataaccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dataaccess(), output);
  }

  // repeated string dataFieldMasks = 2;
  for (int i = 0, n = this->datafieldmasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datafieldmasks(i).data(), static_cast<int>(this->datafieldmasks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ChannelSubscriptionOptions.dataFieldMasks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->datafieldmasks(i), output);
  }

  // uint32 fanOutIntervalMs = 3;
  if (this->fanoutintervalms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fanoutintervalms(), output);
  }

  // int32 fanOutDelayMs = 4;
  if (this->fanoutdelayms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fanoutdelayms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ChannelSubscriptionOptions)
}

::google::protobuf::uint8* ChannelSubscriptionOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelSubscriptionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelDataAccess dataAccess = 1;
  if (this->dataaccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dataaccess(), target);
  }

  // repeated string dataFieldMasks = 2;
  for (int i = 0, n = this->datafieldmasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datafieldmasks(i).data(), static_cast<int>(this->datafieldmasks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ChannelSubscriptionOptions.dataFieldMasks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->datafieldmasks(i), target);
  }

  // uint32 fanOutIntervalMs = 3;
  if (this->fanoutintervalms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fanoutintervalms(), target);
  }

  // int32 fanOutDelayMs = 4;
  if (this->fanoutdelayms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fanoutdelayms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelSubscriptionOptions)
  return target;
}

size_t ChannelSubscriptionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelSubscriptionOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string dataFieldMasks = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->datafieldmasks_size());
  for (int i = 0, n = this->datafieldmasks_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->datafieldmasks(i));
  }

  // .channeldpb.ChannelDataAccess dataAccess = 1;
  if (this->dataaccess() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataaccess());
  }

  // uint32 fanOutIntervalMs = 3;
  if (this->fanoutintervalms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fanoutintervalms());
  }

  // int32 fanOutDelayMs = 4;
  if (this->fanoutdelayms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fanoutdelayms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelSubscriptionOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ChannelSubscriptionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelSubscriptionOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelSubscriptionOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ChannelSubscriptionOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ChannelSubscriptionOptions)
    MergeFrom(*source);
  }
}

void ChannelSubscriptionOptions::MergeFrom(const ChannelSubscriptionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelSubscriptionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datafieldmasks_.MergeFrom(from.datafieldmasks_);
  if (from.dataaccess() != 0) {
    set_dataaccess(from.dataaccess());
  }
  if (from.fanoutintervalms() != 0) {
    set_fanoutintervalms(from.fanoutintervalms());
  }
  if (from.fanoutdelayms() != 0) {
    set_fanoutdelayms(from.fanoutdelayms());
  }
}

void ChannelSubscriptionOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ChannelSubscriptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelSubscriptionOptions::CopyFrom(const ChannelSubscriptionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelSubscriptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelSubscriptionOptions::IsInitialized() const {
  return true;
}

void ChannelSubscriptionOptions::Swap(ChannelSubscriptionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelSubscriptionOptions::InternalSwap(ChannelSubscriptionOptions* other) {
  using std::swap;
  datafieldmasks_.InternalSwap(&other->datafieldmasks_);
  swap(dataaccess_, other->dataaccess_);
  swap(fanoutintervalms_, other->fanoutintervalms_);
  swap(fanoutdelayms_, other->fanoutdelayms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelSubscriptionOptions::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelDataMergeOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelDataMergeOptions::kShouldReplaceListFieldNumber;
const int ChannelDataMergeOptions::kListSizeLimitFieldNumber;
const int ChannelDataMergeOptions::kTruncateTopFieldNumber;
const int ChannelDataMergeOptions::kShouldCheckRemovableMapFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelDataMergeOptions::ChannelDataMergeOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsChannelDataMergeOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ChannelDataMergeOptions)
}
ChannelDataMergeOptions::ChannelDataMergeOptions(const ChannelDataMergeOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&listsizelimit_, &from.listsizelimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&shouldcheckremovablemapfield_) -
    reinterpret_cast<char*>(&listsizelimit_)) + sizeof(shouldcheckremovablemapfield_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelDataMergeOptions)
}

void ChannelDataMergeOptions::SharedCtor() {
  ::memset(&listsizelimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shouldcheckremovablemapfield_) -
      reinterpret_cast<char*>(&listsizelimit_)) + sizeof(shouldcheckremovablemapfield_));
  _cached_size_ = 0;
}

ChannelDataMergeOptions::~ChannelDataMergeOptions() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelDataMergeOptions)
  SharedDtor();
}

void ChannelDataMergeOptions::SharedDtor() {
}

void ChannelDataMergeOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDataMergeOptions::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelDataMergeOptions& ChannelDataMergeOptions::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsChannelDataMergeOptions();
  return *internal_default_instance();
}

ChannelDataMergeOptions* ChannelDataMergeOptions::New(::google::protobuf::Arena* arena) const {
  ChannelDataMergeOptions* n = new ChannelDataMergeOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelDataMergeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelDataMergeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&listsizelimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shouldcheckremovablemapfield_) -
      reinterpret_cast<char*>(&listsizelimit_)) + sizeof(shouldcheckremovablemapfield_));
  _internal_metadata_.Clear();
}

bool ChannelDataMergeOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ChannelDataMergeOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool shouldReplaceList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shouldreplacelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 listSizeLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listsizelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool truncateTop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &truncatetop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shouldCheckRemovableMapField = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shouldcheckremovablemapfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ChannelDataMergeOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ChannelDataMergeOptions)
  return false;
#undef DO_
}

void ChannelDataMergeOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ChannelDataMergeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool shouldReplaceList = 1;
  if (this->shouldreplacelist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->shouldreplacelist(), output);
  }

  // uint32 listSizeLimit = 2;
  if (this->listsizelimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->listsizelimit(), output);
  }

  // bool truncateTop = 3;
  if (this->truncatetop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->truncatetop(), output);
  }

  // bool shouldCheckRemovableMapField = 4;
  if (this->shouldcheckremovablemapfield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->shouldcheckremovablemapfield(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ChannelDataMergeOptions)
}

::google::protobuf::uint8* ChannelDataMergeOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelDataMergeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool shouldReplaceList = 1;
  if (this->shouldreplacelist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->shouldreplacelist(), target);
  }

  // uint32 listSizeLimit = 2;
  if (this->listsizelimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->listsizelimit(), target);
  }

  // bool truncateTop = 3;
  if (this->truncatetop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->truncatetop(), target);
  }

  // bool shouldCheckRemovableMapField = 4;
  if (this->shouldcheckremovablemapfield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->shouldcheckremovablemapfield(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelDataMergeOptions)
  return target;
}

size_t ChannelDataMergeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelDataMergeOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 listSizeLimit = 2;
  if (this->listsizelimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->listsizelimit());
  }

  // bool shouldReplaceList = 1;
  if (this->shouldreplacelist() != 0) {
    total_size += 1 + 1;
  }

  // bool truncateTop = 3;
  if (this->truncatetop() != 0) {
    total_size += 1 + 1;
  }

  // bool shouldCheckRemovableMapField = 4;
  if (this->shouldcheckremovablemapfield() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelDataMergeOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ChannelDataMergeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDataMergeOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelDataMergeOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ChannelDataMergeOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ChannelDataMergeOptions)
    MergeFrom(*source);
  }
}

void ChannelDataMergeOptions::MergeFrom(const ChannelDataMergeOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelDataMergeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.listsizelimit() != 0) {
    set_listsizelimit(from.listsizelimit());
  }
  if (from.shouldreplacelist() != 0) {
    set_shouldreplacelist(from.shouldreplacelist());
  }
  if (from.truncatetop() != 0) {
    set_truncatetop(from.truncatetop());
  }
  if (from.shouldcheckremovablemapfield() != 0) {
    set_shouldcheckremovablemapfield(from.shouldcheckremovablemapfield());
  }
}

void ChannelDataMergeOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ChannelDataMergeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDataMergeOptions::CopyFrom(const ChannelDataMergeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelDataMergeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDataMergeOptions::IsInitialized() const {
  return true;
}

void ChannelDataMergeOptions::Swap(ChannelDataMergeOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelDataMergeOptions::InternalSwap(ChannelDataMergeOptions* other) {
  using std::swap;
  swap(listsizelimit_, other->listsizelimit_);
  swap(shouldreplacelist_, other->shouldreplacelist_);
  swap(truncatetop_, other->truncatetop_);
  swap(shouldcheckremovablemapfield_, other->shouldcheckremovablemapfield_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelDataMergeOptions::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateChannelMessage::InitAsDefaultInstance() {
  ::channeldpb::_CreateChannelMessage_default_instance_._instance.get_mutable()->suboptions_ = const_cast< ::channeldpb::ChannelSubscriptionOptions*>(
      ::channeldpb::ChannelSubscriptionOptions::internal_default_instance());
  ::channeldpb::_CreateChannelMessage_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  ::channeldpb::_CreateChannelMessage_default_instance_._instance.get_mutable()->mergeoptions_ = const_cast< ::channeldpb::ChannelDataMergeOptions*>(
      ::channeldpb::ChannelDataMergeOptions::internal_default_instance());
}
void CreateChannelMessage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChannelMessage::kChannelTypeFieldNumber;
const int CreateChannelMessage::kMetadataFieldNumber;
const int CreateChannelMessage::kSubOptionsFieldNumber;
const int CreateChannelMessage::kDataFieldNumber;
const int CreateChannelMessage::kMergeOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChannelMessage::CreateChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsCreateChannelMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.CreateChannelMessage)
}
CreateChannelMessage::CreateChannelMessage(const CreateChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_suboptions()) {
    suboptions_ = new ::channeldpb::ChannelSubscriptionOptions(*from.suboptions_);
  } else {
    suboptions_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_mergeoptions()) {
    mergeoptions_ = new ::channeldpb::ChannelDataMergeOptions(*from.mergeoptions_);
  } else {
    mergeoptions_ = NULL;
  }
  channeltype_ = from.channeltype_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.CreateChannelMessage)
}

void CreateChannelMessage::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&suboptions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&suboptions_)) + sizeof(channeltype_));
  _cached_size_ = 0;
}

CreateChannelMessage::~CreateChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.CreateChannelMessage)
  SharedDtor();
}

void CreateChannelMessage::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete suboptions_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete mergeoptions_;
}

void CreateChannelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChannelMessage& CreateChannelMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsCreateChannelMessage();
  return *internal_default_instance();
}

CreateChannelMessage* CreateChannelMessage::New(::google::protobuf::Arena* arena) const {
  CreateChannelMessage* n = new CreateChannelMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.CreateChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && mergeoptions_ != NULL) {
    delete mergeoptions_;
  }
  mergeoptions_ = NULL;
  channeltype_ = 0;
  _internal_metadata_.Clear();
}

bool CreateChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.CreateChannelMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .channeldpb.ChannelType channelType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channeltype(static_cast< ::channeldpb::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.CreateChannelMessage.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suboptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mergeoptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.CreateChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.CreateChannelMessage)
  return false;
#undef DO_
}

void CreateChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.CreateChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType channelType = 1;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channeltype(), output);
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateChannelMessage.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->metadata(), output);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  if (this->has_suboptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->suboptions_, output);
  }

  // .google.protobuf.Any data = 4;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->data_, output);
  }

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  if (this->has_mergeoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mergeoptions_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.CreateChannelMessage)
}

::google::protobuf::uint8* CreateChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.CreateChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType channelType = 1;
  if (this->channeltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channeltype(), target);
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateChannelMessage.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metadata(), target);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  if (this->has_suboptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->suboptions_, deterministic, target);
  }

  // .google.protobuf.Any data = 4;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->data_, deterministic, target);
  }

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  if (this->has_mergeoptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->mergeoptions_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.CreateChannelMessage)
  return target;
}

size_t CreateChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.CreateChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string metadata = 2;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  if (this->has_suboptions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->suboptions_);
  }

  // .google.protobuf.Any data = 4;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  if (this->has_mergeoptions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mergeoptions_);
  }

  // .channeldpb.ChannelType channelType = 1;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.CreateChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.CreateChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.CreateChannelMessage)
    MergeFrom(*source);
  }
}

void CreateChannelMessage::MergeFrom(const CreateChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.CreateChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_suboptions()) {
    mutable_suboptions()->::channeldpb::ChannelSubscriptionOptions::MergeFrom(from.suboptions());
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.has_mergeoptions()) {
    mutable_mergeoptions()->::channeldpb::ChannelDataMergeOptions::MergeFrom(from.mergeoptions());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
}

void CreateChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.CreateChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelMessage::CopyFrom(const CreateChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.CreateChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelMessage::IsInitialized() const {
  return true;
}

void CreateChannelMessage::Swap(CreateChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChannelMessage::InternalSwap(CreateChannelMessage* other) {
  using std::swap;
  metadata_.Swap(&other->metadata_);
  swap(suboptions_, other->suboptions_);
  swap(data_, other->data_);
  swap(mergeoptions_, other->mergeoptions_);
  swap(channeltype_, other->channeltype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChannelMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateChannelResultMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateChannelResultMessage::kChannelTypeFieldNumber;
const int CreateChannelResultMessage::kMetadataFieldNumber;
const int CreateChannelResultMessage::kOwnerConnIdFieldNumber;
const int CreateChannelResultMessage::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateChannelResultMessage::CreateChannelResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsCreateChannelResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.CreateChannelResultMessage)
}
CreateChannelResultMessage::CreateChannelResultMessage(const CreateChannelResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&channeltype_, &from.channeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&channeltype_)) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.CreateChannelResultMessage)
}

void CreateChannelResultMessage::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&channeltype_)) + sizeof(channelid_));
  _cached_size_ = 0;
}

CreateChannelResultMessage::~CreateChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.CreateChannelResultMessage)
  SharedDtor();
}

void CreateChannelResultMessage::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateChannelResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChannelResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateChannelResultMessage& CreateChannelResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsCreateChannelResultMessage();
  return *internal_default_instance();
}

CreateChannelResultMessage* CreateChannelResultMessage::New(::google::protobuf::Arena* arena) const {
  CreateChannelResultMessage* n = new CreateChannelResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.CreateChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&channeltype_)) + sizeof(channelid_));
  _internal_metadata_.Clear();
}

bool CreateChannelResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.CreateChannelResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .channeldpb.ChannelType channelType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channeltype(static_cast< ::channeldpb::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.CreateChannelResultMessage.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ownerConnId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerconnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channelId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.CreateChannelResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.CreateChannelResultMessage)
  return false;
#undef DO_
}

void CreateChannelResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.CreateChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType channelType = 1;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channeltype(), output);
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateChannelResultMessage.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->metadata(), output);
  }

  // uint32 ownerConnId = 3;
  if (this->ownerconnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ownerconnid(), output);
  }

  // uint32 channelId = 4;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channelid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.CreateChannelResultMessage)
}

::google::protobuf::uint8* CreateChannelResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.CreateChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType channelType = 1;
  if (this->channeltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channeltype(), target);
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateChannelResultMessage.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metadata(), target);
  }

  // uint32 ownerConnId = 3;
  if (this->ownerconnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ownerconnid(), target);
  }

  // uint32 channelId = 4;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channelid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.CreateChannelResultMessage)
  return target;
}

size_t CreateChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.CreateChannelResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string metadata = 2;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // .channeldpb.ChannelType channelType = 1;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
  }

  // uint32 ownerConnId = 3;
  if (this->ownerconnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ownerconnid());
  }

  // uint32 channelId = 4;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChannelResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.CreateChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateChannelResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.CreateChannelResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.CreateChannelResultMessage)
    MergeFrom(*source);
  }
}

void CreateChannelResultMessage::MergeFrom(const CreateChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.CreateChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
  if (from.ownerconnid() != 0) {
    set_ownerconnid(from.ownerconnid());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
}

void CreateChannelResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.CreateChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelResultMessage::CopyFrom(const CreateChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.CreateChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResultMessage::IsInitialized() const {
  return true;
}

void CreateChannelResultMessage::Swap(CreateChannelResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateChannelResultMessage::InternalSwap(CreateChannelResultMessage* other) {
  using std::swap;
  metadata_.Swap(&other->metadata_);
  swap(channeltype_, other->channeltype_);
  swap(ownerconnid_, other->ownerconnid_);
  swap(channelid_, other->channelid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateChannelResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoveChannelMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveChannelMessage::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveChannelMessage::RemoveChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsRemoveChannelMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.RemoveChannelMessage)
}
RemoveChannelMessage::RemoveChannelMessage(const RemoveChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_ = from.channelid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.RemoveChannelMessage)
}

void RemoveChannelMessage::SharedCtor() {
  channelid_ = 0u;
  _cached_size_ = 0;
}

RemoveChannelMessage::~RemoveChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.RemoveChannelMessage)
  SharedDtor();
}

void RemoveChannelMessage::SharedDtor() {
}

void RemoveChannelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveChannelMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveChannelMessage& RemoveChannelMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsRemoveChannelMessage();
  return *internal_default_instance();
}

RemoveChannelMessage* RemoveChannelMessage::New(::google::protobuf::Arena* arena) const {
  RemoveChannelMessage* n = new RemoveChannelMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.RemoveChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_ = 0u;
  _internal_metadata_.Clear();
}

bool RemoveChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.RemoveChannelMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channelId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.RemoveChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.RemoveChannelMessage)
  return false;
#undef DO_
}

void RemoveChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.RemoveChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.RemoveChannelMessage)
}

::google::protobuf::uint8* RemoveChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.RemoveChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.RemoveChannelMessage)
  return target;
}

size_t RemoveChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.RemoveChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.RemoveChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.RemoveChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.RemoveChannelMessage)
    MergeFrom(*source);
  }
}

void RemoveChannelMessage::MergeFrom(const RemoveChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.RemoveChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
}

void RemoveChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.RemoveChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveChannelMessage::CopyFrom(const RemoveChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.RemoveChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveChannelMessage::IsInitialized() const {
  return true;
}

void RemoveChannelMessage::Swap(RemoveChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveChannelMessage::InternalSwap(RemoveChannelMessage* other) {
  using std::swap;
  swap(channelid_, other->channelid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveChannelMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListChannelMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListChannelMessage::kTypeFilterFieldNumber;
const int ListChannelMessage::kMetadataFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListChannelMessage::ListChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsListChannelMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ListChannelMessage)
}
ListChannelMessage::ListChannelMessage(const ListChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metadatafilters_(from.metadatafilters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typefilter_ = from.typefilter_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.ListChannelMessage)
}

void ListChannelMessage::SharedCtor() {
  typefilter_ = 0;
  _cached_size_ = 0;
}

ListChannelMessage::~ListChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ListChannelMessage)
  SharedDtor();
}

void ListChannelMessage::SharedDtor() {
}

void ListChannelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListChannelMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListChannelMessage& ListChannelMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsListChannelMessage();
  return *internal_default_instance();
}

ListChannelMessage* ListChannelMessage::New(::google::protobuf::Arena* arena) const {
  ListChannelMessage* n = new ListChannelMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ListChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadatafilters_.Clear();
  typefilter_ = 0;
  _internal_metadata_.Clear();
}

bool ListChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ListChannelMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .channeldpb.ChannelType typeFilter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typefilter(static_cast< ::channeldpb::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string metadataFilters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metadatafilters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadatafilters(this->metadatafilters_size() - 1).data(),
            static_cast<int>(this->metadatafilters(this->metadatafilters_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.ListChannelMessage.metadataFilters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ListChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ListChannelMessage)
  return false;
#undef DO_
}

void ListChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ListChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType typeFilter = 1;
  if (this->typefilter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typefilter(), output);
  }

  // repeated string metadataFilters = 2;
  for (int i = 0, n = this->metadatafilters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadatafilters(i).data(), static_cast<int>(this->metadatafilters(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ListChannelMessage.metadataFilters");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->metadatafilters(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ListChannelMessage)
}

::google::protobuf::uint8* ListChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ListChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType typeFilter = 1;
  if (this->typefilter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typefilter(), target);
  }

  // repeated string metadataFilters = 2;
  for (int i = 0, n = this->metadatafilters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadatafilters(i).data(), static_cast<int>(this->metadatafilters(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ListChannelMessage.metadataFilters");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->metadatafilters(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ListChannelMessage)
  return target;
}

size_t ListChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ListChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string metadataFilters = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadatafilters_size());
  for (int i = 0, n = this->metadatafilters_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metadatafilters(i));
  }

  // .channeldpb.ChannelType typeFilter = 1;
  if (this->typefilter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typefilter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ListChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ListChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ListChannelMessage)
    MergeFrom(*source);
  }
}

void ListChannelMessage::MergeFrom(const ListChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ListChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadatafilters_.MergeFrom(from.metadatafilters_);
  if (from.typefilter() != 0) {
    set_typefilter(from.typefilter());
  }
}

void ListChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ListChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelMessage::CopyFrom(const ListChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ListChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelMessage::IsInitialized() const {
  return true;
}

void ListChannelMessage::Swap(ListChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListChannelMessage::InternalSwap(ListChannelMessage* other) {
  using std::swap;
  metadatafilters_.InternalSwap(&other->metadatafilters_);
  swap(typefilter_, other->typefilter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListChannelMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListChannelResultMessage_ChannelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListChannelResultMessage_ChannelInfo::kChannelIdFieldNumber;
const int ListChannelResultMessage_ChannelInfo::kChannelTypeFieldNumber;
const int ListChannelResultMessage_ChannelInfo::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListChannelResultMessage_ChannelInfo::ListChannelResultMessage_ChannelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsListChannelResultMessage_ChannelInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ListChannelResultMessage.ChannelInfo)
}
ListChannelResultMessage_ChannelInfo::ListChannelResultMessage_ChannelInfo(const ListChannelResultMessage_ChannelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ::memcpy(&channelid_, &from.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&channelid_)) + sizeof(channeltype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ListChannelResultMessage.ChannelInfo)
}

void ListChannelResultMessage_ChannelInfo::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&channelid_)) + sizeof(channeltype_));
  _cached_size_ = 0;
}

ListChannelResultMessage_ChannelInfo::~ListChannelResultMessage_ChannelInfo() {
  // @@protoc_insertion_point(destructor:channeldpb.ListChannelResultMessage.ChannelInfo)
  SharedDtor();
}

void ListChannelResultMessage_ChannelInfo::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListChannelResultMessage_ChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListChannelResultMessage_ChannelInfo::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListChannelResultMessage_ChannelInfo& ListChannelResultMessage_ChannelInfo::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsListChannelResultMessage_ChannelInfo();
  return *internal_default_instance();
}

ListChannelResultMessage_ChannelInfo* ListChannelResultMessage_ChannelInfo::New(::google::protobuf::Arena* arena) const {
  ListChannelResultMessage_ChannelInfo* n = new ListChannelResultMessage_ChannelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListChannelResultMessage_ChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&channelid_)) + sizeof(channeltype_));
  _internal_metadata_.Clear();
}

bool ListChannelResultMessage_ChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channelId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelType channelType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channeltype(static_cast< ::channeldpb::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.ListChannelResultMessage.ChannelInfo.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ListChannelResultMessage.ChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ListChannelResultMessage.ChannelInfo)
  return false;
#undef DO_
}

void ListChannelResultMessage_ChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // .channeldpb.ChannelType channelType = 2;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channeltype(), output);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ListChannelResultMessage.ChannelInfo.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->metadata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ListChannelResultMessage.ChannelInfo)
}

::google::protobuf::uint8* ListChannelResultMessage_ChannelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // .channeldpb.ChannelType channelType = 2;
  if (this->channeltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channeltype(), target);
  }

  // string metadata = 3;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ListChannelResultMessage.ChannelInfo.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->metadata(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ListChannelResultMessage.ChannelInfo)
  return target;
}

size_t ListChannelResultMessage_ChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string metadata = 3;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // uint32 channelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // .channeldpb.ChannelType channelType = 2;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListChannelResultMessage_ChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelResultMessage_ChannelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListChannelResultMessage_ChannelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ListChannelResultMessage.ChannelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ListChannelResultMessage.ChannelInfo)
    MergeFrom(*source);
  }
}

void ListChannelResultMessage_ChannelInfo::MergeFrom(const ListChannelResultMessage_ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
}

void ListChannelResultMessage_ChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelResultMessage_ChannelInfo::CopyFrom(const ListChannelResultMessage_ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelResultMessage_ChannelInfo::IsInitialized() const {
  return true;
}

void ListChannelResultMessage_ChannelInfo::Swap(ListChannelResultMessage_ChannelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListChannelResultMessage_ChannelInfo::InternalSwap(ListChannelResultMessage_ChannelInfo* other) {
  using std::swap;
  metadata_.Swap(&other->metadata_);
  swap(channelid_, other->channelid_);
  swap(channeltype_, other->channeltype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListChannelResultMessage_ChannelInfo::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListChannelResultMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListChannelResultMessage::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListChannelResultMessage::ListChannelResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsListChannelResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ListChannelResultMessage)
}
ListChannelResultMessage::ListChannelResultMessage(const ListChannelResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channels_(from.channels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.ListChannelResultMessage)
}

void ListChannelResultMessage::SharedCtor() {
  _cached_size_ = 0;
}

ListChannelResultMessage::~ListChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ListChannelResultMessage)
  SharedDtor();
}

void ListChannelResultMessage::SharedDtor() {
}

void ListChannelResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListChannelResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListChannelResultMessage& ListChannelResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsListChannelResultMessage();
  return *internal_default_instance();
}

ListChannelResultMessage* ListChannelResultMessage::New(::google::protobuf::Arena* arena) const {
  ListChannelResultMessage* n = new ListChannelResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ListChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

bool ListChannelResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ListChannelResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ListChannelResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ListChannelResultMessage)
  return false;
#undef DO_
}

void ListChannelResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ListChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ListChannelResultMessage)
}

::google::protobuf::uint8* ListChannelResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ListChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->channels(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ListChannelResultMessage)
  return target;
}

size_t ListChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ListChannelResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->channels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channels(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListChannelResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ListChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListChannelResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ListChannelResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ListChannelResultMessage)
    MergeFrom(*source);
  }
}

void ListChannelResultMessage::MergeFrom(const ListChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ListChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void ListChannelResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ListChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelResultMessage::CopyFrom(const ListChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ListChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelResultMessage::IsInitialized() const {
  return true;
}

void ListChannelResultMessage::Swap(ListChannelResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListChannelResultMessage::InternalSwap(ListChannelResultMessage* other) {
  using std::swap;
  channels_.InternalSwap(&other->channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListChannelResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubscribedToChannelMessage::InitAsDefaultInstance() {
  ::channeldpb::_SubscribedToChannelMessage_default_instance_._instance.get_mutable()->suboptions_ = const_cast< ::channeldpb::ChannelSubscriptionOptions*>(
      ::channeldpb::ChannelSubscriptionOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribedToChannelMessage::kConnIdFieldNumber;
const int SubscribedToChannelMessage::kSubOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribedToChannelMessage::SubscribedToChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsSubscribedToChannelMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.SubscribedToChannelMessage)
}
SubscribedToChannelMessage::SubscribedToChannelMessage(const SubscribedToChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_suboptions()) {
    suboptions_ = new ::channeldpb::ChannelSubscriptionOptions(*from.suboptions_);
  } else {
    suboptions_ = NULL;
  }
  connid_ = from.connid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.SubscribedToChannelMessage)
}

void SubscribedToChannelMessage::SharedCtor() {
  ::memset(&suboptions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connid_) -
      reinterpret_cast<char*>(&suboptions_)) + sizeof(connid_));
  _cached_size_ = 0;
}

SubscribedToChannelMessage::~SubscribedToChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.SubscribedToChannelMessage)
  SharedDtor();
}

void SubscribedToChannelMessage::SharedDtor() {
  if (this != internal_default_instance()) delete suboptions_;
}

void SubscribedToChannelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribedToChannelMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribedToChannelMessage& SubscribedToChannelMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsSubscribedToChannelMessage();
  return *internal_default_instance();
}

SubscribedToChannelMessage* SubscribedToChannelMessage::New(::google::protobuf::Arena* arena) const {
  SubscribedToChannelMessage* n = new SubscribedToChannelMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribedToChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SubscribedToChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
  connid_ = 0u;
  _internal_metadata_.Clear();
}

bool SubscribedToChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.SubscribedToChannelMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 connId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suboptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.SubscribedToChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.SubscribedToChannelMessage)
  return false;
#undef DO_
}

void SubscribedToChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.SubscribedToChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connid(), output);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->has_suboptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->suboptions_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.SubscribedToChannelMessage)
}

::google::protobuf::uint8* SubscribedToChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SubscribedToChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connid(), target);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->has_suboptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->suboptions_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SubscribedToChannelMessage)
  return target;
}

size_t SubscribedToChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SubscribedToChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->has_suboptions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->suboptions_);
  }

  // uint32 connId = 1;
  if (this->connid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribedToChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.SubscribedToChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribedToChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribedToChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.SubscribedToChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.SubscribedToChannelMessage)
    MergeFrom(*source);
  }
}

void SubscribedToChannelMessage::MergeFrom(const SubscribedToChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SubscribedToChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_suboptions()) {
    mutable_suboptions()->::channeldpb::ChannelSubscriptionOptions::MergeFrom(from.suboptions());
  }
  if (from.connid() != 0) {
    set_connid(from.connid());
  }
}

void SubscribedToChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.SubscribedToChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribedToChannelMessage::CopyFrom(const SubscribedToChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SubscribedToChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedToChannelMessage::IsInitialized() const {
  return true;
}

void SubscribedToChannelMessage::Swap(SubscribedToChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribedToChannelMessage::InternalSwap(SubscribedToChannelMessage* other) {
  using std::swap;
  swap(suboptions_, other->suboptions_);
  swap(connid_, other->connid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribedToChannelMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubscribedToChannelResultMessage::InitAsDefaultInstance() {
  ::channeldpb::_SubscribedToChannelResultMessage_default_instance_._instance.get_mutable()->suboptions_ = const_cast< ::channeldpb::ChannelSubscriptionOptions*>(
      ::channeldpb::ChannelSubscriptionOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribedToChannelResultMessage::kConnIdFieldNumber;
const int SubscribedToChannelResultMessage::kSubOptionsFieldNumber;
const int SubscribedToChannelResultMessage::kConnTypeFieldNumber;
const int SubscribedToChannelResultMessage::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribedToChannelResultMessage::SubscribedToChannelResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsSubscribedToChannelResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.SubscribedToChannelResultMessage)
}
SubscribedToChannelResultMessage::SubscribedToChannelResultMessage(const SubscribedToChannelResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_suboptions()) {
    suboptions_ = new ::channeldpb::ChannelSubscriptionOptions(*from.suboptions_);
  } else {
    suboptions_ = NULL;
  }
  ::memcpy(&connid_, &from.connid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&connid_)) + sizeof(channeltype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.SubscribedToChannelResultMessage)
}

void SubscribedToChannelResultMessage::SharedCtor() {
  ::memset(&suboptions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&suboptions_)) + sizeof(channeltype_));
  _cached_size_ = 0;
}

SubscribedToChannelResultMessage::~SubscribedToChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.SubscribedToChannelResultMessage)
  SharedDtor();
}

void SubscribedToChannelResultMessage::SharedDtor() {
  if (this != internal_default_instance()) delete suboptions_;
}

void SubscribedToChannelResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribedToChannelResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribedToChannelResultMessage& SubscribedToChannelResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsSubscribedToChannelResultMessage();
  return *internal_default_instance();
}

SubscribedToChannelResultMessage* SubscribedToChannelResultMessage::New(::google::protobuf::Arena* arena) const {
  SubscribedToChannelResultMessage* n = new SubscribedToChannelResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribedToChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SubscribedToChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
  ::memset(&connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&connid_)) + sizeof(channeltype_));
  _internal_metadata_.Clear();
}

bool SubscribedToChannelResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.SubscribedToChannelResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 connId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_suboptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ConnectionType connType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_conntype(static_cast< ::channeldpb::ConnectionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelType channelType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channeltype(static_cast< ::channeldpb::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.SubscribedToChannelResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.SubscribedToChannelResultMessage)
  return false;
#undef DO_
}

void SubscribedToChannelResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.SubscribedToChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connid(), output);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->has_suboptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->suboptions_, output);
  }

  // .channeldpb.ConnectionType connType = 3;
  if (this->conntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->conntype(), output);
  }

  // .channeldpb.ChannelType channelType = 4;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channeltype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.SubscribedToChannelResultMessage)
}

::google::protobuf::uint8* SubscribedToChannelResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SubscribedToChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connid(), target);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->has_suboptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->suboptions_, deterministic, target);
  }

  // .channeldpb.ConnectionType connType = 3;
  if (this->conntype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->conntype(), target);
  }

  // .channeldpb.ChannelType channelType = 4;
  if (this->channeltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channeltype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SubscribedToChannelResultMessage)
  return target;
}

size_t SubscribedToChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SubscribedToChannelResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->has_suboptions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->suboptions_);
  }

  // uint32 connId = 1;
  if (this->connid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connid());
  }

  // .channeldpb.ConnectionType connType = 3;
  if (this->conntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->conntype());
  }

  // .channeldpb.ChannelType channelType = 4;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribedToChannelResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.SubscribedToChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribedToChannelResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribedToChannelResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.SubscribedToChannelResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.SubscribedToChannelResultMessage)
    MergeFrom(*source);
  }
}

void SubscribedToChannelResultMessage::MergeFrom(const SubscribedToChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SubscribedToChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_suboptions()) {
    mutable_suboptions()->::channeldpb::ChannelSubscriptionOptions::MergeFrom(from.suboptions());
  }
  if (from.connid() != 0) {
    set_connid(from.connid());
  }
  if (from.conntype() != 0) {
    set_conntype(from.conntype());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
}

void SubscribedToChannelResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.SubscribedToChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribedToChannelResultMessage::CopyFrom(const SubscribedToChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SubscribedToChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedToChannelResultMessage::IsInitialized() const {
  return true;
}

void SubscribedToChannelResultMessage::Swap(SubscribedToChannelResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribedToChannelResultMessage::InternalSwap(SubscribedToChannelResultMessage* other) {
  using std::swap;
  swap(suboptions_, other->suboptions_);
  swap(connid_, other->connid_);
  swap(conntype_, other->conntype_);
  swap(channeltype_, other->channeltype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribedToChannelResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnsubscribedFromChannelMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsubscribedFromChannelMessage::kConnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsubscribedFromChannelMessage::UnsubscribedFromChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsUnsubscribedFromChannelMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.UnsubscribedFromChannelMessage)
}
UnsubscribedFromChannelMessage::UnsubscribedFromChannelMessage(const UnsubscribedFromChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connid_ = from.connid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.UnsubscribedFromChannelMessage)
}

void UnsubscribedFromChannelMessage::SharedCtor() {
  connid_ = 0u;
  _cached_size_ = 0;
}

UnsubscribedFromChannelMessage::~UnsubscribedFromChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.UnsubscribedFromChannelMessage)
  SharedDtor();
}

void UnsubscribedFromChannelMessage::SharedDtor() {
}

void UnsubscribedFromChannelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribedFromChannelMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnsubscribedFromChannelMessage& UnsubscribedFromChannelMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsUnsubscribedFromChannelMessage();
  return *internal_default_instance();
}

UnsubscribedFromChannelMessage* UnsubscribedFromChannelMessage::New(::google::protobuf::Arena* arena) const {
  UnsubscribedFromChannelMessage* n = new UnsubscribedFromChannelMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsubscribedFromChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.UnsubscribedFromChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connid_ = 0u;
  _internal_metadata_.Clear();
}

bool UnsubscribedFromChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.UnsubscribedFromChannelMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 connId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.UnsubscribedFromChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.UnsubscribedFromChannelMessage)
  return false;
#undef DO_
}

void UnsubscribedFromChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.UnsubscribedFromChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.UnsubscribedFromChannelMessage)
}

::google::protobuf::uint8* UnsubscribedFromChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.UnsubscribedFromChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.UnsubscribedFromChannelMessage)
  return target;
}

size_t UnsubscribedFromChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.UnsubscribedFromChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 connId = 1;
  if (this->connid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribedFromChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.UnsubscribedFromChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribedFromChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsubscribedFromChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.UnsubscribedFromChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.UnsubscribedFromChannelMessage)
    MergeFrom(*source);
  }
}

void UnsubscribedFromChannelMessage::MergeFrom(const UnsubscribedFromChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.UnsubscribedFromChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connid() != 0) {
    set_connid(from.connid());
  }
}

void UnsubscribedFromChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.UnsubscribedFromChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribedFromChannelMessage::CopyFrom(const UnsubscribedFromChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.UnsubscribedFromChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribedFromChannelMessage::IsInitialized() const {
  return true;
}

void UnsubscribedFromChannelMessage::Swap(UnsubscribedFromChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsubscribedFromChannelMessage::InternalSwap(UnsubscribedFromChannelMessage* other) {
  using std::swap;
  swap(connid_, other->connid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsubscribedFromChannelMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnsubscribedFromChannelResultMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsubscribedFromChannelResultMessage::kConnIdFieldNumber;
const int UnsubscribedFromChannelResultMessage::kConnTypeFieldNumber;
const int UnsubscribedFromChannelResultMessage::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsubscribedFromChannelResultMessage::UnsubscribedFromChannelResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsUnsubscribedFromChannelResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.UnsubscribedFromChannelResultMessage)
}
UnsubscribedFromChannelResultMessage::UnsubscribedFromChannelResultMessage(const UnsubscribedFromChannelResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connid_, &from.connid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channeltype_) -
    reinterpret_cast<char*>(&connid_)) + sizeof(channeltype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.UnsubscribedFromChannelResultMessage)
}

void UnsubscribedFromChannelResultMessage::SharedCtor() {
  ::memset(&connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&connid_)) + sizeof(channeltype_));
  _cached_size_ = 0;
}

UnsubscribedFromChannelResultMessage::~UnsubscribedFromChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.UnsubscribedFromChannelResultMessage)
  SharedDtor();
}

void UnsubscribedFromChannelResultMessage::SharedDtor() {
}

void UnsubscribedFromChannelResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribedFromChannelResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnsubscribedFromChannelResultMessage& UnsubscribedFromChannelResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsUnsubscribedFromChannelResultMessage();
  return *internal_default_instance();
}

UnsubscribedFromChannelResultMessage* UnsubscribedFromChannelResultMessage::New(::google::protobuf::Arena* arena) const {
  UnsubscribedFromChannelResultMessage* n = new UnsubscribedFromChannelResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsubscribedFromChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.UnsubscribedFromChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channeltype_) -
      reinterpret_cast<char*>(&connid_)) + sizeof(channeltype_));
  _internal_metadata_.Clear();
}

bool UnsubscribedFromChannelResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.UnsubscribedFromChannelResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 connId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ConnectionType connType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_conntype(static_cast< ::channeldpb::ConnectionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.ChannelType channelType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channeltype(static_cast< ::channeldpb::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.UnsubscribedFromChannelResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.UnsubscribedFromChannelResultMessage)
  return false;
#undef DO_
}

void UnsubscribedFromChannelResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.UnsubscribedFromChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connid(), output);
  }

  // .channeldpb.ConnectionType connType = 2;
  if (this->conntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->conntype(), output);
  }

  // .channeldpb.ChannelType channelType = 3;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channeltype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.UnsubscribedFromChannelResultMessage)
}

::google::protobuf::uint8* UnsubscribedFromChannelResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.UnsubscribedFromChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connid(), target);
  }

  // .channeldpb.ConnectionType connType = 2;
  if (this->conntype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->conntype(), target);
  }

  // .channeldpb.ChannelType channelType = 3;
  if (this->channeltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channeltype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.UnsubscribedFromChannelResultMessage)
  return target;
}

size_t UnsubscribedFromChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.UnsubscribedFromChannelResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 connId = 1;
  if (this->connid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connid());
  }

  // .channeldpb.ConnectionType connType = 2;
  if (this->conntype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->conntype());
  }

  // .channeldpb.ChannelType channelType = 3;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channeltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribedFromChannelResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.UnsubscribedFromChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribedFromChannelResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsubscribedFromChannelResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.UnsubscribedFromChannelResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.UnsubscribedFromChannelResultMessage)
    MergeFrom(*source);
  }
}

void UnsubscribedFromChannelResultMessage::MergeFrom(const UnsubscribedFromChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.UnsubscribedFromChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connid() != 0) {
    set_connid(from.connid());
  }
  if (from.conntype() != 0) {
    set_conntype(from.conntype());
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
}

void UnsubscribedFromChannelResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.UnsubscribedFromChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribedFromChannelResultMessage::CopyFrom(const UnsubscribedFromChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.UnsubscribedFromChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribedFromChannelResultMessage::IsInitialized() const {
  return true;
}

void UnsubscribedFromChannelResultMessage::Swap(UnsubscribedFromChannelResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsubscribedFromChannelResultMessage::InternalSwap(UnsubscribedFromChannelResultMessage* other) {
  using std::swap;
  swap(connid_, other->connid_);
  swap(conntype_, other->conntype_);
  swap(channeltype_, other->channeltype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsubscribedFromChannelResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelDataUpdateMessage::InitAsDefaultInstance() {
  ::channeldpb::_ChannelDataUpdateMessage_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void ChannelDataUpdateMessage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelDataUpdateMessage::kDataFieldNumber;
const int ChannelDataUpdateMessage::kContextConnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelDataUpdateMessage::ChannelDataUpdateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsChannelDataUpdateMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ChannelDataUpdateMessage)
}
ChannelDataUpdateMessage::ChannelDataUpdateMessage(const ChannelDataUpdateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = NULL;
  }
  contextconnid_ = from.contextconnid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelDataUpdateMessage)
}

void ChannelDataUpdateMessage::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contextconnid_) -
      reinterpret_cast<char*>(&data_)) + sizeof(contextconnid_));
  _cached_size_ = 0;
}

ChannelDataUpdateMessage::~ChannelDataUpdateMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelDataUpdateMessage)
  SharedDtor();
}

void ChannelDataUpdateMessage::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void ChannelDataUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDataUpdateMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelDataUpdateMessage& ChannelDataUpdateMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsChannelDataUpdateMessage();
  return *internal_default_instance();
}

ChannelDataUpdateMessage* ChannelDataUpdateMessage::New(::google::protobuf::Arena* arena) const {
  ChannelDataUpdateMessage* n = new ChannelDataUpdateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelDataUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelDataUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  contextconnid_ = 0u;
  _internal_metadata_.Clear();
}

bool ChannelDataUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ChannelDataUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 contextConnId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextconnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ChannelDataUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ChannelDataUpdateMessage)
  return false;
#undef DO_
}

void ChannelDataUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ChannelDataUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // uint32 contextConnId = 2;
  if (this->contextconnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contextconnid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ChannelDataUpdateMessage)
}

::google::protobuf::uint8* ChannelDataUpdateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelDataUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->data_, deterministic, target);
  }

  // uint32 contextConnId = 2;
  if (this->contextconnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contextconnid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelDataUpdateMessage)
  return target;
}

size_t ChannelDataUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelDataUpdateMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // uint32 contextConnId = 2;
  if (this->contextconnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contextconnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelDataUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ChannelDataUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDataUpdateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelDataUpdateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ChannelDataUpdateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ChannelDataUpdateMessage)
    MergeFrom(*source);
  }
}

void ChannelDataUpdateMessage::MergeFrom(const ChannelDataUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelDataUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.contextconnid() != 0) {
    set_contextconnid(from.contextconnid());
  }
}

void ChannelDataUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ChannelDataUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDataUpdateMessage::CopyFrom(const ChannelDataUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelDataUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDataUpdateMessage::IsInitialized() const {
  return true;
}

void ChannelDataUpdateMessage::Swap(ChannelDataUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelDataUpdateMessage::InternalSwap(ChannelDataUpdateMessage* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(contextconnid_, other->contextconnid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelDataUpdateMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisconnectMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisconnectMessage::kConnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisconnectMessage::DisconnectMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsDisconnectMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.DisconnectMessage)
}
DisconnectMessage::DisconnectMessage(const DisconnectMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connid_ = from.connid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.DisconnectMessage)
}

void DisconnectMessage::SharedCtor() {
  connid_ = 0u;
  _cached_size_ = 0;
}

DisconnectMessage::~DisconnectMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.DisconnectMessage)
  SharedDtor();
}

void DisconnectMessage::SharedDtor() {
}

void DisconnectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisconnectMessage& DisconnectMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsDisconnectMessage();
  return *internal_default_instance();
}

DisconnectMessage* DisconnectMessage::New(::google::protobuf::Arena* arena) const {
  DisconnectMessage* n = new DisconnectMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisconnectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.DisconnectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connid_ = 0u;
  _internal_metadata_.Clear();
}

bool DisconnectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.DisconnectMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 connId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.DisconnectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.DisconnectMessage)
  return false;
#undef DO_
}

void DisconnectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.DisconnectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.DisconnectMessage)
}

::google::protobuf::uint8* DisconnectMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.DisconnectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->connid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->connid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.DisconnectMessage)
  return target;
}

size_t DisconnectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.DisconnectMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 connId = 1;
  if (this->connid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.DisconnectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisconnectMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.DisconnectMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.DisconnectMessage)
    MergeFrom(*source);
  }
}

void DisconnectMessage::MergeFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.DisconnectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connid() != 0) {
    set_connid(from.connid());
  }
}

void DisconnectMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.DisconnectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectMessage::CopyFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.DisconnectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectMessage::IsInitialized() const {
  return true;
}

void DisconnectMessage::Swap(DisconnectMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisconnectMessage::InternalSwap(DisconnectMessage* other) {
  using std::swap;
  swap(connid_, other->connid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisconnectMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpatialInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialInfo::kXFieldNumber;
const int SpatialInfo::kYFieldNumber;
const int SpatialInfo::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialInfo::SpatialInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsSpatialInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.SpatialInfo)
}
SpatialInfo::SpatialInfo(const SpatialInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.SpatialInfo)
}

void SpatialInfo::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

SpatialInfo::~SpatialInfo() {
  // @@protoc_insertion_point(destructor:channeldpb.SpatialInfo)
  SharedDtor();
}

void SpatialInfo::SharedDtor() {
}

void SpatialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpatialInfo::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialInfo& SpatialInfo::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsSpatialInfo();
  return *internal_default_instance();
}

SpatialInfo* SpatialInfo::New(::google::protobuf::Arena* arena) const {
  SpatialInfo* n = new SpatialInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpatialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SpatialInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool SpatialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.SpatialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.SpatialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.SpatialInfo)
  return false;
#undef DO_
}

void SpatialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.SpatialInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.SpatialInfo)
}

::google::protobuf::uint8* SpatialInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SpatialInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SpatialInfo)
  return target;
}

size_t SpatialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SpatialInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpatialInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.SpatialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.SpatialInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.SpatialInfo)
    MergeFrom(*source);
  }
}

void SpatialInfo::MergeFrom(const SpatialInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SpatialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void SpatialInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.SpatialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialInfo::CopyFrom(const SpatialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SpatialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialInfo::IsInitialized() const {
  return true;
}

void SpatialInfo::Swap(SpatialInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialInfo::InternalSwap(SpatialInfo* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpatialInfo::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateSpatialChannelsResultMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSpatialChannelsResultMessage::kSpatialChannelIdFieldNumber;
const int CreateSpatialChannelsResultMessage::kMetadataFieldNumber;
const int CreateSpatialChannelsResultMessage::kOwnerConnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSpatialChannelsResultMessage::CreateSpatialChannelsResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsCreateSpatialChannelsResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.CreateSpatialChannelsResultMessage)
}
CreateSpatialChannelsResultMessage::CreateSpatialChannelsResultMessage(const CreateSpatialChannelsResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spatialchannelid_(from.spatialchannelid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  ownerconnid_ = from.ownerconnid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.CreateSpatialChannelsResultMessage)
}

void CreateSpatialChannelsResultMessage::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownerconnid_ = 0u;
  _cached_size_ = 0;
}

CreateSpatialChannelsResultMessage::~CreateSpatialChannelsResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.CreateSpatialChannelsResultMessage)
  SharedDtor();
}

void CreateSpatialChannelsResultMessage::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSpatialChannelsResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSpatialChannelsResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSpatialChannelsResultMessage& CreateSpatialChannelsResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsCreateSpatialChannelsResultMessage();
  return *internal_default_instance();
}

CreateSpatialChannelsResultMessage* CreateSpatialChannelsResultMessage::New(::google::protobuf::Arena* arena) const {
  CreateSpatialChannelsResultMessage* n = new CreateSpatialChannelsResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSpatialChannelsResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.CreateSpatialChannelsResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spatialchannelid_.Clear();
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownerconnid_ = 0u;
  _internal_metadata_.Clear();
}

bool CreateSpatialChannelsResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.CreateSpatialChannelsResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 spatialChannelId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spatialchannelid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_spatialchannelid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "channeldpb.CreateSpatialChannelsResultMessage.metadata"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ownerConnId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerconnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.CreateSpatialChannelsResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.CreateSpatialChannelsResultMessage)
  return false;
#undef DO_
}

void CreateSpatialChannelsResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.CreateSpatialChannelsResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 spatialChannelId = 1;
  if (this->spatialchannelid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _spatialchannelid_cached_byte_size_));
  }
  for (int i = 0, n = this->spatialchannelid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->spatialchannelid(i), output);
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateSpatialChannelsResultMessage.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->metadata(), output);
  }

  // uint32 ownerConnId = 3;
  if (this->ownerconnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ownerconnid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.CreateSpatialChannelsResultMessage)
}

::google::protobuf::uint8* CreateSpatialChannelsResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.CreateSpatialChannelsResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 spatialChannelId = 1;
  if (this->spatialchannelid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _spatialchannelid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->spatialchannelid_, target);
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateSpatialChannelsResultMessage.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metadata(), target);
  }

  // uint32 ownerConnId = 3;
  if (this->ownerconnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ownerconnid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.CreateSpatialChannelsResultMessage)
  return target;
}

size_t CreateSpatialChannelsResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.CreateSpatialChannelsResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 spatialChannelId = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->spatialchannelid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spatialchannelid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string metadata = 2;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // uint32 ownerConnId = 3;
  if (this->ownerconnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ownerconnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSpatialChannelsResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.CreateSpatialChannelsResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSpatialChannelsResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSpatialChannelsResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.CreateSpatialChannelsResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.CreateSpatialChannelsResultMessage)
    MergeFrom(*source);
  }
}

void CreateSpatialChannelsResultMessage::MergeFrom(const CreateSpatialChannelsResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.CreateSpatialChannelsResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spatialchannelid_.MergeFrom(from.spatialchannelid_);
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.ownerconnid() != 0) {
    set_ownerconnid(from.ownerconnid());
  }
}

void CreateSpatialChannelsResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.CreateSpatialChannelsResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSpatialChannelsResultMessage::CopyFrom(const CreateSpatialChannelsResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.CreateSpatialChannelsResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSpatialChannelsResultMessage::IsInitialized() const {
  return true;
}

void CreateSpatialChannelsResultMessage::Swap(CreateSpatialChannelsResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSpatialChannelsResultMessage::InternalSwap(CreateSpatialChannelsResultMessage* other) {
  using std::swap;
  spatialchannelid_.InternalSwap(&other->spatialchannelid_);
  metadata_.Swap(&other->metadata_);
  swap(ownerconnid_, other->ownerconnid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSpatialChannelsResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuerySpatialChannelMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySpatialChannelMessage::kSpatialInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySpatialChannelMessage::QuerySpatialChannelMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsQuerySpatialChannelMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.QuerySpatialChannelMessage)
}
QuerySpatialChannelMessage::QuerySpatialChannelMessage(const QuerySpatialChannelMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spatialinfo_(from.spatialinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.QuerySpatialChannelMessage)
}

void QuerySpatialChannelMessage::SharedCtor() {
  _cached_size_ = 0;
}

QuerySpatialChannelMessage::~QuerySpatialChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.QuerySpatialChannelMessage)
  SharedDtor();
}

void QuerySpatialChannelMessage::SharedDtor() {
}

void QuerySpatialChannelMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySpatialChannelMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySpatialChannelMessage& QuerySpatialChannelMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsQuerySpatialChannelMessage();
  return *internal_default_instance();
}

QuerySpatialChannelMessage* QuerySpatialChannelMessage::New(::google::protobuf::Arena* arena) const {
  QuerySpatialChannelMessage* n = new QuerySpatialChannelMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySpatialChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.QuerySpatialChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spatialinfo_.Clear();
  _internal_metadata_.Clear();
}

bool QuerySpatialChannelMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.QuerySpatialChannelMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .channeldpb.SpatialInfo spatialInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_spatialinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.QuerySpatialChannelMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.QuerySpatialChannelMessage)
  return false;
#undef DO_
}

void QuerySpatialChannelMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.QuerySpatialChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spatialinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spatialinfo(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.QuerySpatialChannelMessage)
}

::google::protobuf::uint8* QuerySpatialChannelMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.QuerySpatialChannelMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spatialinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->spatialinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.QuerySpatialChannelMessage)
  return target;
}

size_t QuerySpatialChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.QuerySpatialChannelMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->spatialinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spatialinfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySpatialChannelMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.QuerySpatialChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySpatialChannelMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySpatialChannelMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.QuerySpatialChannelMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.QuerySpatialChannelMessage)
    MergeFrom(*source);
  }
}

void QuerySpatialChannelMessage::MergeFrom(const QuerySpatialChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.QuerySpatialChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spatialinfo_.MergeFrom(from.spatialinfo_);
}

void QuerySpatialChannelMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.QuerySpatialChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySpatialChannelMessage::CopyFrom(const QuerySpatialChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.QuerySpatialChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpatialChannelMessage::IsInitialized() const {
  return true;
}

void QuerySpatialChannelMessage::Swap(QuerySpatialChannelMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySpatialChannelMessage::InternalSwap(QuerySpatialChannelMessage* other) {
  using std::swap;
  spatialinfo_.InternalSwap(&other->spatialinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySpatialChannelMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuerySpatialChannelResultMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuerySpatialChannelResultMessage::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuerySpatialChannelResultMessage::QuerySpatialChannelResultMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsQuerySpatialChannelResultMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.QuerySpatialChannelResultMessage)
}
QuerySpatialChannelResultMessage::QuerySpatialChannelResultMessage(const QuerySpatialChannelResultMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channelid_(from.channelid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.QuerySpatialChannelResultMessage)
}

void QuerySpatialChannelResultMessage::SharedCtor() {
  _cached_size_ = 0;
}

QuerySpatialChannelResultMessage::~QuerySpatialChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.QuerySpatialChannelResultMessage)
  SharedDtor();
}

void QuerySpatialChannelResultMessage::SharedDtor() {
}

void QuerySpatialChannelResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuerySpatialChannelResultMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuerySpatialChannelResultMessage& QuerySpatialChannelResultMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsQuerySpatialChannelResultMessage();
  return *internal_default_instance();
}

QuerySpatialChannelResultMessage* QuerySpatialChannelResultMessage::New(::google::protobuf::Arena* arena) const {
  QuerySpatialChannelResultMessage* n = new QuerySpatialChannelResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuerySpatialChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.QuerySpatialChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.Clear();
  _internal_metadata_.Clear();
}

bool QuerySpatialChannelResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.QuerySpatialChannelResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 channelId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channelid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_channelid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.QuerySpatialChannelResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.QuerySpatialChannelResultMessage)
  return false;
#undef DO_
}

void QuerySpatialChannelResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.QuerySpatialChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channelId = 1;
  if (this->channelid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _channelid_cached_byte_size_));
  }
  for (int i = 0, n = this->channelid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->channelid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.QuerySpatialChannelResultMessage)
}

::google::protobuf::uint8* QuerySpatialChannelResultMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.QuerySpatialChannelResultMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channelId = 1;
  if (this->channelid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _channelid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->channelid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.QuerySpatialChannelResultMessage)
  return target;
}

size_t QuerySpatialChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.QuerySpatialChannelResultMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 channelId = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channelid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _channelid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySpatialChannelResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.QuerySpatialChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const QuerySpatialChannelResultMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuerySpatialChannelResultMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.QuerySpatialChannelResultMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.QuerySpatialChannelResultMessage)
    MergeFrom(*source);
  }
}

void QuerySpatialChannelResultMessage::MergeFrom(const QuerySpatialChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.QuerySpatialChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channelid_.MergeFrom(from.channelid_);
}

void QuerySpatialChannelResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.QuerySpatialChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuerySpatialChannelResultMessage::CopyFrom(const QuerySpatialChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.QuerySpatialChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpatialChannelResultMessage::IsInitialized() const {
  return true;
}

void QuerySpatialChannelResultMessage::Swap(QuerySpatialChannelResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuerySpatialChannelResultMessage::InternalSwap(QuerySpatialChannelResultMessage* other) {
  using std::swap;
  channelid_.InternalSwap(&other->channelid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuerySpatialChannelResultMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChannelDataHandoverMessage::InitAsDefaultInstance() {
  ::channeldpb::_ChannelDataHandoverMessage_default_instance_._instance.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void ChannelDataHandoverMessage::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelDataHandoverMessage::kSrcChannelIdFieldNumber;
const int ChannelDataHandoverMessage::kDstChannelIdFieldNumber;
const int ChannelDataHandoverMessage::kContextConnIdFieldNumber;
const int ChannelDataHandoverMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelDataHandoverMessage::ChannelDataHandoverMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsChannelDataHandoverMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.ChannelDataHandoverMessage)
}
ChannelDataHandoverMessage::ChannelDataHandoverMessage(const ChannelDataHandoverMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&srcchannelid_, &from.srcchannelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&contextconnid_) -
    reinterpret_cast<char*>(&srcchannelid_)) + sizeof(contextconnid_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelDataHandoverMessage)
}

void ChannelDataHandoverMessage::SharedCtor() {
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contextconnid_) -
      reinterpret_cast<char*>(&data_)) + sizeof(contextconnid_));
  _cached_size_ = 0;
}

ChannelDataHandoverMessage::~ChannelDataHandoverMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelDataHandoverMessage)
  SharedDtor();
}

void ChannelDataHandoverMessage::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void ChannelDataHandoverMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDataHandoverMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelDataHandoverMessage& ChannelDataHandoverMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsChannelDataHandoverMessage();
  return *internal_default_instance();
}

ChannelDataHandoverMessage* ChannelDataHandoverMessage::New(::google::protobuf::Arena* arena) const {
  ChannelDataHandoverMessage* n = new ChannelDataHandoverMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelDataHandoverMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelDataHandoverMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&srcchannelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contextconnid_) -
      reinterpret_cast<char*>(&srcchannelid_)) + sizeof(contextconnid_));
  _internal_metadata_.Clear();
}

bool ChannelDataHandoverMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.ChannelDataHandoverMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 srcChannelId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcchannelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dstChannelId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstchannelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 contextConnId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextconnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.ChannelDataHandoverMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.ChannelDataHandoverMessage)
  return false;
#undef DO_
}

void ChannelDataHandoverMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.ChannelDataHandoverMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChannelId = 1;
  if (this->srcchannelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcchannelid(), output);
  }

  // uint32 dstChannelId = 2;
  if (this->dstchannelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dstchannelid(), output);
  }

  // uint32 contextConnId = 3;
  if (this->contextconnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contextconnid(), output);
  }

  // .google.protobuf.Any data = 4;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.ChannelDataHandoverMessage)
}

::google::protobuf::uint8* ChannelDataHandoverMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelDataHandoverMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChannelId = 1;
  if (this->srcchannelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcchannelid(), target);
  }

  // uint32 dstChannelId = 2;
  if (this->dstchannelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dstchannelid(), target);
  }

  // uint32 contextConnId = 3;
  if (this->contextconnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contextconnid(), target);
  }

  // .google.protobuf.Any data = 4;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelDataHandoverMessage)
  return target;
}

size_t ChannelDataHandoverMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelDataHandoverMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any data = 4;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  // uint32 srcChannelId = 1;
  if (this->srcchannelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcchannelid());
  }

  // uint32 dstChannelId = 2;
  if (this->dstchannelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstchannelid());
  }

  // uint32 contextConnId = 3;
  if (this->contextconnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contextconnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelDataHandoverMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.ChannelDataHandoverMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDataHandoverMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelDataHandoverMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.ChannelDataHandoverMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.ChannelDataHandoverMessage)
    MergeFrom(*source);
  }
}

void ChannelDataHandoverMessage::MergeFrom(const ChannelDataHandoverMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelDataHandoverMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
  if (from.srcchannelid() != 0) {
    set_srcchannelid(from.srcchannelid());
  }
  if (from.dstchannelid() != 0) {
    set_dstchannelid(from.dstchannelid());
  }
  if (from.contextconnid() != 0) {
    set_contextconnid(from.contextconnid());
  }
}

void ChannelDataHandoverMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.ChannelDataHandoverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDataHandoverMessage::CopyFrom(const ChannelDataHandoverMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelDataHandoverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDataHandoverMessage::IsInitialized() const {
  return true;
}

void ChannelDataHandoverMessage::Swap(ChannelDataHandoverMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelDataHandoverMessage::InternalSwap(ChannelDataHandoverMessage* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(srcchannelid_, other->srcchannelid_);
  swap(dstchannelid_, other->dstchannelid_);
  swap(contextconnid_, other->contextconnid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelDataHandoverMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpatialRegion::InitAsDefaultInstance() {
  ::channeldpb::_SpatialRegion_default_instance_._instance.get_mutable()->min_ = const_cast< ::channeldpb::SpatialInfo*>(
      ::channeldpb::SpatialInfo::internal_default_instance());
  ::channeldpb::_SpatialRegion_default_instance_._instance.get_mutable()->max_ = const_cast< ::channeldpb::SpatialInfo*>(
      ::channeldpb::SpatialInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialRegion::kMinFieldNumber;
const int SpatialRegion::kMaxFieldNumber;
const int SpatialRegion::kChannelIdFieldNumber;
const int SpatialRegion::kServerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialRegion::SpatialRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsSpatialRegion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.SpatialRegion)
}
SpatialRegion::SpatialRegion(const SpatialRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_min()) {
    min_ = new ::channeldpb::SpatialInfo(*from.min_);
  } else {
    min_ = NULL;
  }
  if (from.has_max()) {
    max_ = new ::channeldpb::SpatialInfo(*from.max_);
  } else {
    max_ = NULL;
  }
  ::memcpy(&channelid_, &from.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverindex_) -
    reinterpret_cast<char*>(&channelid_)) + sizeof(serverindex_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.SpatialRegion)
}

void SpatialRegion::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverindex_) -
      reinterpret_cast<char*>(&min_)) + sizeof(serverindex_));
  _cached_size_ = 0;
}

SpatialRegion::~SpatialRegion() {
  // @@protoc_insertion_point(destructor:channeldpb.SpatialRegion)
  SharedDtor();
}

void SpatialRegion::SharedDtor() {
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void SpatialRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpatialRegion::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialRegion& SpatialRegion::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsSpatialRegion();
  return *internal_default_instance();
}

SpatialRegion* SpatialRegion::New(::google::protobuf::Arena* arena) const {
  SpatialRegion* n = new SpatialRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpatialRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SpatialRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && min_ != NULL) {
    delete min_;
  }
  min_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_ != NULL) {
    delete max_;
  }
  max_ = NULL;
  ::memset(&channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverindex_) -
      reinterpret_cast<char*>(&channelid_)) + sizeof(serverindex_));
  _internal_metadata_.Clear();
}

bool SpatialRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.SpatialRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .channeldpb.SpatialInfo min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .channeldpb.SpatialInfo max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channelId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 serverIndex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.SpatialRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.SpatialRegion)
  return false;
#undef DO_
}

void SpatialRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.SpatialRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.SpatialInfo min = 1;
  if (this->has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->min_, output);
  }

  // .channeldpb.SpatialInfo max = 2;
  if (this->has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_, output);
  }

  // uint32 channelId = 3;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channelid(), output);
  }

  // uint32 serverIndex = 4;
  if (this->serverindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.SpatialRegion)
}

::google::protobuf::uint8* SpatialRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SpatialRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.SpatialInfo min = 1;
  if (this->has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->min_, deterministic, target);
  }

  // .channeldpb.SpatialInfo max = 2;
  if (this->has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->max_, deterministic, target);
  }

  // uint32 channelId = 3;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channelid(), target);
  }

  // uint32 serverIndex = 4;
  if (this->serverindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SpatialRegion)
  return target;
}

size_t SpatialRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SpatialRegion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .channeldpb.SpatialInfo min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->min_);
  }

  // .channeldpb.SpatialInfo max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->max_);
  }

  // uint32 channelId = 3;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // uint32 serverIndex = 4;
  if (this->serverindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpatialRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.SpatialRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.SpatialRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.SpatialRegion)
    MergeFrom(*source);
  }
}

void SpatialRegion::MergeFrom(const SpatialRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SpatialRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    mutable_min()->::channeldpb::SpatialInfo::MergeFrom(from.min());
  }
  if (from.has_max()) {
    mutable_max()->::channeldpb::SpatialInfo::MergeFrom(from.max());
  }
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.serverindex() != 0) {
    set_serverindex(from.serverindex());
  }
}

void SpatialRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.SpatialRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialRegion::CopyFrom(const SpatialRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SpatialRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialRegion::IsInitialized() const {
  return true;
}

void SpatialRegion::Swap(SpatialRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialRegion::InternalSwap(SpatialRegion* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(channelid_, other->channelid_);
  swap(serverindex_, other->serverindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpatialRegion::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpatialRegionsUpdateMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialRegionsUpdateMessage::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialRegionsUpdateMessage::SpatialRegionsUpdateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsSpatialRegionsUpdateMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.SpatialRegionsUpdateMessage)
}
SpatialRegionsUpdateMessage::SpatialRegionsUpdateMessage(const SpatialRegionsUpdateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regions_(from.regions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.SpatialRegionsUpdateMessage)
}

void SpatialRegionsUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
}

SpatialRegionsUpdateMessage::~SpatialRegionsUpdateMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.SpatialRegionsUpdateMessage)
  SharedDtor();
}

void SpatialRegionsUpdateMessage::SharedDtor() {
}

void SpatialRegionsUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpatialRegionsUpdateMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialRegionsUpdateMessage& SpatialRegionsUpdateMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsSpatialRegionsUpdateMessage();
  return *internal_default_instance();
}

SpatialRegionsUpdateMessage* SpatialRegionsUpdateMessage::New(::google::protobuf::Arena* arena) const {
  SpatialRegionsUpdateMessage* n = new SpatialRegionsUpdateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpatialRegionsUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SpatialRegionsUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  _internal_metadata_.Clear();
}

bool SpatialRegionsUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.SpatialRegionsUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .channeldpb.SpatialRegion regions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.SpatialRegionsUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.SpatialRegionsUpdateMessage)
  return false;
#undef DO_
}

void SpatialRegionsUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.SpatialRegionsUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialRegion regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regions(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.SpatialRegionsUpdateMessage)
}

::google::protobuf::uint8* SpatialRegionsUpdateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SpatialRegionsUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialRegion regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->regions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SpatialRegionsUpdateMessage)
  return target;
}

size_t SpatialRegionsUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SpatialRegionsUpdateMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .channeldpb.SpatialRegion regions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpatialRegionsUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.SpatialRegionsUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialRegionsUpdateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialRegionsUpdateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.SpatialRegionsUpdateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.SpatialRegionsUpdateMessage)
    MergeFrom(*source);
  }
}

void SpatialRegionsUpdateMessage::MergeFrom(const SpatialRegionsUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SpatialRegionsUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
}

void SpatialRegionsUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.SpatialRegionsUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialRegionsUpdateMessage::CopyFrom(const SpatialRegionsUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SpatialRegionsUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialRegionsUpdateMessage::IsInitialized() const {
  return true;
}

void SpatialRegionsUpdateMessage::Swap(SpatialRegionsUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialRegionsUpdateMessage::InternalSwap(SpatialRegionsUpdateMessage* other) {
  using std::swap;
  regions_.InternalSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpatialRegionsUpdateMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugGetSpatialRegionsMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugGetSpatialRegionsMessage::DebugGetSpatialRegionsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_channeld_2eproto::InitDefaultsDebugGetSpatialRegionsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:channeldpb.DebugGetSpatialRegionsMessage)
}
DebugGetSpatialRegionsMessage::DebugGetSpatialRegionsMessage(const DebugGetSpatialRegionsMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.DebugGetSpatialRegionsMessage)
}

void DebugGetSpatialRegionsMessage::SharedCtor() {
  _cached_size_ = 0;
}

DebugGetSpatialRegionsMessage::~DebugGetSpatialRegionsMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.DebugGetSpatialRegionsMessage)
  SharedDtor();
}

void DebugGetSpatialRegionsMessage::SharedDtor() {
}

void DebugGetSpatialRegionsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugGetSpatialRegionsMessage::descriptor() {
  ::protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugGetSpatialRegionsMessage& DebugGetSpatialRegionsMessage::default_instance() {
  ::protobuf_channeld_2eproto::InitDefaultsDebugGetSpatialRegionsMessage();
  return *internal_default_instance();
}

DebugGetSpatialRegionsMessage* DebugGetSpatialRegionsMessage::New(::google::protobuf::Arena* arena) const {
  DebugGetSpatialRegionsMessage* n = new DebugGetSpatialRegionsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugGetSpatialRegionsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.DebugGetSpatialRegionsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DebugGetSpatialRegionsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channeldpb.DebugGetSpatialRegionsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:channeldpb.DebugGetSpatialRegionsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channeldpb.DebugGetSpatialRegionsMessage)
  return false;
#undef DO_
}

void DebugGetSpatialRegionsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channeldpb.DebugGetSpatialRegionsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:channeldpb.DebugGetSpatialRegionsMessage)
}

::google::protobuf::uint8* DebugGetSpatialRegionsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.DebugGetSpatialRegionsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.DebugGetSpatialRegionsMessage)
  return target;
}

size_t DebugGetSpatialRegionsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.DebugGetSpatialRegionsMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugGetSpatialRegionsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:channeldpb.DebugGetSpatialRegionsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugGetSpatialRegionsMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugGetSpatialRegionsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:channeldpb.DebugGetSpatialRegionsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:channeldpb.DebugGetSpatialRegionsMessage)
    MergeFrom(*source);
  }
}

void DebugGetSpatialRegionsMessage::MergeFrom(const DebugGetSpatialRegionsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.DebugGetSpatialRegionsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DebugGetSpatialRegionsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:channeldpb.DebugGetSpatialRegionsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugGetSpatialRegionsMessage::CopyFrom(const DebugGetSpatialRegionsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.DebugGetSpatialRegionsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugGetSpatialRegionsMessage::IsInitialized() const {
  return true;
}

void DebugGetSpatialRegionsMessage::Swap(DebugGetSpatialRegionsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugGetSpatialRegionsMessage::InternalSwap(DebugGetSpatialRegionsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugGetSpatialRegionsMessage::GetMetadata() const {
  protobuf_channeld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_channeld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace channeldpb

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unreal_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unreal_5fcommon_2eproto CHANNELDUE_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct CHANNELDUE_API TableStruct_unreal_5fcommon_2eproto {
  static const uint32_t offsets[];
};
CHANNELDUE_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unreal_5fcommon_2eproto;
namespace unrealpb {
class ActorComponentState;
struct ActorComponentStateDefaultTypeInternal;
CHANNELDUE_API extern ActorComponentStateDefaultTypeInternal _ActorComponentState_default_instance_;
class BasedMovementInfo;
struct BasedMovementInfoDefaultTypeInternal;
CHANNELDUE_API extern BasedMovementInfoDefaultTypeInternal _BasedMovementInfo_default_instance_;
class CharacterState;
struct CharacterStateDefaultTypeInternal;
CHANNELDUE_API extern CharacterStateDefaultTypeInternal _CharacterState_default_instance_;
class Character_ClientMoveResponsePacked_Params;
struct Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal _Character_ClientMoveResponsePacked_Params_default_instance_;
class Character_ServerMovePacked_Params;
struct Character_ServerMovePacked_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Character_ServerMovePacked_ParamsDefaultTypeInternal _Character_ServerMovePacked_Params_default_instance_;
class ControllerState;
struct ControllerStateDefaultTypeInternal;
CHANNELDUE_API extern ControllerStateDefaultTypeInternal _ControllerState_default_instance_;
class Controller_ClientSetLocation_Params;
struct Controller_ClientSetLocation_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Controller_ClientSetLocation_ParamsDefaultTypeInternal _Controller_ClientSetLocation_Params_default_instance_;
class Controller_ClientSetRotation_Params;
struct Controller_ClientSetRotation_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Controller_ClientSetRotation_ParamsDefaultTypeInternal _Controller_ClientSetRotation_Params_default_instance_;
class FVector;
struct FVectorDefaultTypeInternal;
CHANNELDUE_API extern FVectorDefaultTypeInternal _FVector_default_instance_;
class GameStateBase;
struct GameStateBaseDefaultTypeInternal;
CHANNELDUE_API extern GameStateBaseDefaultTypeInternal _GameStateBase_default_instance_;
class PlayerControllerState;
struct PlayerControllerStateDefaultTypeInternal;
CHANNELDUE_API extern PlayerControllerStateDefaultTypeInternal _PlayerControllerState_default_instance_;
class PlayerController_ClientCapBandwidth_Params;
struct PlayerController_ClientCapBandwidth_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientCapBandwidth_ParamsDefaultTypeInternal _PlayerController_ClientCapBandwidth_Params_default_instance_;
class PlayerController_ClientEnableNetworkVoice_Params;
struct PlayerController_ClientEnableNetworkVoice_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientEnableNetworkVoice_ParamsDefaultTypeInternal _PlayerController_ClientEnableNetworkVoice_Params_default_instance_;
class PlayerController_ClientRestart_Params;
struct PlayerController_ClientRestart_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientRestart_ParamsDefaultTypeInternal _PlayerController_ClientRestart_Params_default_instance_;
class PlayerController_ClientRetryClientRestart_Params;
struct PlayerController_ClientRetryClientRestart_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientRetryClientRestart_ParamsDefaultTypeInternal _PlayerController_ClientRetryClientRestart_Params_default_instance_;
class PlayerController_ClientSetCameraMode_Params;
struct PlayerController_ClientSetCameraMode_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientSetCameraMode_ParamsDefaultTypeInternal _PlayerController_ClientSetCameraMode_Params_default_instance_;
class PlayerController_ClientSetHUD_Params;
struct PlayerController_ClientSetHUD_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientSetHUD_ParamsDefaultTypeInternal _PlayerController_ClientSetHUD_Params_default_instance_;
class PlayerController_ClientSetViewTarget_Params;
struct PlayerController_ClientSetViewTarget_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ClientSetViewTarget_ParamsDefaultTypeInternal _PlayerController_ClientSetViewTarget_Params_default_instance_;
class PlayerController_ServerAcknowledgePossession_Params;
struct PlayerController_ServerAcknowledgePossession_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerAcknowledgePossession_ParamsDefaultTypeInternal _PlayerController_ServerAcknowledgePossession_Params_default_instance_;
class PlayerController_ServerSetSpectatorLocation_Params;
struct PlayerController_ServerSetSpectatorLocation_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerSetSpectatorLocation_ParamsDefaultTypeInternal _PlayerController_ServerSetSpectatorLocation_Params_default_instance_;
class PlayerController_ServerUpdateCamera_Params;
struct PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal _PlayerController_ServerUpdateCamera_Params_default_instance_;
class PlayerState;
struct PlayerStateDefaultTypeInternal;
CHANNELDUE_API extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
class RemoteFunctionMessage;
struct RemoteFunctionMessageDefaultTypeInternal;
CHANNELDUE_API extern RemoteFunctionMessageDefaultTypeInternal _RemoteFunctionMessage_default_instance_;
class RootMotionMontage;
struct RootMotionMontageDefaultTypeInternal;
CHANNELDUE_API extern RootMotionMontageDefaultTypeInternal _RootMotionMontage_default_instance_;
class SceneComponentState;
struct SceneComponentStateDefaultTypeInternal;
CHANNELDUE_API extern SceneComponentStateDefaultTypeInternal _SceneComponentState_default_instance_;
class UnrealObjectRef;
struct UnrealObjectRefDefaultTypeInternal;
CHANNELDUE_API extern UnrealObjectRefDefaultTypeInternal _UnrealObjectRef_default_instance_;
class UnrealObjectRef_GuidCachedObject;
struct UnrealObjectRef_GuidCachedObjectDefaultTypeInternal;
CHANNELDUE_API extern UnrealObjectRef_GuidCachedObjectDefaultTypeInternal _UnrealObjectRef_GuidCachedObject_default_instance_;
}  // namespace unrealpb
PROTOBUF_NAMESPACE_OPEN
template<> CHANNELDUE_API ::unrealpb::ActorComponentState* Arena::CreateMaybeMessage<::unrealpb::ActorComponentState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::BasedMovementInfo* Arena::CreateMaybeMessage<::unrealpb::BasedMovementInfo>(Arena*);
template<> CHANNELDUE_API ::unrealpb::CharacterState* Arena::CreateMaybeMessage<::unrealpb::CharacterState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Character_ClientMoveResponsePacked_Params* Arena::CreateMaybeMessage<::unrealpb::Character_ClientMoveResponsePacked_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Character_ServerMovePacked_Params* Arena::CreateMaybeMessage<::unrealpb::Character_ServerMovePacked_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::ControllerState* Arena::CreateMaybeMessage<::unrealpb::ControllerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Controller_ClientSetLocation_Params* Arena::CreateMaybeMessage<::unrealpb::Controller_ClientSetLocation_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Controller_ClientSetRotation_Params* Arena::CreateMaybeMessage<::unrealpb::Controller_ClientSetRotation_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FVector* Arena::CreateMaybeMessage<::unrealpb::FVector>(Arena*);
template<> CHANNELDUE_API ::unrealpb::GameStateBase* Arena::CreateMaybeMessage<::unrealpb::GameStateBase>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerControllerState* Arena::CreateMaybeMessage<::unrealpb::PlayerControllerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientCapBandwidth_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientCapBandwidth_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientEnableNetworkVoice_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientEnableNetworkVoice_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientRestart_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientRestart_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientRetryClientRestart_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientRetryClientRestart_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientSetCameraMode_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientSetCameraMode_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientSetHUD_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientSetHUD_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ClientSetViewTarget_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ClientSetViewTarget_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerAcknowledgePossession_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerAcknowledgePossession_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerSetSpectatorLocation_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerSetSpectatorLocation_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerUpdateCamera_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerUpdateCamera_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerState* Arena::CreateMaybeMessage<::unrealpb::PlayerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::RemoteFunctionMessage* Arena::CreateMaybeMessage<::unrealpb::RemoteFunctionMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::RootMotionMontage* Arena::CreateMaybeMessage<::unrealpb::RootMotionMontage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SceneComponentState* Arena::CreateMaybeMessage<::unrealpb::SceneComponentState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::UnrealObjectRef* Arena::CreateMaybeMessage<::unrealpb::UnrealObjectRef>(Arena*);
template<> CHANNELDUE_API ::unrealpb::UnrealObjectRef_GuidCachedObject* Arena::CreateMaybeMessage<::unrealpb::UnrealObjectRef_GuidCachedObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace unrealpb {

// ===================================================================

class CHANNELDUE_API FVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FVector) */ {
 public:
  inline FVector() : FVector(nullptr) {}
  ~FVector() override;
  explicit PROTOBUF_CONSTEXPR FVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FVector(const FVector& from);
  FVector(FVector&& from) noexcept
    : FVector() {
    *this = ::std::move(from);
  }

  inline FVector& operator=(const FVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVector& operator=(FVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const FVector* internal_default_instance() {
    return reinterpret_cast<const FVector*>(
               &_FVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FVector& a, FVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FVector& from) {
    FVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FVector";
  }
  protected:
  explicit FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnrealObjectRef_GuidCachedObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.UnrealObjectRef.GuidCachedObject) */ {
 public:
  inline UnrealObjectRef_GuidCachedObject() : UnrealObjectRef_GuidCachedObject(nullptr) {}
  ~UnrealObjectRef_GuidCachedObject() override;
  explicit PROTOBUF_CONSTEXPR UnrealObjectRef_GuidCachedObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnrealObjectRef_GuidCachedObject(const UnrealObjectRef_GuidCachedObject& from);
  UnrealObjectRef_GuidCachedObject(UnrealObjectRef_GuidCachedObject&& from) noexcept
    : UnrealObjectRef_GuidCachedObject() {
    *this = ::std::move(from);
  }

  inline UnrealObjectRef_GuidCachedObject& operator=(const UnrealObjectRef_GuidCachedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrealObjectRef_GuidCachedObject& operator=(UnrealObjectRef_GuidCachedObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrealObjectRef_GuidCachedObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrealObjectRef_GuidCachedObject* internal_default_instance() {
    return reinterpret_cast<const UnrealObjectRef_GuidCachedObject*>(
               &_UnrealObjectRef_GuidCachedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnrealObjectRef_GuidCachedObject& a, UnrealObjectRef_GuidCachedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrealObjectRef_GuidCachedObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrealObjectRef_GuidCachedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrealObjectRef_GuidCachedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrealObjectRef_GuidCachedObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnrealObjectRef_GuidCachedObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnrealObjectRef_GuidCachedObject& from) {
    UnrealObjectRef_GuidCachedObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnrealObjectRef_GuidCachedObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.UnrealObjectRef.GuidCachedObject";
  }
  protected:
  explicit UnrealObjectRef_GuidCachedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathNameFieldNumber = 2,
    kNetGUIDFieldNumber = 1,
    kOuterGUIDFieldNumber = 3,
  };
  // string pathName = 2;
  void clear_pathname();
  const std::string& pathname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathname();
  PROTOBUF_NODISCARD std::string* release_pathname();
  void set_allocated_pathname(std::string* pathname);
  private:
  const std::string& _internal_pathname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathname(const std::string& value);
  std::string* _internal_mutable_pathname();
  public:

  // uint32 netGUID = 1;
  void clear_netguid();
  uint32_t netguid() const;
  void set_netguid(uint32_t value);
  private:
  uint32_t _internal_netguid() const;
  void _internal_set_netguid(uint32_t value);
  public:

  // uint32 outerGUID = 3;
  void clear_outerguid();
  uint32_t outerguid() const;
  void set_outerguid(uint32_t value);
  private:
  uint32_t _internal_outerguid() const;
  void _internal_set_outerguid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.UnrealObjectRef.GuidCachedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathname_;
    uint32_t netguid_;
    uint32_t outerguid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnrealObjectRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.UnrealObjectRef) */ {
 public:
  inline UnrealObjectRef() : UnrealObjectRef(nullptr) {}
  ~UnrealObjectRef() override;
  explicit PROTOBUF_CONSTEXPR UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnrealObjectRef(const UnrealObjectRef& from);
  UnrealObjectRef(UnrealObjectRef&& from) noexcept
    : UnrealObjectRef() {
    *this = ::std::move(from);
  }

  inline UnrealObjectRef& operator=(const UnrealObjectRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrealObjectRef& operator=(UnrealObjectRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrealObjectRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrealObjectRef* internal_default_instance() {
    return reinterpret_cast<const UnrealObjectRef*>(
               &_UnrealObjectRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnrealObjectRef& a, UnrealObjectRef& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrealObjectRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrealObjectRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrealObjectRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrealObjectRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnrealObjectRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnrealObjectRef& from) {
    UnrealObjectRef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnrealObjectRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.UnrealObjectRef";
  }
  protected:
  explicit UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnrealObjectRef_GuidCachedObject GuidCachedObject;

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 2,
    kNetGUIDBunchFieldNumber = 3,
    kNetGUIDFieldNumber = 1,
    kBunchBitsNumFieldNumber = 4,
  };
  // repeated .unrealpb.UnrealObjectRef.GuidCachedObject context = 2;
  int context_size() const;
  private:
  int _internal_context_size() const;
  public:
  void clear_context();
  ::unrealpb::UnrealObjectRef_GuidCachedObject* mutable_context(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >*
      mutable_context();
  private:
  const ::unrealpb::UnrealObjectRef_GuidCachedObject& _internal_context(int index) const;
  ::unrealpb::UnrealObjectRef_GuidCachedObject* _internal_add_context();
  public:
  const ::unrealpb::UnrealObjectRef_GuidCachedObject& context(int index) const;
  ::unrealpb::UnrealObjectRef_GuidCachedObject* add_context();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >&
      context() const;

  // bytes netGUIDBunch = 3;
  void clear_netguidbunch();
  const std::string& netguidbunch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_netguidbunch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_netguidbunch();
  PROTOBUF_NODISCARD std::string* release_netguidbunch();
  void set_allocated_netguidbunch(std::string* netguidbunch);
  private:
  const std::string& _internal_netguidbunch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_netguidbunch(const std::string& value);
  std::string* _internal_mutable_netguidbunch();
  public:

  // uint32 netGUID = 1;
  void clear_netguid();
  uint32_t netguid() const;
  void set_netguid(uint32_t value);
  private:
  uint32_t _internal_netguid() const;
  void _internal_set_netguid(uint32_t value);
  public:

  // uint32 bunchBitsNum = 4;
  void clear_bunchbitsnum();
  uint32_t bunchbitsnum() const;
  void set_bunchbitsnum(uint32_t value);
  private:
  uint32_t _internal_bunchbitsnum() const;
  void _internal_set_bunchbitsnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.UnrealObjectRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject > context_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr netguidbunch_;
    uint32_t netguid_;
    uint32_t bunchbitsnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API RemoteFunctionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.RemoteFunctionMessage) */ {
 public:
  inline RemoteFunctionMessage() : RemoteFunctionMessage(nullptr) {}
  ~RemoteFunctionMessage() override;
  explicit PROTOBUF_CONSTEXPR RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteFunctionMessage(const RemoteFunctionMessage& from);
  RemoteFunctionMessage(RemoteFunctionMessage&& from) noexcept
    : RemoteFunctionMessage() {
    *this = ::std::move(from);
  }

  inline RemoteFunctionMessage& operator=(const RemoteFunctionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteFunctionMessage& operator=(RemoteFunctionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteFunctionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteFunctionMessage* internal_default_instance() {
    return reinterpret_cast<const RemoteFunctionMessage*>(
               &_RemoteFunctionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoteFunctionMessage& a, RemoteFunctionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteFunctionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteFunctionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteFunctionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteFunctionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteFunctionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteFunctionMessage& from) {
    RemoteFunctionMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteFunctionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.RemoteFunctionMessage";
  }
  protected:
  explicit RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 2,
    kParamsPayloadFieldNumber = 3,
    kTargetObjFieldNumber = 1,
  };
  // string functionName = 2;
  void clear_functionname();
  const std::string& functionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_functionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_functionname();
  PROTOBUF_NODISCARD std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // bytes paramsPayload = 3;
  void clear_paramspayload();
  const std::string& paramspayload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramspayload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramspayload();
  PROTOBUF_NODISCARD std::string* release_paramspayload();
  void set_allocated_paramspayload(std::string* paramspayload);
  private:
  const std::string& _internal_paramspayload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramspayload(const std::string& value);
  std::string* _internal_mutable_paramspayload();
  public:

  // .unrealpb.UnrealObjectRef targetObj = 1;
  bool has_targetobj() const;
  private:
  bool _internal_has_targetobj() const;
  public:
  void clear_targetobj();
  const ::unrealpb::UnrealObjectRef& targetobj() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_targetobj();
  ::unrealpb::UnrealObjectRef* mutable_targetobj();
  void set_allocated_targetobj(::unrealpb::UnrealObjectRef* targetobj);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_targetobj() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_targetobj();
  public:
  void unsafe_arena_set_allocated_targetobj(
      ::unrealpb::UnrealObjectRef* targetobj);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_targetobj();

  // @@protoc_insertion_point(class_scope:unrealpb.RemoteFunctionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramspayload_;
    ::unrealpb::UnrealObjectRef* targetobj_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ActorComponentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.ActorComponentState) */ {
 public:
  inline ActorComponentState() : ActorComponentState(nullptr) {}
  ~ActorComponentState() override;
  explicit PROTOBUF_CONSTEXPR ActorComponentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActorComponentState(const ActorComponentState& from);
  ActorComponentState(ActorComponentState&& from) noexcept
    : ActorComponentState() {
    *this = ::std::move(from);
  }

  inline ActorComponentState& operator=(const ActorComponentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorComponentState& operator=(ActorComponentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActorComponentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActorComponentState* internal_default_instance() {
    return reinterpret_cast<const ActorComponentState*>(
               &_ActorComponentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActorComponentState& a, ActorComponentState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorComponentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorComponentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActorComponentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActorComponentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActorComponentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActorComponentState& from) {
    ActorComponentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorComponentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.ActorComponentState";
  }
  protected:
  explicit ActorComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBIsActiveFieldNumber = 1,
    kBReplicatedFieldNumber = 2,
  };
  // optional bool bIsActive = 1;
  bool has_bisactive() const;
  private:
  bool _internal_has_bisactive() const;
  public:
  void clear_bisactive();
  bool bisactive() const;
  void set_bisactive(bool value);
  private:
  bool _internal_bisactive() const;
  void _internal_set_bisactive(bool value);
  public:

  // optional bool bReplicated = 2;
  bool has_breplicated() const;
  private:
  bool _internal_has_breplicated() const;
  public:
  void clear_breplicated();
  bool breplicated() const;
  void set_breplicated(bool value);
  private:
  bool _internal_breplicated() const;
  void _internal_set_breplicated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.ActorComponentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bisactive_;
    bool breplicated_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SceneComponentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SceneComponentState) */ {
 public:
  inline SceneComponentState() : SceneComponentState(nullptr) {}
  ~SceneComponentState() override;
  explicit PROTOBUF_CONSTEXPR SceneComponentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneComponentState(const SceneComponentState& from);
  SceneComponentState(SceneComponentState&& from) noexcept
    : SceneComponentState() {
    *this = ::std::move(from);
  }

  inline SceneComponentState& operator=(const SceneComponentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneComponentState& operator=(SceneComponentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneComponentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneComponentState* internal_default_instance() {
    return reinterpret_cast<const SceneComponentState*>(
               &_SceneComponentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SceneComponentState& a, SceneComponentState& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneComponentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneComponentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneComponentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneComponentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneComponentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneComponentState& from) {
    SceneComponentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneComponentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SceneComponentState";
  }
  protected:
  explicit SceneComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachChildrenFieldNumber = 10,
    kAttachSocketNameFieldNumber = 11,
    kAttachParentFieldNumber = 9,
    kRelativeLocationFieldNumber = 12,
    kRelativeRotationFieldNumber = 13,
    kRelativeScaleFieldNumber = 14,
    kRemovedFieldNumber = 1,
    kBAbsoluteLocationFieldNumber = 2,
    kBAbsoluteRotationFieldNumber = 3,
    kBAbsoluteScaleFieldNumber = 4,
    kBVisibleFieldNumber = 5,
    kBShouldBeAttachedFieldNumber = 6,
    kBShouldSnapLocationWhenAttachedFieldNumber = 7,
    kBShouldSnapRotationWhenAttachedFieldNumber = 8,
  };
  // repeated .unrealpb.UnrealObjectRef attachChildren = 10;
  int attachchildren_size() const;
  private:
  int _internal_attachchildren_size() const;
  public:
  void clear_attachchildren();
  ::unrealpb::UnrealObjectRef* mutable_attachchildren(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >*
      mutable_attachchildren();
  private:
  const ::unrealpb::UnrealObjectRef& _internal_attachchildren(int index) const;
  ::unrealpb::UnrealObjectRef* _internal_add_attachchildren();
  public:
  const ::unrealpb::UnrealObjectRef& attachchildren(int index) const;
  ::unrealpb::UnrealObjectRef* add_attachchildren();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >&
      attachchildren() const;

  // optional string attachSocketName = 11;
  bool has_attachsocketname() const;
  private:
  bool _internal_has_attachsocketname() const;
  public:
  void clear_attachsocketname();
  const std::string& attachsocketname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachsocketname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachsocketname();
  PROTOBUF_NODISCARD std::string* release_attachsocketname();
  void set_allocated_attachsocketname(std::string* attachsocketname);
  private:
  const std::string& _internal_attachsocketname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachsocketname(const std::string& value);
  std::string* _internal_mutable_attachsocketname();
  public:

  // optional .unrealpb.UnrealObjectRef attachParent = 9;
  bool has_attachparent() const;
  private:
  bool _internal_has_attachparent() const;
  public:
  void clear_attachparent();
  const ::unrealpb::UnrealObjectRef& attachparent() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_attachparent();
  ::unrealpb::UnrealObjectRef* mutable_attachparent();
  void set_allocated_attachparent(::unrealpb::UnrealObjectRef* attachparent);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_attachparent() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_attachparent();
  public:
  void unsafe_arena_set_allocated_attachparent(
      ::unrealpb::UnrealObjectRef* attachparent);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_attachparent();

  // optional .unrealpb.FVector relativeLocation = 12;
  bool has_relativelocation() const;
  private:
  bool _internal_has_relativelocation() const;
  public:
  void clear_relativelocation();
  const ::unrealpb::FVector& relativelocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativelocation();
  ::unrealpb::FVector* mutable_relativelocation();
  void set_allocated_relativelocation(::unrealpb::FVector* relativelocation);
  private:
  const ::unrealpb::FVector& _internal_relativelocation() const;
  ::unrealpb::FVector* _internal_mutable_relativelocation();
  public:
  void unsafe_arena_set_allocated_relativelocation(
      ::unrealpb::FVector* relativelocation);
  ::unrealpb::FVector* unsafe_arena_release_relativelocation();

  // optional .unrealpb.FVector relativeRotation = 13;
  bool has_relativerotation() const;
  private:
  bool _internal_has_relativerotation() const;
  public:
  void clear_relativerotation();
  const ::unrealpb::FVector& relativerotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativerotation();
  ::unrealpb::FVector* mutable_relativerotation();
  void set_allocated_relativerotation(::unrealpb::FVector* relativerotation);
  private:
  const ::unrealpb::FVector& _internal_relativerotation() const;
  ::unrealpb::FVector* _internal_mutable_relativerotation();
  public:
  void unsafe_arena_set_allocated_relativerotation(
      ::unrealpb::FVector* relativerotation);
  ::unrealpb::FVector* unsafe_arena_release_relativerotation();

  // optional .unrealpb.FVector relativeScale = 14;
  bool has_relativescale() const;
  private:
  bool _internal_has_relativescale() const;
  public:
  void clear_relativescale();
  const ::unrealpb::FVector& relativescale() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativescale();
  ::unrealpb::FVector* mutable_relativescale();
  void set_allocated_relativescale(::unrealpb::FVector* relativescale);
  private:
  const ::unrealpb::FVector& _internal_relativescale() const;
  ::unrealpb::FVector* _internal_mutable_relativescale();
  public:
  void unsafe_arena_set_allocated_relativescale(
      ::unrealpb::FVector* relativescale);
  ::unrealpb::FVector* unsafe_arena_release_relativescale();

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool bAbsoluteLocation = 2;
  bool has_babsolutelocation() const;
  private:
  bool _internal_has_babsolutelocation() const;
  public:
  void clear_babsolutelocation();
  bool babsolutelocation() const;
  void set_babsolutelocation(bool value);
  private:
  bool _internal_babsolutelocation() const;
  void _internal_set_babsolutelocation(bool value);
  public:

  // optional bool bAbsoluteRotation = 3;
  bool has_babsoluterotation() const;
  private:
  bool _internal_has_babsoluterotation() const;
  public:
  void clear_babsoluterotation();
  bool babsoluterotation() const;
  void set_babsoluterotation(bool value);
  private:
  bool _internal_babsoluterotation() const;
  void _internal_set_babsoluterotation(bool value);
  public:

  // optional bool bAbsoluteScale = 4;
  bool has_babsolutescale() const;
  private:
  bool _internal_has_babsolutescale() const;
  public:
  void clear_babsolutescale();
  bool babsolutescale() const;
  void set_babsolutescale(bool value);
  private:
  bool _internal_babsolutescale() const;
  void _internal_set_babsolutescale(bool value);
  public:

  // optional bool bVisible = 5;
  bool has_bvisible() const;
  private:
  bool _internal_has_bvisible() const;
  public:
  void clear_bvisible();
  bool bvisible() const;
  void set_bvisible(bool value);
  private:
  bool _internal_bvisible() const;
  void _internal_set_bvisible(bool value);
  public:

  // optional bool bShouldBeAttached = 6;
  bool has_bshouldbeattached() const;
  private:
  bool _internal_has_bshouldbeattached() const;
  public:
  void clear_bshouldbeattached();
  bool bshouldbeattached() const;
  void set_bshouldbeattached(bool value);
  private:
  bool _internal_bshouldbeattached() const;
  void _internal_set_bshouldbeattached(bool value);
  public:

  // optional bool bShouldSnapLocationWhenAttached = 7;
  bool has_bshouldsnaplocationwhenattached() const;
  private:
  bool _internal_has_bshouldsnaplocationwhenattached() const;
  public:
  void clear_bshouldsnaplocationwhenattached();
  bool bshouldsnaplocationwhenattached() const;
  void set_bshouldsnaplocationwhenattached(bool value);
  private:
  bool _internal_bshouldsnaplocationwhenattached() const;
  void _internal_set_bshouldsnaplocationwhenattached(bool value);
  public:

  // optional bool bShouldSnapRotationWhenAttached = 8;
  bool has_bshouldsnaprotationwhenattached() const;
  private:
  bool _internal_has_bshouldsnaprotationwhenattached() const;
  public:
  void clear_bshouldsnaprotationwhenattached();
  bool bshouldsnaprotationwhenattached() const;
  void set_bshouldsnaprotationwhenattached(bool value);
  private:
  bool _internal_bshouldsnaprotationwhenattached() const;
  void _internal_set_bshouldsnaprotationwhenattached(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.SceneComponentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef > attachchildren_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachsocketname_;
    ::unrealpb::UnrealObjectRef* attachparent_;
    ::unrealpb::FVector* relativelocation_;
    ::unrealpb::FVector* relativerotation_;
    ::unrealpb::FVector* relativescale_;
    bool removed_;
    bool babsolutelocation_;
    bool babsoluterotation_;
    bool babsolutescale_;
    bool bvisible_;
    bool bshouldbeattached_;
    bool bshouldsnaplocationwhenattached_;
    bool bshouldsnaprotationwhenattached_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API RootMotionMontage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:unrealpb.RootMotionMontage) */ {
 public:
  inline RootMotionMontage() : RootMotionMontage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RootMotionMontage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RootMotionMontage(const RootMotionMontage& from);
  RootMotionMontage(RootMotionMontage&& from) noexcept
    : RootMotionMontage() {
    *this = ::std::move(from);
  }

  inline RootMotionMontage& operator=(const RootMotionMontage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootMotionMontage& operator=(RootMotionMontage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RootMotionMontage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RootMotionMontage* internal_default_instance() {
    return reinterpret_cast<const RootMotionMontage*>(
               &_RootMotionMontage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RootMotionMontage& a, RootMotionMontage& b) {
    a.Swap(&b);
  }
  inline void Swap(RootMotionMontage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootMotionMontage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RootMotionMontage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RootMotionMontage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RootMotionMontage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RootMotionMontage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.RootMotionMontage";
  }
  protected:
  explicit RootMotionMontage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:unrealpb.RootMotionMontage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API BasedMovementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.BasedMovementInfo) */ {
 public:
  inline BasedMovementInfo() : BasedMovementInfo(nullptr) {}
  ~BasedMovementInfo() override;
  explicit PROTOBUF_CONSTEXPR BasedMovementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasedMovementInfo(const BasedMovementInfo& from);
  BasedMovementInfo(BasedMovementInfo&& from) noexcept
    : BasedMovementInfo() {
    *this = ::std::move(from);
  }

  inline BasedMovementInfo& operator=(const BasedMovementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasedMovementInfo& operator=(BasedMovementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasedMovementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasedMovementInfo* internal_default_instance() {
    return reinterpret_cast<const BasedMovementInfo*>(
               &_BasedMovementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BasedMovementInfo& a, BasedMovementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BasedMovementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasedMovementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasedMovementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasedMovementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasedMovementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BasedMovementInfo& from) {
    BasedMovementInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasedMovementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.BasedMovementInfo";
  }
  protected:
  explicit BasedMovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoneNameFieldNumber = 2,
    kMovementBaseFieldNumber = 1,
    kLocationFieldNumber = 3,
    kRotationFieldNumber = 4,
    kBServerHasBaseComponentFieldNumber = 5,
    kBRelativeRotationFieldNumber = 6,
    kBServerHasVelocityFieldNumber = 7,
  };
  // optional string boneName = 2;
  bool has_bonename() const;
  private:
  bool _internal_has_bonename() const;
  public:
  void clear_bonename();
  const std::string& bonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bonename();
  PROTOBUF_NODISCARD std::string* release_bonename();
  void set_allocated_bonename(std::string* bonename);
  private:
  const std::string& _internal_bonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bonename(const std::string& value);
  std::string* _internal_mutable_bonename();
  public:

  // optional .unrealpb.UnrealObjectRef movementBase = 1;
  bool has_movementbase() const;
  private:
  bool _internal_has_movementbase() const;
  public:
  void clear_movementbase();
  const ::unrealpb::UnrealObjectRef& movementbase() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_movementbase();
  ::unrealpb::UnrealObjectRef* mutable_movementbase();
  void set_allocated_movementbase(::unrealpb::UnrealObjectRef* movementbase);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_movementbase() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_movementbase();
  public:
  void unsafe_arena_set_allocated_movementbase(
      ::unrealpb::UnrealObjectRef* movementbase);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_movementbase();

  // optional .unrealpb.FVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::unrealpb::FVector& location() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_location();
  ::unrealpb::FVector* mutable_location();
  void set_allocated_location(::unrealpb::FVector* location);
  private:
  const ::unrealpb::FVector& _internal_location() const;
  ::unrealpb::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::unrealpb::FVector* location);
  ::unrealpb::FVector* unsafe_arena_release_location();

  // optional .unrealpb.FVector rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::unrealpb::FVector& rotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rotation();
  ::unrealpb::FVector* mutable_rotation();
  void set_allocated_rotation(::unrealpb::FVector* rotation);
  private:
  const ::unrealpb::FVector& _internal_rotation() const;
  ::unrealpb::FVector* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::unrealpb::FVector* rotation);
  ::unrealpb::FVector* unsafe_arena_release_rotation();

  // optional bool bServerHasBaseComponent = 5;
  bool has_bserverhasbasecomponent() const;
  private:
  bool _internal_has_bserverhasbasecomponent() const;
  public:
  void clear_bserverhasbasecomponent();
  bool bserverhasbasecomponent() const;
  void set_bserverhasbasecomponent(bool value);
  private:
  bool _internal_bserverhasbasecomponent() const;
  void _internal_set_bserverhasbasecomponent(bool value);
  public:

  // optional bool bRelativeRotation = 6;
  bool has_brelativerotation() const;
  private:
  bool _internal_has_brelativerotation() const;
  public:
  void clear_brelativerotation();
  bool brelativerotation() const;
  void set_brelativerotation(bool value);
  private:
  bool _internal_brelativerotation() const;
  void _internal_set_brelativerotation(bool value);
  public:

  // optional bool bServerHasVelocity = 7;
  bool has_bserverhasvelocity() const;
  private:
  bool _internal_has_bserverhasvelocity() const;
  public:
  void clear_bserverhasvelocity();
  bool bserverhasvelocity() const;
  void set_bserverhasvelocity(bool value);
  private:
  bool _internal_bserverhasvelocity() const;
  void _internal_set_bserverhasvelocity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.BasedMovementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bonename_;
    ::unrealpb::UnrealObjectRef* movementbase_;
    ::unrealpb::FVector* location_;
    ::unrealpb::FVector* rotation_;
    bool bserverhasbasecomponent_;
    bool brelativerotation_;
    bool bserverhasvelocity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API CharacterState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.CharacterState) */ {
 public:
  inline CharacterState() : CharacterState(nullptr) {}
  ~CharacterState() override;
  explicit PROTOBUF_CONSTEXPR CharacterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterState(const CharacterState& from);
  CharacterState(CharacterState&& from) noexcept
    : CharacterState() {
    *this = ::std::move(from);
  }

  inline CharacterState& operator=(const CharacterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterState& operator=(CharacterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterState* internal_default_instance() {
    return reinterpret_cast<const CharacterState*>(
               &_CharacterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CharacterState& a, CharacterState& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterState& from) {
    CharacterState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.CharacterState";
  }
  protected:
  explicit CharacterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootMotionFieldNumber = 2,
    kBasedMovementFieldNumber = 3,
    kServerLastTransformUpdateTimeStampFieldNumber = 4,
    kRemovedFieldNumber = 1,
    kBIsCrouchedFieldNumber = 6,
    kBProxyIsJumpForceAppliedFieldNumber = 7,
    kMovementModeFieldNumber = 5,
    kAnimRootMotionTranslationScaleFieldNumber = 8,
    kReplayLastTransformUpdateTimeStampFieldNumber = 9,
  };
  // optional .unrealpb.RootMotionMontage rootMotion = 2;
  bool has_rootmotion() const;
  private:
  bool _internal_has_rootmotion() const;
  public:
  void clear_rootmotion();
  const ::unrealpb::RootMotionMontage& rootmotion() const;
  PROTOBUF_NODISCARD ::unrealpb::RootMotionMontage* release_rootmotion();
  ::unrealpb::RootMotionMontage* mutable_rootmotion();
  void set_allocated_rootmotion(::unrealpb::RootMotionMontage* rootmotion);
  private:
  const ::unrealpb::RootMotionMontage& _internal_rootmotion() const;
  ::unrealpb::RootMotionMontage* _internal_mutable_rootmotion();
  public:
  void unsafe_arena_set_allocated_rootmotion(
      ::unrealpb::RootMotionMontage* rootmotion);
  ::unrealpb::RootMotionMontage* unsafe_arena_release_rootmotion();

  // optional .unrealpb.BasedMovementInfo basedMovement = 3;
  bool has_basedmovement() const;
  private:
  bool _internal_has_basedmovement() const;
  public:
  void clear_basedmovement();
  const ::unrealpb::BasedMovementInfo& basedmovement() const;
  PROTOBUF_NODISCARD ::unrealpb::BasedMovementInfo* release_basedmovement();
  ::unrealpb::BasedMovementInfo* mutable_basedmovement();
  void set_allocated_basedmovement(::unrealpb::BasedMovementInfo* basedmovement);
  private:
  const ::unrealpb::BasedMovementInfo& _internal_basedmovement() const;
  ::unrealpb::BasedMovementInfo* _internal_mutable_basedmovement();
  public:
  void unsafe_arena_set_allocated_basedmovement(
      ::unrealpb::BasedMovementInfo* basedmovement);
  ::unrealpb::BasedMovementInfo* unsafe_arena_release_basedmovement();

  // optional float serverLastTransformUpdateTimeStamp = 4;
  bool has_serverlasttransformupdatetimestamp() const;
  private:
  bool _internal_has_serverlasttransformupdatetimestamp() const;
  public:
  void clear_serverlasttransformupdatetimestamp();
  float serverlasttransformupdatetimestamp() const;
  void set_serverlasttransformupdatetimestamp(float value);
  private:
  float _internal_serverlasttransformupdatetimestamp() const;
  void _internal_set_serverlasttransformupdatetimestamp(float value);
  public:

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool bIsCrouched = 6;
  bool has_biscrouched() const;
  private:
  bool _internal_has_biscrouched() const;
  public:
  void clear_biscrouched();
  bool biscrouched() const;
  void set_biscrouched(bool value);
  private:
  bool _internal_biscrouched() const;
  void _internal_set_biscrouched(bool value);
  public:

  // optional bool bProxyIsJumpForceApplied = 7;
  bool has_bproxyisjumpforceapplied() const;
  private:
  bool _internal_has_bproxyisjumpforceapplied() const;
  public:
  void clear_bproxyisjumpforceapplied();
  bool bproxyisjumpforceapplied() const;
  void set_bproxyisjumpforceapplied(bool value);
  private:
  bool _internal_bproxyisjumpforceapplied() const;
  void _internal_set_bproxyisjumpforceapplied(bool value);
  public:

  // optional uint32 movementMode = 5;
  bool has_movementmode() const;
  private:
  bool _internal_has_movementmode() const;
  public:
  void clear_movementmode();
  uint32_t movementmode() const;
  void set_movementmode(uint32_t value);
  private:
  uint32_t _internal_movementmode() const;
  void _internal_set_movementmode(uint32_t value);
  public:

  // optional float animRootMotionTranslationScale = 8;
  bool has_animrootmotiontranslationscale() const;
  private:
  bool _internal_has_animrootmotiontranslationscale() const;
  public:
  void clear_animrootmotiontranslationscale();
  float animrootmotiontranslationscale() const;
  void set_animrootmotiontranslationscale(float value);
  private:
  float _internal_animrootmotiontranslationscale() const;
  void _internal_set_animrootmotiontranslationscale(float value);
  public:

  // optional float replayLastTransformUpdateTimeStamp = 9;
  bool has_replaylasttransformupdatetimestamp() const;
  private:
  bool _internal_has_replaylasttransformupdatetimestamp() const;
  public:
  void clear_replaylasttransformupdatetimestamp();
  float replaylasttransformupdatetimestamp() const;
  void set_replaylasttransformupdatetimestamp(float value);
  private:
  float _internal_replaylasttransformupdatetimestamp() const;
  void _internal_set_replaylasttransformupdatetimestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.CharacterState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::RootMotionMontage* rootmotion_;
    ::unrealpb::BasedMovementInfo* basedmovement_;
    float serverlasttransformupdatetimestamp_;
    bool removed_;
    bool biscrouched_;
    bool bproxyisjumpforceapplied_;
    uint32_t movementmode_;
    float animrootmotiontranslationscale_;
    float replaylasttransformupdatetimestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Character_ServerMovePacked_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Character_ServerMovePacked_Params) */ {
 public:
  inline Character_ServerMovePacked_Params() : Character_ServerMovePacked_Params(nullptr) {}
  ~Character_ServerMovePacked_Params() override;
  explicit PROTOBUF_CONSTEXPR Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_ServerMovePacked_Params(const Character_ServerMovePacked_Params& from);
  Character_ServerMovePacked_Params(Character_ServerMovePacked_Params&& from) noexcept
    : Character_ServerMovePacked_Params() {
    *this = ::std::move(from);
  }

  inline Character_ServerMovePacked_Params& operator=(const Character_ServerMovePacked_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ServerMovePacked_Params& operator=(Character_ServerMovePacked_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_ServerMovePacked_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_ServerMovePacked_Params* internal_default_instance() {
    return reinterpret_cast<const Character_ServerMovePacked_Params*>(
               &_Character_ServerMovePacked_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Character_ServerMovePacked_Params& a, Character_ServerMovePacked_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ServerMovePacked_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ServerMovePacked_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_ServerMovePacked_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_ServerMovePacked_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_ServerMovePacked_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_ServerMovePacked_Params& from) {
    Character_ServerMovePacked_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ServerMovePacked_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Character_ServerMovePacked_Params";
  }
  protected:
  explicit Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedBitsFieldNumber = 2,
    kBitsNumFieldNumber = 1,
  };
  // bytes packedBits = 2;
  void clear_packedbits();
  const std::string& packedbits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packedbits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packedbits();
  PROTOBUF_NODISCARD std::string* release_packedbits();
  void set_allocated_packedbits(std::string* packedbits);
  private:
  const std::string& _internal_packedbits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packedbits(const std::string& value);
  std::string* _internal_mutable_packedbits();
  public:

  // uint32 bitsNum = 1;
  void clear_bitsnum();
  uint32_t bitsnum() const;
  void set_bitsnum(uint32_t value);
  private:
  uint32_t _internal_bitsnum() const;
  void _internal_set_bitsnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Character_ServerMovePacked_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packedbits_;
    uint32_t bitsnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Character_ClientMoveResponsePacked_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Character_ClientMoveResponsePacked_Params) */ {
 public:
  inline Character_ClientMoveResponsePacked_Params() : Character_ClientMoveResponsePacked_Params(nullptr) {}
  ~Character_ClientMoveResponsePacked_Params() override;
  explicit PROTOBUF_CONSTEXPR Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_ClientMoveResponsePacked_Params(const Character_ClientMoveResponsePacked_Params& from);
  Character_ClientMoveResponsePacked_Params(Character_ClientMoveResponsePacked_Params&& from) noexcept
    : Character_ClientMoveResponsePacked_Params() {
    *this = ::std::move(from);
  }

  inline Character_ClientMoveResponsePacked_Params& operator=(const Character_ClientMoveResponsePacked_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ClientMoveResponsePacked_Params& operator=(Character_ClientMoveResponsePacked_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_ClientMoveResponsePacked_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_ClientMoveResponsePacked_Params* internal_default_instance() {
    return reinterpret_cast<const Character_ClientMoveResponsePacked_Params*>(
               &_Character_ClientMoveResponsePacked_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Character_ClientMoveResponsePacked_Params& a, Character_ClientMoveResponsePacked_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ClientMoveResponsePacked_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ClientMoveResponsePacked_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_ClientMoveResponsePacked_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_ClientMoveResponsePacked_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_ClientMoveResponsePacked_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_ClientMoveResponsePacked_Params& from) {
    Character_ClientMoveResponsePacked_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ClientMoveResponsePacked_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Character_ClientMoveResponsePacked_Params";
  }
  protected:
  explicit Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedBitsFieldNumber = 2,
    kBitsNumFieldNumber = 1,
  };
  // bytes packedBits = 2;
  void clear_packedbits();
  const std::string& packedbits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packedbits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packedbits();
  PROTOBUF_NODISCARD std::string* release_packedbits();
  void set_allocated_packedbits(std::string* packedbits);
  private:
  const std::string& _internal_packedbits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packedbits(const std::string& value);
  std::string* _internal_mutable_packedbits();
  public:

  // uint32 bitsNum = 1;
  void clear_bitsnum();
  uint32_t bitsnum() const;
  void set_bitsnum(uint32_t value);
  private:
  uint32_t _internal_bitsnum() const;
  void _internal_set_bitsnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Character_ClientMoveResponsePacked_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packedbits_;
    uint32_t bitsnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerState) */ {
 public:
  inline PlayerState() : PlayerState(nullptr) {}
  ~PlayerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerState(const PlayerState& from);
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerState& from) {
    PlayerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerState";
  }
  protected:
  explicit PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 4,
    kScoreFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kPingFieldNumber = 3,
  };
  // optional string playerName = 4;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // optional float score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional int32 playerId = 2;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // optional uint32 ping = 3;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  uint32_t ping() const;
  void set_ping(uint32_t value);
  private:
  uint32_t _internal_ping() const;
  void _internal_set_ping(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    float score_;
    int32_t playerid_;
    uint32_t ping_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ControllerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.ControllerState) */ {
 public:
  inline ControllerState() : ControllerState(nullptr) {}
  ~ControllerState() override;
  explicit PROTOBUF_CONSTEXPR ControllerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerState(const ControllerState& from);
  ControllerState(ControllerState&& from) noexcept
    : ControllerState() {
    *this = ::std::move(from);
  }

  inline ControllerState& operator=(const ControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerState& operator=(ControllerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerState* internal_default_instance() {
    return reinterpret_cast<const ControllerState*>(
               &_ControllerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ControllerState& a, ControllerState& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerState& from) {
    ControllerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.ControllerState";
  }
  protected:
  explicit ControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStateFieldNumber = 1,
    kPawnFieldNumber = 2,
  };
  // .unrealpb.UnrealObjectRef playerState = 1;
  bool has_playerstate() const;
  private:
  bool _internal_has_playerstate() const;
  public:
  void clear_playerstate();
  const ::unrealpb::UnrealObjectRef& playerstate() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_playerstate();
  ::unrealpb::UnrealObjectRef* mutable_playerstate();
  void set_allocated_playerstate(::unrealpb::UnrealObjectRef* playerstate);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_playerstate() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_playerstate();
  public:
  void unsafe_arena_set_allocated_playerstate(
      ::unrealpb::UnrealObjectRef* playerstate);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_playerstate();

  // .unrealpb.UnrealObjectRef pawn = 2;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.ControllerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* playerstate_;
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Controller_ClientSetLocation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Controller_ClientSetLocation_Params) */ {
 public:
  inline Controller_ClientSetLocation_Params() : Controller_ClientSetLocation_Params(nullptr) {}
  ~Controller_ClientSetLocation_Params() override;
  explicit PROTOBUF_CONSTEXPR Controller_ClientSetLocation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Controller_ClientSetLocation_Params(const Controller_ClientSetLocation_Params& from);
  Controller_ClientSetLocation_Params(Controller_ClientSetLocation_Params&& from) noexcept
    : Controller_ClientSetLocation_Params() {
    *this = ::std::move(from);
  }

  inline Controller_ClientSetLocation_Params& operator=(const Controller_ClientSetLocation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Controller_ClientSetLocation_Params& operator=(Controller_ClientSetLocation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Controller_ClientSetLocation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Controller_ClientSetLocation_Params* internal_default_instance() {
    return reinterpret_cast<const Controller_ClientSetLocation_Params*>(
               &_Controller_ClientSetLocation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Controller_ClientSetLocation_Params& a, Controller_ClientSetLocation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Controller_ClientSetLocation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Controller_ClientSetLocation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Controller_ClientSetLocation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Controller_ClientSetLocation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Controller_ClientSetLocation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Controller_ClientSetLocation_Params& from) {
    Controller_ClientSetLocation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Controller_ClientSetLocation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Controller_ClientSetLocation_Params";
  }
  protected:
  explicit Controller_ClientSetLocation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLocationFieldNumber = 1,
    kNewRotationFieldNumber = 2,
  };
  // .unrealpb.FVector newLocation = 1;
  bool has_newlocation() const;
  private:
  bool _internal_has_newlocation() const;
  public:
  void clear_newlocation();
  const ::unrealpb::FVector& newlocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newlocation();
  ::unrealpb::FVector* mutable_newlocation();
  void set_allocated_newlocation(::unrealpb::FVector* newlocation);
  private:
  const ::unrealpb::FVector& _internal_newlocation() const;
  ::unrealpb::FVector* _internal_mutable_newlocation();
  public:
  void unsafe_arena_set_allocated_newlocation(
      ::unrealpb::FVector* newlocation);
  ::unrealpb::FVector* unsafe_arena_release_newlocation();

  // .unrealpb.FVector newRotation = 2;
  bool has_newrotation() const;
  private:
  bool _internal_has_newrotation() const;
  public:
  void clear_newrotation();
  const ::unrealpb::FVector& newrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrotation();
  ::unrealpb::FVector* mutable_newrotation();
  void set_allocated_newrotation(::unrealpb::FVector* newrotation);
  private:
  const ::unrealpb::FVector& _internal_newrotation() const;
  ::unrealpb::FVector* _internal_mutable_newrotation();
  public:
  void unsafe_arena_set_allocated_newrotation(
      ::unrealpb::FVector* newrotation);
  ::unrealpb::FVector* unsafe_arena_release_newrotation();

  // @@protoc_insertion_point(class_scope:unrealpb.Controller_ClientSetLocation_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* newlocation_;
    ::unrealpb::FVector* newrotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Controller_ClientSetRotation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Controller_ClientSetRotation_Params) */ {
 public:
  inline Controller_ClientSetRotation_Params() : Controller_ClientSetRotation_Params(nullptr) {}
  ~Controller_ClientSetRotation_Params() override;
  explicit PROTOBUF_CONSTEXPR Controller_ClientSetRotation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Controller_ClientSetRotation_Params(const Controller_ClientSetRotation_Params& from);
  Controller_ClientSetRotation_Params(Controller_ClientSetRotation_Params&& from) noexcept
    : Controller_ClientSetRotation_Params() {
    *this = ::std::move(from);
  }

  inline Controller_ClientSetRotation_Params& operator=(const Controller_ClientSetRotation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Controller_ClientSetRotation_Params& operator=(Controller_ClientSetRotation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Controller_ClientSetRotation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Controller_ClientSetRotation_Params* internal_default_instance() {
    return reinterpret_cast<const Controller_ClientSetRotation_Params*>(
               &_Controller_ClientSetRotation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Controller_ClientSetRotation_Params& a, Controller_ClientSetRotation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Controller_ClientSetRotation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Controller_ClientSetRotation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Controller_ClientSetRotation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Controller_ClientSetRotation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Controller_ClientSetRotation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Controller_ClientSetRotation_Params& from) {
    Controller_ClientSetRotation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Controller_ClientSetRotation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Controller_ClientSetRotation_Params";
  }
  protected:
  explicit Controller_ClientSetRotation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewRotationFieldNumber = 1,
    kBResetCameraFieldNumber = 2,
  };
  // .unrealpb.FVector newRotation = 1;
  bool has_newrotation() const;
  private:
  bool _internal_has_newrotation() const;
  public:
  void clear_newrotation();
  const ::unrealpb::FVector& newrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrotation();
  ::unrealpb::FVector* mutable_newrotation();
  void set_allocated_newrotation(::unrealpb::FVector* newrotation);
  private:
  const ::unrealpb::FVector& _internal_newrotation() const;
  ::unrealpb::FVector* _internal_mutable_newrotation();
  public:
  void unsafe_arena_set_allocated_newrotation(
      ::unrealpb::FVector* newrotation);
  ::unrealpb::FVector* unsafe_arena_release_newrotation();

  // bool bResetCamera = 2;
  void clear_bresetcamera();
  bool bresetcamera() const;
  void set_bresetcamera(bool value);
  private:
  bool _internal_bresetcamera() const;
  void _internal_set_bresetcamera(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Controller_ClientSetRotation_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* newrotation_;
    bool bresetcamera_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerControllerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerControllerState) */ {
 public:
  inline PlayerControllerState() : PlayerControllerState(nullptr) {}
  ~PlayerControllerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerControllerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerControllerState(const PlayerControllerState& from);
  PlayerControllerState(PlayerControllerState&& from) noexcept
    : PlayerControllerState() {
    *this = ::std::move(from);
  }

  inline PlayerControllerState& operator=(const PlayerControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerControllerState& operator=(PlayerControllerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerControllerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerControllerState* internal_default_instance() {
    return reinterpret_cast<const PlayerControllerState*>(
               &_PlayerControllerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlayerControllerState& a, PlayerControllerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerControllerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerControllerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerControllerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerControllerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerControllerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerControllerState& from) {
    PlayerControllerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerControllerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerControllerState";
  }
  protected:
  explicit PlayerControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetViewRotationFieldNumber = 1,
    kSpawnLocationFieldNumber = 2,
  };
  // optional .unrealpb.FVector targetViewRotation = 1;
  bool has_targetviewrotation() const;
  private:
  bool _internal_has_targetviewrotation() const;
  public:
  void clear_targetviewrotation();
  const ::unrealpb::FVector& targetviewrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_targetviewrotation();
  ::unrealpb::FVector* mutable_targetviewrotation();
  void set_allocated_targetviewrotation(::unrealpb::FVector* targetviewrotation);
  private:
  const ::unrealpb::FVector& _internal_targetviewrotation() const;
  ::unrealpb::FVector* _internal_mutable_targetviewrotation();
  public:
  void unsafe_arena_set_allocated_targetviewrotation(
      ::unrealpb::FVector* targetviewrotation);
  ::unrealpb::FVector* unsafe_arena_release_targetviewrotation();

  // optional .unrealpb.FVector spawnLocation = 2;
  bool has_spawnlocation() const;
  private:
  bool _internal_has_spawnlocation() const;
  public:
  void clear_spawnlocation();
  const ::unrealpb::FVector& spawnlocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_spawnlocation();
  ::unrealpb::FVector* mutable_spawnlocation();
  void set_allocated_spawnlocation(::unrealpb::FVector* spawnlocation);
  private:
  const ::unrealpb::FVector& _internal_spawnlocation() const;
  ::unrealpb::FVector* _internal_mutable_spawnlocation();
  public:
  void unsafe_arena_set_allocated_spawnlocation(
      ::unrealpb::FVector* spawnlocation);
  ::unrealpb::FVector* unsafe_arena_release_spawnlocation();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerControllerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::unrealpb::FVector* targetviewrotation_;
    ::unrealpb::FVector* spawnlocation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerUpdateCamera_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerUpdateCamera_Params) */ {
 public:
  inline PlayerController_ServerUpdateCamera_Params() : PlayerController_ServerUpdateCamera_Params(nullptr) {}
  ~PlayerController_ServerUpdateCamera_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerUpdateCamera_Params(const PlayerController_ServerUpdateCamera_Params& from);
  PlayerController_ServerUpdateCamera_Params(PlayerController_ServerUpdateCamera_Params&& from) noexcept
    : PlayerController_ServerUpdateCamera_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerUpdateCamera_Params& operator=(const PlayerController_ServerUpdateCamera_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerUpdateCamera_Params& operator=(PlayerController_ServerUpdateCamera_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerUpdateCamera_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerUpdateCamera_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerUpdateCamera_Params*>(
               &_PlayerController_ServerUpdateCamera_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PlayerController_ServerUpdateCamera_Params& a, PlayerController_ServerUpdateCamera_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerUpdateCamera_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerUpdateCamera_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerUpdateCamera_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerUpdateCamera_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerUpdateCamera_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerUpdateCamera_Params& from) {
    PlayerController_ServerUpdateCamera_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerUpdateCamera_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerUpdateCamera_Params";
  }
  protected:
  explicit PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamLocFieldNumber = 1,
    kCamPitchAndYawFieldNumber = 2,
  };
  // .unrealpb.FVector camLoc = 1;
  bool has_camloc() const;
  private:
  bool _internal_has_camloc() const;
  public:
  void clear_camloc();
  const ::unrealpb::FVector& camloc() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_camloc();
  ::unrealpb::FVector* mutable_camloc();
  void set_allocated_camloc(::unrealpb::FVector* camloc);
  private:
  const ::unrealpb::FVector& _internal_camloc() const;
  ::unrealpb::FVector* _internal_mutable_camloc();
  public:
  void unsafe_arena_set_allocated_camloc(
      ::unrealpb::FVector* camloc);
  ::unrealpb::FVector* unsafe_arena_release_camloc();

  // int32 camPitchAndYaw = 2;
  void clear_campitchandyaw();
  int32_t campitchandyaw() const;
  void set_campitchandyaw(int32_t value);
  private:
  int32_t _internal_campitchandyaw() const;
  void _internal_set_campitchandyaw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerUpdateCamera_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* camloc_;
    int32_t campitchandyaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientSetHUD_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientSetHUD_Params) */ {
 public:
  inline PlayerController_ClientSetHUD_Params() : PlayerController_ClientSetHUD_Params(nullptr) {}
  ~PlayerController_ClientSetHUD_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientSetHUD_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientSetHUD_Params(const PlayerController_ClientSetHUD_Params& from);
  PlayerController_ClientSetHUD_Params(PlayerController_ClientSetHUD_Params&& from) noexcept
    : PlayerController_ClientSetHUD_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientSetHUD_Params& operator=(const PlayerController_ClientSetHUD_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientSetHUD_Params& operator=(PlayerController_ClientSetHUD_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientSetHUD_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientSetHUD_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientSetHUD_Params*>(
               &_PlayerController_ClientSetHUD_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlayerController_ClientSetHUD_Params& a, PlayerController_ClientSetHUD_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientSetHUD_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientSetHUD_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientSetHUD_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientSetHUD_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientSetHUD_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientSetHUD_Params& from) {
    PlayerController_ClientSetHUD_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientSetHUD_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientSetHUD_Params";
  }
  protected:
  explicit PlayerController_ClientSetHUD_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHudClassNameFieldNumber = 1,
  };
  // optional string hudClassName = 1;
  bool has_hudclassname() const;
  private:
  bool _internal_has_hudclassname() const;
  public:
  void clear_hudclassname();
  const std::string& hudclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hudclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hudclassname();
  PROTOBUF_NODISCARD std::string* release_hudclassname();
  void set_allocated_hudclassname(std::string* hudclassname);
  private:
  const std::string& _internal_hudclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hudclassname(const std::string& value);
  std::string* _internal_mutable_hudclassname();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientSetHUD_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hudclassname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientSetViewTarget_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientSetViewTarget_Params) */ {
 public:
  inline PlayerController_ClientSetViewTarget_Params() : PlayerController_ClientSetViewTarget_Params(nullptr) {}
  ~PlayerController_ClientSetViewTarget_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientSetViewTarget_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientSetViewTarget_Params(const PlayerController_ClientSetViewTarget_Params& from);
  PlayerController_ClientSetViewTarget_Params(PlayerController_ClientSetViewTarget_Params&& from) noexcept
    : PlayerController_ClientSetViewTarget_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientSetViewTarget_Params& operator=(const PlayerController_ClientSetViewTarget_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientSetViewTarget_Params& operator=(PlayerController_ClientSetViewTarget_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientSetViewTarget_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientSetViewTarget_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientSetViewTarget_Params*>(
               &_PlayerController_ClientSetViewTarget_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlayerController_ClientSetViewTarget_Params& a, PlayerController_ClientSetViewTarget_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientSetViewTarget_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientSetViewTarget_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientSetViewTarget_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientSetViewTarget_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientSetViewTarget_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientSetViewTarget_Params& from) {
    PlayerController_ClientSetViewTarget_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientSetViewTarget_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientSetViewTarget_Params";
  }
  protected:
  explicit PlayerController_ClientSetViewTarget_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 1,
    kBlendTimeFieldNumber = 2,
    kBlendFunctionFieldNumber = 3,
    kBlendExpFieldNumber = 4,
    kBLockOutgoingFieldNumber = 5,
  };
  // .unrealpb.UnrealObjectRef actor = 1;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::unrealpb::UnrealObjectRef& actor() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_actor();
  ::unrealpb::UnrealObjectRef* mutable_actor();
  void set_allocated_actor(::unrealpb::UnrealObjectRef* actor);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_actor() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::unrealpb::UnrealObjectRef* actor);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_actor();

  // float blendTime = 2;
  void clear_blendtime();
  float blendtime() const;
  void set_blendtime(float value);
  private:
  float _internal_blendtime() const;
  void _internal_set_blendtime(float value);
  public:

  // uint32 blendFunction = 3;
  void clear_blendfunction();
  uint32_t blendfunction() const;
  void set_blendfunction(uint32_t value);
  private:
  uint32_t _internal_blendfunction() const;
  void _internal_set_blendfunction(uint32_t value);
  public:

  // float blendExp = 4;
  void clear_blendexp();
  float blendexp() const;
  void set_blendexp(float value);
  private:
  float _internal_blendexp() const;
  void _internal_set_blendexp(float value);
  public:

  // bool bLockOutgoing = 5;
  void clear_blockoutgoing();
  bool blockoutgoing() const;
  void set_blockoutgoing(bool value);
  private:
  bool _internal_blockoutgoing() const;
  void _internal_set_blockoutgoing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientSetViewTarget_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* actor_;
    float blendtime_;
    uint32_t blendfunction_;
    float blendexp_;
    bool blockoutgoing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientEnableNetworkVoice_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientEnableNetworkVoice_Params) */ {
 public:
  inline PlayerController_ClientEnableNetworkVoice_Params() : PlayerController_ClientEnableNetworkVoice_Params(nullptr) {}
  ~PlayerController_ClientEnableNetworkVoice_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientEnableNetworkVoice_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientEnableNetworkVoice_Params(const PlayerController_ClientEnableNetworkVoice_Params& from);
  PlayerController_ClientEnableNetworkVoice_Params(PlayerController_ClientEnableNetworkVoice_Params&& from) noexcept
    : PlayerController_ClientEnableNetworkVoice_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientEnableNetworkVoice_Params& operator=(const PlayerController_ClientEnableNetworkVoice_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientEnableNetworkVoice_Params& operator=(PlayerController_ClientEnableNetworkVoice_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientEnableNetworkVoice_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientEnableNetworkVoice_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientEnableNetworkVoice_Params*>(
               &_PlayerController_ClientEnableNetworkVoice_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PlayerController_ClientEnableNetworkVoice_Params& a, PlayerController_ClientEnableNetworkVoice_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientEnableNetworkVoice_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientEnableNetworkVoice_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientEnableNetworkVoice_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientEnableNetworkVoice_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientEnableNetworkVoice_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientEnableNetworkVoice_Params& from) {
    PlayerController_ClientEnableNetworkVoice_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientEnableNetworkVoice_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientEnableNetworkVoice_Params";
  }
  protected:
  explicit PlayerController_ClientEnableNetworkVoice_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  private:
  bool _internal_has_benable() const;
  public:
  void clear_benable();
  bool benable() const;
  void set_benable(bool value);
  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientEnableNetworkVoice_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientCapBandwidth_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientCapBandwidth_Params) */ {
 public:
  inline PlayerController_ClientCapBandwidth_Params() : PlayerController_ClientCapBandwidth_Params(nullptr) {}
  ~PlayerController_ClientCapBandwidth_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientCapBandwidth_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientCapBandwidth_Params(const PlayerController_ClientCapBandwidth_Params& from);
  PlayerController_ClientCapBandwidth_Params(PlayerController_ClientCapBandwidth_Params&& from) noexcept
    : PlayerController_ClientCapBandwidth_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientCapBandwidth_Params& operator=(const PlayerController_ClientCapBandwidth_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientCapBandwidth_Params& operator=(PlayerController_ClientCapBandwidth_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientCapBandwidth_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientCapBandwidth_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientCapBandwidth_Params*>(
               &_PlayerController_ClientCapBandwidth_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PlayerController_ClientCapBandwidth_Params& a, PlayerController_ClientCapBandwidth_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientCapBandwidth_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientCapBandwidth_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientCapBandwidth_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientCapBandwidth_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientCapBandwidth_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientCapBandwidth_Params& from) {
    PlayerController_ClientCapBandwidth_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientCapBandwidth_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientCapBandwidth_Params";
  }
  protected:
  explicit PlayerController_ClientCapBandwidth_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapFieldNumber = 1,
  };
  // int32 cap = 1;
  void clear_cap();
  int32_t cap() const;
  void set_cap(int32_t value);
  private:
  int32_t _internal_cap() const;
  void _internal_set_cap(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientCapBandwidth_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t cap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientRestart_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientRestart_Params) */ {
 public:
  inline PlayerController_ClientRestart_Params() : PlayerController_ClientRestart_Params(nullptr) {}
  ~PlayerController_ClientRestart_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientRestart_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientRestart_Params(const PlayerController_ClientRestart_Params& from);
  PlayerController_ClientRestart_Params(PlayerController_ClientRestart_Params&& from) noexcept
    : PlayerController_ClientRestart_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientRestart_Params& operator=(const PlayerController_ClientRestart_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientRestart_Params& operator=(PlayerController_ClientRestart_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientRestart_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientRestart_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientRestart_Params*>(
               &_PlayerController_ClientRestart_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PlayerController_ClientRestart_Params& a, PlayerController_ClientRestart_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientRestart_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientRestart_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientRestart_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientRestart_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientRestart_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientRestart_Params& from) {
    PlayerController_ClientRestart_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientRestart_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientRestart_Params";
  }
  protected:
  explicit PlayerController_ClientRestart_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPawnFieldNumber = 1,
  };
  // .unrealpb.UnrealObjectRef pawn = 1;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientRestart_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientSetCameraMode_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientSetCameraMode_Params) */ {
 public:
  inline PlayerController_ClientSetCameraMode_Params() : PlayerController_ClientSetCameraMode_Params(nullptr) {}
  ~PlayerController_ClientSetCameraMode_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientSetCameraMode_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientSetCameraMode_Params(const PlayerController_ClientSetCameraMode_Params& from);
  PlayerController_ClientSetCameraMode_Params(PlayerController_ClientSetCameraMode_Params&& from) noexcept
    : PlayerController_ClientSetCameraMode_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientSetCameraMode_Params& operator=(const PlayerController_ClientSetCameraMode_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientSetCameraMode_Params& operator=(PlayerController_ClientSetCameraMode_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientSetCameraMode_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientSetCameraMode_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientSetCameraMode_Params*>(
               &_PlayerController_ClientSetCameraMode_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PlayerController_ClientSetCameraMode_Params& a, PlayerController_ClientSetCameraMode_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientSetCameraMode_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientSetCameraMode_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientSetCameraMode_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientSetCameraMode_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientSetCameraMode_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientSetCameraMode_Params& from) {
    PlayerController_ClientSetCameraMode_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientSetCameraMode_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientSetCameraMode_Params";
  }
  protected:
  explicit PlayerController_ClientSetCameraMode_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewCamModeFieldNumber = 1,
  };
  // string newCamMode = 1;
  void clear_newcammode();
  const std::string& newcammode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newcammode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newcammode();
  PROTOBUF_NODISCARD std::string* release_newcammode();
  void set_allocated_newcammode(std::string* newcammode);
  private:
  const std::string& _internal_newcammode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newcammode(const std::string& value);
  std::string* _internal_mutable_newcammode();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientSetCameraMode_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcammode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ClientRetryClientRestart_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ClientRetryClientRestart_Params) */ {
 public:
  inline PlayerController_ClientRetryClientRestart_Params() : PlayerController_ClientRetryClientRestart_Params(nullptr) {}
  ~PlayerController_ClientRetryClientRestart_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ClientRetryClientRestart_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ClientRetryClientRestart_Params(const PlayerController_ClientRetryClientRestart_Params& from);
  PlayerController_ClientRetryClientRestart_Params(PlayerController_ClientRetryClientRestart_Params&& from) noexcept
    : PlayerController_ClientRetryClientRestart_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ClientRetryClientRestart_Params& operator=(const PlayerController_ClientRetryClientRestart_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ClientRetryClientRestart_Params& operator=(PlayerController_ClientRetryClientRestart_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ClientRetryClientRestart_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ClientRetryClientRestart_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ClientRetryClientRestart_Params*>(
               &_PlayerController_ClientRetryClientRestart_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PlayerController_ClientRetryClientRestart_Params& a, PlayerController_ClientRetryClientRestart_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ClientRetryClientRestart_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ClientRetryClientRestart_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ClientRetryClientRestart_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ClientRetryClientRestart_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ClientRetryClientRestart_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ClientRetryClientRestart_Params& from) {
    PlayerController_ClientRetryClientRestart_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ClientRetryClientRestart_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ClientRetryClientRestart_Params";
  }
  protected:
  explicit PlayerController_ClientRetryClientRestart_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPawnFieldNumber = 1,
  };
  // .unrealpb.UnrealObjectRef pawn = 1;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ClientRetryClientRestart_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerSetSpectatorLocation_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerSetSpectatorLocation_Params) */ {
 public:
  inline PlayerController_ServerSetSpectatorLocation_Params() : PlayerController_ServerSetSpectatorLocation_Params(nullptr) {}
  ~PlayerController_ServerSetSpectatorLocation_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerSetSpectatorLocation_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerSetSpectatorLocation_Params(const PlayerController_ServerSetSpectatorLocation_Params& from);
  PlayerController_ServerSetSpectatorLocation_Params(PlayerController_ServerSetSpectatorLocation_Params&& from) noexcept
    : PlayerController_ServerSetSpectatorLocation_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerSetSpectatorLocation_Params& operator=(const PlayerController_ServerSetSpectatorLocation_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerSetSpectatorLocation_Params& operator=(PlayerController_ServerSetSpectatorLocation_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerSetSpectatorLocation_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerSetSpectatorLocation_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerSetSpectatorLocation_Params*>(
               &_PlayerController_ServerSetSpectatorLocation_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PlayerController_ServerSetSpectatorLocation_Params& a, PlayerController_ServerSetSpectatorLocation_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerSetSpectatorLocation_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerSetSpectatorLocation_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerSetSpectatorLocation_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerSetSpectatorLocation_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerSetSpectatorLocation_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerSetSpectatorLocation_Params& from) {
    PlayerController_ServerSetSpectatorLocation_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerSetSpectatorLocation_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerSetSpectatorLocation_Params";
  }
  protected:
  explicit PlayerController_ServerSetSpectatorLocation_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLocFieldNumber = 1,
    kNewRotFieldNumber = 2,
  };
  // .unrealpb.FVector newLoc = 1;
  bool has_newloc() const;
  private:
  bool _internal_has_newloc() const;
  public:
  void clear_newloc();
  const ::unrealpb::FVector& newloc() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newloc();
  ::unrealpb::FVector* mutable_newloc();
  void set_allocated_newloc(::unrealpb::FVector* newloc);
  private:
  const ::unrealpb::FVector& _internal_newloc() const;
  ::unrealpb::FVector* _internal_mutable_newloc();
  public:
  void unsafe_arena_set_allocated_newloc(
      ::unrealpb::FVector* newloc);
  ::unrealpb::FVector* unsafe_arena_release_newloc();

  // .unrealpb.FVector newRot = 2;
  bool has_newrot() const;
  private:
  bool _internal_has_newrot() const;
  public:
  void clear_newrot();
  const ::unrealpb::FVector& newrot() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_newrot();
  ::unrealpb::FVector* mutable_newrot();
  void set_allocated_newrot(::unrealpb::FVector* newrot);
  private:
  const ::unrealpb::FVector& _internal_newrot() const;
  ::unrealpb::FVector* _internal_mutable_newrot();
  public:
  void unsafe_arena_set_allocated_newrot(
      ::unrealpb::FVector* newrot);
  ::unrealpb::FVector* unsafe_arena_release_newrot();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerSetSpectatorLocation_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* newloc_;
    ::unrealpb::FVector* newrot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerAcknowledgePossession_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerAcknowledgePossession_Params) */ {
 public:
  inline PlayerController_ServerAcknowledgePossession_Params() : PlayerController_ServerAcknowledgePossession_Params(nullptr) {}
  ~PlayerController_ServerAcknowledgePossession_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerAcknowledgePossession_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerAcknowledgePossession_Params(const PlayerController_ServerAcknowledgePossession_Params& from);
  PlayerController_ServerAcknowledgePossession_Params(PlayerController_ServerAcknowledgePossession_Params&& from) noexcept
    : PlayerController_ServerAcknowledgePossession_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerAcknowledgePossession_Params& operator=(const PlayerController_ServerAcknowledgePossession_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerAcknowledgePossession_Params& operator=(PlayerController_ServerAcknowledgePossession_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerAcknowledgePossession_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerAcknowledgePossession_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerAcknowledgePossession_Params*>(
               &_PlayerController_ServerAcknowledgePossession_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PlayerController_ServerAcknowledgePossession_Params& a, PlayerController_ServerAcknowledgePossession_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerAcknowledgePossession_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerAcknowledgePossession_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerAcknowledgePossession_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerAcknowledgePossession_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerAcknowledgePossession_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerAcknowledgePossession_Params& from) {
    PlayerController_ServerAcknowledgePossession_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerAcknowledgePossession_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerAcknowledgePossession_Params";
  }
  protected:
  explicit PlayerController_ServerAcknowledgePossession_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPawnFieldNumber = 1,
  };
  // .unrealpb.UnrealObjectRef pawn = 1;
  bool has_pawn() const;
  private:
  bool _internal_has_pawn() const;
  public:
  void clear_pawn();
  const ::unrealpb::UnrealObjectRef& pawn() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_pawn();
  ::unrealpb::UnrealObjectRef* mutable_pawn();
  void set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_pawn() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_pawn();
  public:
  void unsafe_arena_set_allocated_pawn(
      ::unrealpb::UnrealObjectRef* pawn);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_pawn();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerAcknowledgePossession_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::UnrealObjectRef* pawn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API GameStateBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.GameStateBase) */ {
 public:
  inline GameStateBase() : GameStateBase(nullptr) {}
  ~GameStateBase() override;
  explicit PROTOBUF_CONSTEXPR GameStateBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStateBase(const GameStateBase& from);
  GameStateBase(GameStateBase&& from) noexcept
    : GameStateBase() {
    *this = ::std::move(from);
  }

  inline GameStateBase& operator=(const GameStateBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateBase& operator=(GameStateBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStateBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStateBase* internal_default_instance() {
    return reinterpret_cast<const GameStateBase*>(
               &_GameStateBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GameStateBase& a, GameStateBase& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStateBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStateBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameStateBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameStateBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameStateBase& from) {
    GameStateBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStateBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.GameStateBase";
  }
  protected:
  explicit GameStateBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectatorClassNameFieldNumber = 1,
    kGameModeClassNameFieldNumber = 2,
    kReplicatedWorldTimeSecondsFieldNumber = 3,
    kBReplicatedHasBegunPlayFieldNumber = 4,
  };
  // optional string spectatorClassName = 1;
  bool has_spectatorclassname() const;
  private:
  bool _internal_has_spectatorclassname() const;
  public:
  void clear_spectatorclassname();
  const std::string& spectatorclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spectatorclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spectatorclassname();
  PROTOBUF_NODISCARD std::string* release_spectatorclassname();
  void set_allocated_spectatorclassname(std::string* spectatorclassname);
  private:
  const std::string& _internal_spectatorclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spectatorclassname(const std::string& value);
  std::string* _internal_mutable_spectatorclassname();
  public:

  // optional string gameModeClassName = 2;
  bool has_gamemodeclassname() const;
  private:
  bool _internal_has_gamemodeclassname() const;
  public:
  void clear_gamemodeclassname();
  const std::string& gamemodeclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamemodeclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamemodeclassname();
  PROTOBUF_NODISCARD std::string* release_gamemodeclassname();
  void set_allocated_gamemodeclassname(std::string* gamemodeclassname);
  private:
  const std::string& _internal_gamemodeclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamemodeclassname(const std::string& value);
  std::string* _internal_mutable_gamemodeclassname();
  public:

  // optional float replicatedWorldTimeSeconds = 3;
  bool has_replicatedworldtimeseconds() const;
  private:
  bool _internal_has_replicatedworldtimeseconds() const;
  public:
  void clear_replicatedworldtimeseconds();
  float replicatedworldtimeseconds() const;
  void set_replicatedworldtimeseconds(float value);
  private:
  float _internal_replicatedworldtimeseconds() const;
  void _internal_set_replicatedworldtimeseconds(float value);
  public:

  // optional bool bReplicatedHasBegunPlay = 4;
  bool has_breplicatedhasbegunplay() const;
  private:
  bool _internal_has_breplicatedhasbegunplay() const;
  public:
  void clear_breplicatedhasbegunplay();
  bool breplicatedhasbegunplay() const;
  void set_breplicatedhasbegunplay(bool value);
  private:
  bool _internal_breplicatedhasbegunplay() const;
  void _internal_set_breplicatedhasbegunplay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.GameStateBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spectatorclassname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemodeclassname_;
    float replicatedworldtimeseconds_;
    bool breplicatedhasbegunplay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FVector

// float x = 1;
inline void FVector::clear_x() {
  _impl_.x_ = 0;
}
inline float FVector::_internal_x() const {
  return _impl_.x_;
}
inline float FVector::x() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.x)
  return _internal_x();
}
inline void FVector::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void FVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.x)
}

// float y = 2;
inline void FVector::clear_y() {
  _impl_.y_ = 0;
}
inline float FVector::_internal_y() const {
  return _impl_.y_;
}
inline float FVector::y() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.y)
  return _internal_y();
}
inline void FVector::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void FVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.y)
}

// float z = 3;
inline void FVector::clear_z() {
  _impl_.z_ = 0;
}
inline float FVector::_internal_z() const {
  return _impl_.z_;
}
inline float FVector::z() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.z)
  return _internal_z();
}
inline void FVector::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void FVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.z)
}

// -------------------------------------------------------------------

// UnrealObjectRef_GuidCachedObject

// uint32 netGUID = 1;
inline void UnrealObjectRef_GuidCachedObject::clear_netguid() {
  _impl_.netguid_ = 0u;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::_internal_netguid() const {
  return _impl_.netguid_;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::netguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.GuidCachedObject.netGUID)
  return _internal_netguid();
}
inline void UnrealObjectRef_GuidCachedObject::_internal_set_netguid(uint32_t value) {
  
  _impl_.netguid_ = value;
}
inline void UnrealObjectRef_GuidCachedObject::set_netguid(uint32_t value) {
  _internal_set_netguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.GuidCachedObject.netGUID)
}

// string pathName = 2;
inline void UnrealObjectRef_GuidCachedObject::clear_pathname() {
  _impl_.pathname_.ClearToEmpty();
}
inline const std::string& UnrealObjectRef_GuidCachedObject::pathname() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
  return _internal_pathname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnrealObjectRef_GuidCachedObject::set_pathname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pathname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
}
inline std::string* UnrealObjectRef_GuidCachedObject::mutable_pathname() {
  std::string* _s = _internal_mutable_pathname();
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
  return _s;
}
inline const std::string& UnrealObjectRef_GuidCachedObject::_internal_pathname() const {
  return _impl_.pathname_.Get();
}
inline void UnrealObjectRef_GuidCachedObject::_internal_set_pathname(const std::string& value) {
  
  _impl_.pathname_.Set(value, GetArenaForAllocation());
}
inline std::string* UnrealObjectRef_GuidCachedObject::_internal_mutable_pathname() {
  
  return _impl_.pathname_.Mutable(GetArenaForAllocation());
}
inline std::string* UnrealObjectRef_GuidCachedObject::release_pathname() {
  // @@protoc_insertion_point(field_release:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
  return _impl_.pathname_.Release();
}
inline void UnrealObjectRef_GuidCachedObject::set_allocated_pathname(std::string* pathname) {
  if (pathname != nullptr) {
    
  } else {
    
  }
  _impl_.pathname_.SetAllocated(pathname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pathname_.IsDefault()) {
    _impl_.pathname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.UnrealObjectRef.GuidCachedObject.pathName)
}

// uint32 outerGUID = 3;
inline void UnrealObjectRef_GuidCachedObject::clear_outerguid() {
  _impl_.outerguid_ = 0u;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::_internal_outerguid() const {
  return _impl_.outerguid_;
}
inline uint32_t UnrealObjectRef_GuidCachedObject::outerguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.GuidCachedObject.outerGUID)
  return _internal_outerguid();
}
inline void UnrealObjectRef_GuidCachedObject::_internal_set_outerguid(uint32_t value) {
  
  _impl_.outerguid_ = value;
}
inline void UnrealObjectRef_GuidCachedObject::set_outerguid(uint32_t value) {
  _internal_set_outerguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.GuidCachedObject.outerGUID)
}

// -------------------------------------------------------------------

// UnrealObjectRef

// uint32 netGUID = 1;
inline void UnrealObjectRef::clear_netguid() {
  _impl_.netguid_ = 0u;
}
inline uint32_t UnrealObjectRef::_internal_netguid() const {
  return _impl_.netguid_;
}
inline uint32_t UnrealObjectRef::netguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.netGUID)
  return _internal_netguid();
}
inline void UnrealObjectRef::_internal_set_netguid(uint32_t value) {
  
  _impl_.netguid_ = value;
}
inline void UnrealObjectRef::set_netguid(uint32_t value) {
  _internal_set_netguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.netGUID)
}

// repeated .unrealpb.UnrealObjectRef.GuidCachedObject context = 2;
inline int UnrealObjectRef::_internal_context_size() const {
  return _impl_.context_.size();
}
inline int UnrealObjectRef::context_size() const {
  return _internal_context_size();
}
inline void UnrealObjectRef::clear_context() {
  _impl_.context_.Clear();
}
inline ::unrealpb::UnrealObjectRef_GuidCachedObject* UnrealObjectRef::mutable_context(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.context)
  return _impl_.context_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >*
UnrealObjectRef::mutable_context() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.UnrealObjectRef.context)
  return &_impl_.context_;
}
inline const ::unrealpb::UnrealObjectRef_GuidCachedObject& UnrealObjectRef::_internal_context(int index) const {
  return _impl_.context_.Get(index);
}
inline const ::unrealpb::UnrealObjectRef_GuidCachedObject& UnrealObjectRef::context(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.context)
  return _internal_context(index);
}
inline ::unrealpb::UnrealObjectRef_GuidCachedObject* UnrealObjectRef::_internal_add_context() {
  return _impl_.context_.Add();
}
inline ::unrealpb::UnrealObjectRef_GuidCachedObject* UnrealObjectRef::add_context() {
  ::unrealpb::UnrealObjectRef_GuidCachedObject* _add = _internal_add_context();
  // @@protoc_insertion_point(field_add:unrealpb.UnrealObjectRef.context)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef_GuidCachedObject >&
UnrealObjectRef::context() const {
  // @@protoc_insertion_point(field_list:unrealpb.UnrealObjectRef.context)
  return _impl_.context_;
}

// bytes netGUIDBunch = 3;
inline void UnrealObjectRef::clear_netguidbunch() {
  _impl_.netguidbunch_.ClearToEmpty();
}
inline const std::string& UnrealObjectRef::netguidbunch() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.netGUIDBunch)
  return _internal_netguidbunch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnrealObjectRef::set_netguidbunch(ArgT0&& arg0, ArgT... args) {
 
 _impl_.netguidbunch_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.netGUIDBunch)
}
inline std::string* UnrealObjectRef::mutable_netguidbunch() {
  std::string* _s = _internal_mutable_netguidbunch();
  // @@protoc_insertion_point(field_mutable:unrealpb.UnrealObjectRef.netGUIDBunch)
  return _s;
}
inline const std::string& UnrealObjectRef::_internal_netguidbunch() const {
  return _impl_.netguidbunch_.Get();
}
inline void UnrealObjectRef::_internal_set_netguidbunch(const std::string& value) {
  
  _impl_.netguidbunch_.Set(value, GetArenaForAllocation());
}
inline std::string* UnrealObjectRef::_internal_mutable_netguidbunch() {
  
  return _impl_.netguidbunch_.Mutable(GetArenaForAllocation());
}
inline std::string* UnrealObjectRef::release_netguidbunch() {
  // @@protoc_insertion_point(field_release:unrealpb.UnrealObjectRef.netGUIDBunch)
  return _impl_.netguidbunch_.Release();
}
inline void UnrealObjectRef::set_allocated_netguidbunch(std::string* netguidbunch) {
  if (netguidbunch != nullptr) {
    
  } else {
    
  }
  _impl_.netguidbunch_.SetAllocated(netguidbunch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.netguidbunch_.IsDefault()) {
    _impl_.netguidbunch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.UnrealObjectRef.netGUIDBunch)
}

// uint32 bunchBitsNum = 4;
inline void UnrealObjectRef::clear_bunchbitsnum() {
  _impl_.bunchbitsnum_ = 0u;
}
inline uint32_t UnrealObjectRef::_internal_bunchbitsnum() const {
  return _impl_.bunchbitsnum_;
}
inline uint32_t UnrealObjectRef::bunchbitsnum() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.bunchBitsNum)
  return _internal_bunchbitsnum();
}
inline void UnrealObjectRef::_internal_set_bunchbitsnum(uint32_t value) {
  
  _impl_.bunchbitsnum_ = value;
}
inline void UnrealObjectRef::set_bunchbitsnum(uint32_t value) {
  _internal_set_bunchbitsnum(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.bunchBitsNum)
}

// -------------------------------------------------------------------

// RemoteFunctionMessage

// .unrealpb.UnrealObjectRef targetObj = 1;
inline bool RemoteFunctionMessage::_internal_has_targetobj() const {
  return this != internal_default_instance() && _impl_.targetobj_ != nullptr;
}
inline bool RemoteFunctionMessage::has_targetobj() const {
  return _internal_has_targetobj();
}
inline void RemoteFunctionMessage::clear_targetobj() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetobj_ != nullptr) {
    delete _impl_.targetobj_;
  }
  _impl_.targetobj_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& RemoteFunctionMessage::_internal_targetobj() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.targetobj_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& RemoteFunctionMessage::targetobj() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.targetObj)
  return _internal_targetobj();
}
inline void RemoteFunctionMessage::unsafe_arena_set_allocated_targetobj(
    ::unrealpb::UnrealObjectRef* targetobj) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetobj_);
  }
  _impl_.targetobj_ = targetobj;
  if (targetobj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.RemoteFunctionMessage.targetObj)
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::release_targetobj() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.targetobj_;
  _impl_.targetobj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::unsafe_arena_release_targetobj() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.targetObj)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.targetobj_;
  _impl_.targetobj_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::_internal_mutable_targetobj() {
  
  if (_impl_.targetobj_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.targetobj_ = p;
  }
  return _impl_.targetobj_;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::mutable_targetobj() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_targetobj();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.targetObj)
  return _msg;
}
inline void RemoteFunctionMessage::set_allocated_targetobj(::unrealpb::UnrealObjectRef* targetobj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetobj_;
  }
  if (targetobj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetobj);
    if (message_arena != submessage_arena) {
      targetobj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetobj, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.targetobj_ = targetobj;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.targetObj)
}

// string functionName = 2;
inline void RemoteFunctionMessage::clear_functionname() {
  _impl_.functionname_.ClearToEmpty();
}
inline const std::string& RemoteFunctionMessage::functionname() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.functionName)
  return _internal_functionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteFunctionMessage::set_functionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.functionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.functionName)
}
inline std::string* RemoteFunctionMessage::mutable_functionname() {
  std::string* _s = _internal_mutable_functionname();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.functionName)
  return _s;
}
inline const std::string& RemoteFunctionMessage::_internal_functionname() const {
  return _impl_.functionname_.Get();
}
inline void RemoteFunctionMessage::_internal_set_functionname(const std::string& value) {
  
  _impl_.functionname_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::_internal_mutable_functionname() {
  
  return _impl_.functionname_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::release_functionname() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.functionName)
  return _impl_.functionname_.Release();
}
inline void RemoteFunctionMessage::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  _impl_.functionname_.SetAllocated(functionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.functionname_.IsDefault()) {
    _impl_.functionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.functionName)
}

// bytes paramsPayload = 3;
inline void RemoteFunctionMessage::clear_paramspayload() {
  _impl_.paramspayload_.ClearToEmpty();
}
inline const std::string& RemoteFunctionMessage::paramspayload() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _internal_paramspayload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteFunctionMessage::set_paramspayload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramspayload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.paramsPayload)
}
inline std::string* RemoteFunctionMessage::mutable_paramspayload() {
  std::string* _s = _internal_mutable_paramspayload();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _s;
}
inline const std::string& RemoteFunctionMessage::_internal_paramspayload() const {
  return _impl_.paramspayload_.Get();
}
inline void RemoteFunctionMessage::_internal_set_paramspayload(const std::string& value) {
  
  _impl_.paramspayload_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::_internal_mutable_paramspayload() {
  
  return _impl_.paramspayload_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::release_paramspayload() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _impl_.paramspayload_.Release();
}
inline void RemoteFunctionMessage::set_allocated_paramspayload(std::string* paramspayload) {
  if (paramspayload != nullptr) {
    
  } else {
    
  }
  _impl_.paramspayload_.SetAllocated(paramspayload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramspayload_.IsDefault()) {
    _impl_.paramspayload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.paramsPayload)
}

// -------------------------------------------------------------------

// ActorComponentState

// optional bool bIsActive = 1;
inline bool ActorComponentState::_internal_has_bisactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActorComponentState::has_bisactive() const {
  return _internal_has_bisactive();
}
inline void ActorComponentState::clear_bisactive() {
  _impl_.bisactive_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ActorComponentState::_internal_bisactive() const {
  return _impl_.bisactive_;
}
inline bool ActorComponentState::bisactive() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentState.bIsActive)
  return _internal_bisactive();
}
inline void ActorComponentState::_internal_set_bisactive(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bisactive_ = value;
}
inline void ActorComponentState::set_bisactive(bool value) {
  _internal_set_bisactive(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorComponentState.bIsActive)
}

// optional bool bReplicated = 2;
inline bool ActorComponentState::_internal_has_breplicated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ActorComponentState::has_breplicated() const {
  return _internal_has_breplicated();
}
inline void ActorComponentState::clear_breplicated() {
  _impl_.breplicated_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ActorComponentState::_internal_breplicated() const {
  return _impl_.breplicated_;
}
inline bool ActorComponentState::breplicated() const {
  // @@protoc_insertion_point(field_get:unrealpb.ActorComponentState.bReplicated)
  return _internal_breplicated();
}
inline void ActorComponentState::_internal_set_breplicated(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.breplicated_ = value;
}
inline void ActorComponentState::set_breplicated(bool value) {
  _internal_set_breplicated(value);
  // @@protoc_insertion_point(field_set:unrealpb.ActorComponentState.bReplicated)
}

// -------------------------------------------------------------------

// SceneComponentState

// bool removed = 1;
inline void SceneComponentState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool SceneComponentState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool SceneComponentState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.removed)
  return _internal_removed();
}
inline void SceneComponentState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void SceneComponentState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.removed)
}

// optional bool bAbsoluteLocation = 2;
inline bool SceneComponentState::_internal_has_babsolutelocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SceneComponentState::has_babsolutelocation() const {
  return _internal_has_babsolutelocation();
}
inline void SceneComponentState::clear_babsolutelocation() {
  _impl_.babsolutelocation_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool SceneComponentState::_internal_babsolutelocation() const {
  return _impl_.babsolutelocation_;
}
inline bool SceneComponentState::babsolutelocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteLocation)
  return _internal_babsolutelocation();
}
inline void SceneComponentState::_internal_set_babsolutelocation(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.babsolutelocation_ = value;
}
inline void SceneComponentState::set_babsolutelocation(bool value) {
  _internal_set_babsolutelocation(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteLocation)
}

// optional bool bAbsoluteRotation = 3;
inline bool SceneComponentState::_internal_has_babsoluterotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SceneComponentState::has_babsoluterotation() const {
  return _internal_has_babsoluterotation();
}
inline void SceneComponentState::clear_babsoluterotation() {
  _impl_.babsoluterotation_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool SceneComponentState::_internal_babsoluterotation() const {
  return _impl_.babsoluterotation_;
}
inline bool SceneComponentState::babsoluterotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteRotation)
  return _internal_babsoluterotation();
}
inline void SceneComponentState::_internal_set_babsoluterotation(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.babsoluterotation_ = value;
}
inline void SceneComponentState::set_babsoluterotation(bool value) {
  _internal_set_babsoluterotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteRotation)
}

// optional bool bAbsoluteScale = 4;
inline bool SceneComponentState::_internal_has_babsolutescale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SceneComponentState::has_babsolutescale() const {
  return _internal_has_babsolutescale();
}
inline void SceneComponentState::clear_babsolutescale() {
  _impl_.babsolutescale_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool SceneComponentState::_internal_babsolutescale() const {
  return _impl_.babsolutescale_;
}
inline bool SceneComponentState::babsolutescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteScale)
  return _internal_babsolutescale();
}
inline void SceneComponentState::_internal_set_babsolutescale(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.babsolutescale_ = value;
}
inline void SceneComponentState::set_babsolutescale(bool value) {
  _internal_set_babsolutescale(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteScale)
}

// optional bool bVisible = 5;
inline bool SceneComponentState::_internal_has_bvisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SceneComponentState::has_bvisible() const {
  return _internal_has_bvisible();
}
inline void SceneComponentState::clear_bvisible() {
  _impl_.bvisible_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool SceneComponentState::_internal_bvisible() const {
  return _impl_.bvisible_;
}
inline bool SceneComponentState::bvisible() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bVisible)
  return _internal_bvisible();
}
inline void SceneComponentState::_internal_set_bvisible(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.bvisible_ = value;
}
inline void SceneComponentState::set_bvisible(bool value) {
  _internal_set_bvisible(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bVisible)
}

// optional bool bShouldBeAttached = 6;
inline bool SceneComponentState::_internal_has_bshouldbeattached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SceneComponentState::has_bshouldbeattached() const {
  return _internal_has_bshouldbeattached();
}
inline void SceneComponentState::clear_bshouldbeattached() {
  _impl_.bshouldbeattached_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool SceneComponentState::_internal_bshouldbeattached() const {
  return _impl_.bshouldbeattached_;
}
inline bool SceneComponentState::bshouldbeattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldBeAttached)
  return _internal_bshouldbeattached();
}
inline void SceneComponentState::_internal_set_bshouldbeattached(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bshouldbeattached_ = value;
}
inline void SceneComponentState::set_bshouldbeattached(bool value) {
  _internal_set_bshouldbeattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldBeAttached)
}

// optional bool bShouldSnapLocationWhenAttached = 7;
inline bool SceneComponentState::_internal_has_bshouldsnaplocationwhenattached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SceneComponentState::has_bshouldsnaplocationwhenattached() const {
  return _internal_has_bshouldsnaplocationwhenattached();
}
inline void SceneComponentState::clear_bshouldsnaplocationwhenattached() {
  _impl_.bshouldsnaplocationwhenattached_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool SceneComponentState::_internal_bshouldsnaplocationwhenattached() const {
  return _impl_.bshouldsnaplocationwhenattached_;
}
inline bool SceneComponentState::bshouldsnaplocationwhenattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldSnapLocationWhenAttached)
  return _internal_bshouldsnaplocationwhenattached();
}
inline void SceneComponentState::_internal_set_bshouldsnaplocationwhenattached(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bshouldsnaplocationwhenattached_ = value;
}
inline void SceneComponentState::set_bshouldsnaplocationwhenattached(bool value) {
  _internal_set_bshouldsnaplocationwhenattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldSnapLocationWhenAttached)
}

// optional bool bShouldSnapRotationWhenAttached = 8;
inline bool SceneComponentState::_internal_has_bshouldsnaprotationwhenattached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SceneComponentState::has_bshouldsnaprotationwhenattached() const {
  return _internal_has_bshouldsnaprotationwhenattached();
}
inline void SceneComponentState::clear_bshouldsnaprotationwhenattached() {
  _impl_.bshouldsnaprotationwhenattached_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool SceneComponentState::_internal_bshouldsnaprotationwhenattached() const {
  return _impl_.bshouldsnaprotationwhenattached_;
}
inline bool SceneComponentState::bshouldsnaprotationwhenattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldSnapRotationWhenAttached)
  return _internal_bshouldsnaprotationwhenattached();
}
inline void SceneComponentState::_internal_set_bshouldsnaprotationwhenattached(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bshouldsnaprotationwhenattached_ = value;
}
inline void SceneComponentState::set_bshouldsnaprotationwhenattached(bool value) {
  _internal_set_bshouldsnaprotationwhenattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldSnapRotationWhenAttached)
}

// optional .unrealpb.UnrealObjectRef attachParent = 9;
inline bool SceneComponentState::_internal_has_attachparent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attachparent_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_attachparent() const {
  return _internal_has_attachparent();
}
inline void SceneComponentState::clear_attachparent() {
  if (_impl_.attachparent_ != nullptr) _impl_.attachparent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::_internal_attachparent() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.attachparent_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::attachparent() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachParent)
  return _internal_attachparent();
}
inline void SceneComponentState::unsafe_arena_set_allocated_attachparent(
    ::unrealpb::UnrealObjectRef* attachparent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachparent_);
  }
  _impl_.attachparent_ = attachparent;
  if (attachparent) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.attachParent)
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::release_attachparent() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::unsafe_arena_release_attachparent() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.attachParent)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::_internal_mutable_attachparent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.attachparent_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.attachparent_ = p;
  }
  return _impl_.attachparent_;
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::mutable_attachparent() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_attachparent();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachParent)
  return _msg;
}
inline void SceneComponentState::set_allocated_attachparent(::unrealpb::UnrealObjectRef* attachparent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attachparent_;
  }
  if (attachparent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attachparent);
    if (message_arena != submessage_arena) {
      attachparent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachparent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attachparent_ = attachparent;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.attachParent)
}

// repeated .unrealpb.UnrealObjectRef attachChildren = 10;
inline int SceneComponentState::_internal_attachchildren_size() const {
  return _impl_.attachchildren_.size();
}
inline int SceneComponentState::attachchildren_size() const {
  return _internal_attachchildren_size();
}
inline void SceneComponentState::clear_attachchildren() {
  _impl_.attachchildren_.Clear();
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::mutable_attachchildren(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachChildren)
  return _impl_.attachchildren_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >*
SceneComponentState::mutable_attachchildren() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.SceneComponentState.attachChildren)
  return &_impl_.attachchildren_;
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::_internal_attachchildren(int index) const {
  return _impl_.attachchildren_.Get(index);
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::attachchildren(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachChildren)
  return _internal_attachchildren(index);
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::_internal_add_attachchildren() {
  return _impl_.attachchildren_.Add();
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::add_attachchildren() {
  ::unrealpb::UnrealObjectRef* _add = _internal_add_attachchildren();
  // @@protoc_insertion_point(field_add:unrealpb.SceneComponentState.attachChildren)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >&
SceneComponentState::attachchildren() const {
  // @@protoc_insertion_point(field_list:unrealpb.SceneComponentState.attachChildren)
  return _impl_.attachchildren_;
}

// optional string attachSocketName = 11;
inline bool SceneComponentState::_internal_has_attachsocketname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SceneComponentState::has_attachsocketname() const {
  return _internal_has_attachsocketname();
}
inline void SceneComponentState::clear_attachsocketname() {
  _impl_.attachsocketname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SceneComponentState::attachsocketname() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachSocketName)
  return _internal_attachsocketname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneComponentState::set_attachsocketname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attachsocketname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.attachSocketName)
}
inline std::string* SceneComponentState::mutable_attachsocketname() {
  std::string* _s = _internal_mutable_attachsocketname();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachSocketName)
  return _s;
}
inline const std::string& SceneComponentState::_internal_attachsocketname() const {
  return _impl_.attachsocketname_.Get();
}
inline void SceneComponentState::_internal_set_attachsocketname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attachsocketname_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneComponentState::_internal_mutable_attachsocketname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attachsocketname_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneComponentState::release_attachsocketname() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.attachSocketName)
  if (!_internal_has_attachsocketname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attachsocketname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocketname_.IsDefault()) {
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SceneComponentState::set_allocated_attachsocketname(std::string* attachsocketname) {
  if (attachsocketname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attachsocketname_.SetAllocated(attachsocketname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocketname_.IsDefault()) {
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.attachSocketName)
}

// optional .unrealpb.FVector relativeLocation = 12;
inline bool SceneComponentState::_internal_has_relativelocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativelocation_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_relativelocation() const {
  return _internal_has_relativelocation();
}
inline void SceneComponentState::clear_relativelocation() {
  if (_impl_.relativelocation_ != nullptr) _impl_.relativelocation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativelocation() const {
  const ::unrealpb::FVector* p = _impl_.relativelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativelocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeLocation)
  return _internal_relativelocation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativelocation(
    ::unrealpb::FVector* relativelocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativelocation_);
  }
  _impl_.relativelocation_ = relativelocation;
  if (relativelocation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeLocation)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativelocation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativelocation() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeLocation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativelocation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.relativelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativelocation_ = p;
  }
  return _impl_.relativelocation_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativelocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativelocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeLocation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativelocation(::unrealpb::FVector* relativelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativelocation_;
  }
  if (relativelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativelocation);
    if (message_arena != submessage_arena) {
      relativelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativelocation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.relativelocation_ = relativelocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeLocation)
}

// optional .unrealpb.FVector relativeRotation = 13;
inline bool SceneComponentState::_internal_has_relativerotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativerotation_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_relativerotation() const {
  return _internal_has_relativerotation();
}
inline void SceneComponentState::clear_relativerotation() {
  if (_impl_.relativerotation_ != nullptr) _impl_.relativerotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativerotation() const {
  const ::unrealpb::FVector* p = _impl_.relativerotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeRotation)
  return _internal_relativerotation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativerotation(
    ::unrealpb::FVector* relativerotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativerotation_);
  }
  _impl_.relativerotation_ = relativerotation;
  if (relativerotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeRotation)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativerotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativerotation() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeRotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativerotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.relativerotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativerotation_ = p;
  }
  return _impl_.relativerotation_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativerotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativerotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeRotation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativerotation(::unrealpb::FVector* relativerotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativerotation_;
  }
  if (relativerotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativerotation);
    if (message_arena != submessage_arena) {
      relativerotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativerotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.relativerotation_ = relativerotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeRotation)
}

// optional .unrealpb.FVector relativeScale = 14;
inline bool SceneComponentState::_internal_has_relativescale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relativescale_ != nullptr);
  return value;
}
inline bool SceneComponentState::has_relativescale() const {
  return _internal_has_relativescale();
}
inline void SceneComponentState::clear_relativescale() {
  if (_impl_.relativescale_ != nullptr) _impl_.relativescale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativescale() const {
  const ::unrealpb::FVector* p = _impl_.relativescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeScale)
  return _internal_relativescale();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativescale(
    ::unrealpb::FVector* relativescale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativescale_);
  }
  _impl_.relativescale_ = relativescale;
  if (relativescale) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeScale)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativescale() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativescale() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeScale)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativescale() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.relativescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativescale_ = p;
  }
  return _impl_.relativescale_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativescale() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativescale();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeScale)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativescale(::unrealpb::FVector* relativescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativescale_;
  }
  if (relativescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativescale);
    if (message_arena != submessage_arena) {
      relativescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativescale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.relativescale_ = relativescale;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeScale)
}

// -------------------------------------------------------------------

// RootMotionMontage

// -------------------------------------------------------------------

// BasedMovementInfo

// optional .unrealpb.UnrealObjectRef movementBase = 1;
inline bool BasedMovementInfo::_internal_has_movementbase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movementbase_ != nullptr);
  return value;
}
inline bool BasedMovementInfo::has_movementbase() const {
  return _internal_has_movementbase();
}
inline void BasedMovementInfo::clear_movementbase() {
  if (_impl_.movementbase_ != nullptr) _impl_.movementbase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::UnrealObjectRef& BasedMovementInfo::_internal_movementbase() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.movementbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& BasedMovementInfo::movementbase() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.movementBase)
  return _internal_movementbase();
}
inline void BasedMovementInfo::unsafe_arena_set_allocated_movementbase(
    ::unrealpb::UnrealObjectRef* movementbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movementbase_);
  }
  _impl_.movementbase_ = movementbase;
  if (movementbase) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.BasedMovementInfo.movementBase)
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::release_movementbase() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::unsafe_arena_release_movementbase() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.movementBase)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::UnrealObjectRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::_internal_mutable_movementbase() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.movementbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.movementbase_ = p;
  }
  return _impl_.movementbase_;
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::mutable_movementbase() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_movementbase();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.movementBase)
  return _msg;
}
inline void BasedMovementInfo::set_allocated_movementbase(::unrealpb::UnrealObjectRef* movementbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.movementbase_;
  }
  if (movementbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movementbase);
    if (message_arena != submessage_arena) {
      movementbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movementbase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.movementbase_ = movementbase;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.movementBase)
}

// optional string boneName = 2;
inline bool BasedMovementInfo::_internal_has_bonename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BasedMovementInfo::has_bonename() const {
  return _internal_has_bonename();
}
inline void BasedMovementInfo::clear_bonename() {
  _impl_.bonename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BasedMovementInfo::bonename() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.boneName)
  return _internal_bonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BasedMovementInfo::set_bonename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.bonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.boneName)
}
inline std::string* BasedMovementInfo::mutable_bonename() {
  std::string* _s = _internal_mutable_bonename();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.boneName)
  return _s;
}
inline const std::string& BasedMovementInfo::_internal_bonename() const {
  return _impl_.bonename_.Get();
}
inline void BasedMovementInfo::_internal_set_bonename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bonename_.Set(value, GetArenaForAllocation());
}
inline std::string* BasedMovementInfo::_internal_mutable_bonename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.bonename_.Mutable(GetArenaForAllocation());
}
inline std::string* BasedMovementInfo::release_bonename() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.boneName)
  if (!_internal_has_bonename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.bonename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bonename_.IsDefault()) {
    _impl_.bonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BasedMovementInfo::set_allocated_bonename(std::string* bonename) {
  if (bonename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bonename_.SetAllocated(bonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bonename_.IsDefault()) {
    _impl_.bonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.boneName)
}

// optional .unrealpb.FVector location = 3;
inline bool BasedMovementInfo::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool BasedMovementInfo::has_location() const {
  return _internal_has_location();
}
inline void BasedMovementInfo::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::unrealpb::FVector& BasedMovementInfo::_internal_location() const {
  const ::unrealpb::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& BasedMovementInfo::location() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.location)
  return _internal_location();
}
inline void BasedMovementInfo::unsafe_arena_set_allocated_location(
    ::unrealpb::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.BasedMovementInfo.location)
}
inline ::unrealpb::FVector* BasedMovementInfo::release_location() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.location)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::unrealpb::FVector* BasedMovementInfo::mutable_location() {
  ::unrealpb::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.location)
  return _msg;
}
inline void BasedMovementInfo::set_allocated_location(::unrealpb::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.location)
}

// optional .unrealpb.FVector rotation = 4;
inline bool BasedMovementInfo::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool BasedMovementInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void BasedMovementInfo::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::unrealpb::FVector& BasedMovementInfo::_internal_rotation() const {
  const ::unrealpb::FVector* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& BasedMovementInfo::rotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.rotation)
  return _internal_rotation();
}
inline void BasedMovementInfo::unsafe_arena_set_allocated_rotation(
    ::unrealpb::FVector* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.BasedMovementInfo.rotation)
}
inline ::unrealpb::FVector* BasedMovementInfo::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.rotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::unrealpb::FVector* BasedMovementInfo::mutable_rotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.rotation)
  return _msg;
}
inline void BasedMovementInfo::set_allocated_rotation(::unrealpb::FVector* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.rotation)
}

// optional bool bServerHasBaseComponent = 5;
inline bool BasedMovementInfo::_internal_has_bserverhasbasecomponent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BasedMovementInfo::has_bserverhasbasecomponent() const {
  return _internal_has_bserverhasbasecomponent();
}
inline void BasedMovementInfo::clear_bserverhasbasecomponent() {
  _impl_.bserverhasbasecomponent_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool BasedMovementInfo::_internal_bserverhasbasecomponent() const {
  return _impl_.bserverhasbasecomponent_;
}
inline bool BasedMovementInfo::bserverhasbasecomponent() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.bServerHasBaseComponent)
  return _internal_bserverhasbasecomponent();
}
inline void BasedMovementInfo::_internal_set_bserverhasbasecomponent(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bserverhasbasecomponent_ = value;
}
inline void BasedMovementInfo::set_bserverhasbasecomponent(bool value) {
  _internal_set_bserverhasbasecomponent(value);
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.bServerHasBaseComponent)
}

// optional bool bRelativeRotation = 6;
inline bool BasedMovementInfo::_internal_has_brelativerotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BasedMovementInfo::has_brelativerotation() const {
  return _internal_has_brelativerotation();
}
inline void BasedMovementInfo::clear_brelativerotation() {
  _impl_.brelativerotation_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool BasedMovementInfo::_internal_brelativerotation() const {
  return _impl_.brelativerotation_;
}
inline bool BasedMovementInfo::brelativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.bRelativeRotation)
  return _internal_brelativerotation();
}
inline void BasedMovementInfo::_internal_set_brelativerotation(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.brelativerotation_ = value;
}
inline void BasedMovementInfo::set_brelativerotation(bool value) {
  _internal_set_brelativerotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.bRelativeRotation)
}

// optional bool bServerHasVelocity = 7;
inline bool BasedMovementInfo::_internal_has_bserverhasvelocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BasedMovementInfo::has_bserverhasvelocity() const {
  return _internal_has_bserverhasvelocity();
}
inline void BasedMovementInfo::clear_bserverhasvelocity() {
  _impl_.bserverhasvelocity_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool BasedMovementInfo::_internal_bserverhasvelocity() const {
  return _impl_.bserverhasvelocity_;
}
inline bool BasedMovementInfo::bserverhasvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.bServerHasVelocity)
  return _internal_bserverhasvelocity();
}
inline void BasedMovementInfo::_internal_set_bserverhasvelocity(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bserverhasvelocity_ = value;
}
inline void BasedMovementInfo::set_bserverhasvelocity(bool value) {
  _internal_set_bserverhasvelocity(value);
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.bServerHasVelocity)
}

// -------------------------------------------------------------------

// CharacterState

// bool removed = 1;
inline void CharacterState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool CharacterState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool CharacterState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.removed)
  return _internal_removed();
}
inline void CharacterState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void CharacterState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.removed)
}

// optional .unrealpb.RootMotionMontage rootMotion = 2;
inline bool CharacterState::_internal_has_rootmotion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rootmotion_ != nullptr);
  return value;
}
inline bool CharacterState::has_rootmotion() const {
  return _internal_has_rootmotion();
}
inline void CharacterState::clear_rootmotion() {
  if (_impl_.rootmotion_ != nullptr) _impl_.rootmotion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::RootMotionMontage& CharacterState::_internal_rootmotion() const {
  const ::unrealpb::RootMotionMontage* p = _impl_.rootmotion_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::RootMotionMontage&>(
      ::unrealpb::_RootMotionMontage_default_instance_);
}
inline const ::unrealpb::RootMotionMontage& CharacterState::rootmotion() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.rootMotion)
  return _internal_rootmotion();
}
inline void CharacterState::unsafe_arena_set_allocated_rootmotion(
    ::unrealpb::RootMotionMontage* rootmotion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootmotion_);
  }
  _impl_.rootmotion_ = rootmotion;
  if (rootmotion) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.CharacterState.rootMotion)
}
inline ::unrealpb::RootMotionMontage* CharacterState::release_rootmotion() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::RootMotionMontage* temp = _impl_.rootmotion_;
  _impl_.rootmotion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::RootMotionMontage* CharacterState::unsafe_arena_release_rootmotion() {
  // @@protoc_insertion_point(field_release:unrealpb.CharacterState.rootMotion)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::RootMotionMontage* temp = _impl_.rootmotion_;
  _impl_.rootmotion_ = nullptr;
  return temp;
}
inline ::unrealpb::RootMotionMontage* CharacterState::_internal_mutable_rootmotion() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rootmotion_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::RootMotionMontage>(GetArenaForAllocation());
    _impl_.rootmotion_ = p;
  }
  return _impl_.rootmotion_;
}
inline ::unrealpb::RootMotionMontage* CharacterState::mutable_rootmotion() {
  ::unrealpb::RootMotionMontage* _msg = _internal_mutable_rootmotion();
  // @@protoc_insertion_point(field_mutable:unrealpb.CharacterState.rootMotion)
  return _msg;
}
inline void CharacterState::set_allocated_rootmotion(::unrealpb::RootMotionMontage* rootmotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rootmotion_;
  }
  if (rootmotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rootmotion);
    if (message_arena != submessage_arena) {
      rootmotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootmotion, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rootmotion_ = rootmotion;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.CharacterState.rootMotion)
}

// optional .unrealpb.BasedMovementInfo basedMovement = 3;
inline bool CharacterState::_internal_has_basedmovement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basedmovement_ != nullptr);
  return value;
}
inline bool CharacterState::has_basedmovement() const {
  return _internal_has_basedmovement();
}
inline void CharacterState::clear_basedmovement() {
  if (_impl_.basedmovement_ != nullptr) _impl_.basedmovement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::BasedMovementInfo& CharacterState::_internal_basedmovement() const {
  const ::unrealpb::BasedMovementInfo* p = _impl_.basedmovement_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::BasedMovementInfo&>(
      ::unrealpb::_BasedMovementInfo_default_instance_);
}
inline const ::unrealpb::BasedMovementInfo& CharacterState::basedmovement() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.basedMovement)
  return _internal_basedmovement();
}
inline void CharacterState::unsafe_arena_set_allocated_basedmovement(
    ::unrealpb::BasedMovementInfo* basedmovement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basedmovement_);
  }
  _impl_.basedmovement_ = basedmovement;
  if (basedmovement) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.CharacterState.basedMovement)
}
inline ::unrealpb::BasedMovementInfo* CharacterState::release_basedmovement() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::BasedMovementInfo* temp = _impl_.basedmovement_;
  _impl_.basedmovement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::BasedMovementInfo* CharacterState::unsafe_arena_release_basedmovement() {
  // @@protoc_insertion_point(field_release:unrealpb.CharacterState.basedMovement)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::BasedMovementInfo* temp = _impl_.basedmovement_;
  _impl_.basedmovement_ = nullptr;
  return temp;
}
inline ::unrealpb::BasedMovementInfo* CharacterState::_internal_mutable_basedmovement() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.basedmovement_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::BasedMovementInfo>(GetArenaForAllocation());
    _impl_.basedmovement_ = p;
  }
  return _impl_.basedmovement_;
}
inline ::unrealpb::BasedMovementInfo* CharacterState::mutable_basedmovement() {
  ::unrealpb::BasedMovementInfo* _msg = _internal_mutable_basedmovement();
  // @@protoc_insertion_point(field_mutable:unrealpb.CharacterState.basedMovement)
  return _msg;
}
inline void CharacterState::set_allocated_basedmovement(::unrealpb::BasedMovementInfo* basedmovement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basedmovement_;
  }
  if (basedmovement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basedmovement);
    if (message_arena != submessage_arena) {
      basedmovement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basedmovement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.basedmovement_ = basedmovement;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.CharacterState.basedMovement)
}

// optional float serverLastTransformUpdateTimeStamp = 4;
inline bool CharacterState::_internal_has_serverlasttransformupdatetimestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CharacterState::has_serverlasttransformupdatetimestamp() const {
  return _internal_has_serverlasttransformupdatetimestamp();
}
inline void CharacterState::clear_serverlasttransformupdatetimestamp() {
  _impl_.serverlasttransformupdatetimestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CharacterState::_internal_serverlasttransformupdatetimestamp() const {
  return _impl_.serverlasttransformupdatetimestamp_;
}
inline float CharacterState::serverlasttransformupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.serverLastTransformUpdateTimeStamp)
  return _internal_serverlasttransformupdatetimestamp();
}
inline void CharacterState::_internal_set_serverlasttransformupdatetimestamp(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.serverlasttransformupdatetimestamp_ = value;
}
inline void CharacterState::set_serverlasttransformupdatetimestamp(float value) {
  _internal_set_serverlasttransformupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.serverLastTransformUpdateTimeStamp)
}

// optional uint32 movementMode = 5;
inline bool CharacterState::_internal_has_movementmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CharacterState::has_movementmode() const {
  return _internal_has_movementmode();
}
inline void CharacterState::clear_movementmode() {
  _impl_.movementmode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CharacterState::_internal_movementmode() const {
  return _impl_.movementmode_;
}
inline uint32_t CharacterState::movementmode() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.movementMode)
  return _internal_movementmode();
}
inline void CharacterState::_internal_set_movementmode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.movementmode_ = value;
}
inline void CharacterState::set_movementmode(uint32_t value) {
  _internal_set_movementmode(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.movementMode)
}

// optional bool bIsCrouched = 6;
inline bool CharacterState::_internal_has_biscrouched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CharacterState::has_biscrouched() const {
  return _internal_has_biscrouched();
}
inline void CharacterState::clear_biscrouched() {
  _impl_.biscrouched_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CharacterState::_internal_biscrouched() const {
  return _impl_.biscrouched_;
}
inline bool CharacterState::biscrouched() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.bIsCrouched)
  return _internal_biscrouched();
}
inline void CharacterState::_internal_set_biscrouched(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.biscrouched_ = value;
}
inline void CharacterState::set_biscrouched(bool value) {
  _internal_set_biscrouched(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.bIsCrouched)
}

// optional bool bProxyIsJumpForceApplied = 7;
inline bool CharacterState::_internal_has_bproxyisjumpforceapplied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CharacterState::has_bproxyisjumpforceapplied() const {
  return _internal_has_bproxyisjumpforceapplied();
}
inline void CharacterState::clear_bproxyisjumpforceapplied() {
  _impl_.bproxyisjumpforceapplied_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CharacterState::_internal_bproxyisjumpforceapplied() const {
  return _impl_.bproxyisjumpforceapplied_;
}
inline bool CharacterState::bproxyisjumpforceapplied() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.bProxyIsJumpForceApplied)
  return _internal_bproxyisjumpforceapplied();
}
inline void CharacterState::_internal_set_bproxyisjumpforceapplied(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bproxyisjumpforceapplied_ = value;
}
inline void CharacterState::set_bproxyisjumpforceapplied(bool value) {
  _internal_set_bproxyisjumpforceapplied(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.bProxyIsJumpForceApplied)
}

// optional float animRootMotionTranslationScale = 8;
inline bool CharacterState::_internal_has_animrootmotiontranslationscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CharacterState::has_animrootmotiontranslationscale() const {
  return _internal_has_animrootmotiontranslationscale();
}
inline void CharacterState::clear_animrootmotiontranslationscale() {
  _impl_.animrootmotiontranslationscale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CharacterState::_internal_animrootmotiontranslationscale() const {
  return _impl_.animrootmotiontranslationscale_;
}
inline float CharacterState::animrootmotiontranslationscale() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.animRootMotionTranslationScale)
  return _internal_animrootmotiontranslationscale();
}
inline void CharacterState::_internal_set_animrootmotiontranslationscale(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.animrootmotiontranslationscale_ = value;
}
inline void CharacterState::set_animrootmotiontranslationscale(float value) {
  _internal_set_animrootmotiontranslationscale(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.animRootMotionTranslationScale)
}

// optional float replayLastTransformUpdateTimeStamp = 9;
inline bool CharacterState::_internal_has_replaylasttransformupdatetimestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CharacterState::has_replaylasttransformupdatetimestamp() const {
  return _internal_has_replaylasttransformupdatetimestamp();
}
inline void CharacterState::clear_replaylasttransformupdatetimestamp() {
  _impl_.replaylasttransformupdatetimestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CharacterState::_internal_replaylasttransformupdatetimestamp() const {
  return _impl_.replaylasttransformupdatetimestamp_;
}
inline float CharacterState::replaylasttransformupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.replayLastTransformUpdateTimeStamp)
  return _internal_replaylasttransformupdatetimestamp();
}
inline void CharacterState::_internal_set_replaylasttransformupdatetimestamp(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.replaylasttransformupdatetimestamp_ = value;
}
inline void CharacterState::set_replaylasttransformupdatetimestamp(float value) {
  _internal_set_replaylasttransformupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.replayLastTransformUpdateTimeStamp)
}

// -------------------------------------------------------------------

// Character_ServerMovePacked_Params

// uint32 bitsNum = 1;
inline void Character_ServerMovePacked_Params::clear_bitsnum() {
  _impl_.bitsnum_ = 0u;
}
inline uint32_t Character_ServerMovePacked_Params::_internal_bitsnum() const {
  return _impl_.bitsnum_;
}
inline uint32_t Character_ServerMovePacked_Params::bitsnum() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ServerMovePacked_Params.bitsNum)
  return _internal_bitsnum();
}
inline void Character_ServerMovePacked_Params::_internal_set_bitsnum(uint32_t value) {
  
  _impl_.bitsnum_ = value;
}
inline void Character_ServerMovePacked_Params::set_bitsnum(uint32_t value) {
  _internal_set_bitsnum(value);
  // @@protoc_insertion_point(field_set:unrealpb.Character_ServerMovePacked_Params.bitsNum)
}

// bytes packedBits = 2;
inline void Character_ServerMovePacked_Params::clear_packedbits() {
  _impl_.packedbits_.ClearToEmpty();
}
inline const std::string& Character_ServerMovePacked_Params::packedbits() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ServerMovePacked_Params.packedBits)
  return _internal_packedbits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character_ServerMovePacked_Params::set_packedbits(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packedbits_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.Character_ServerMovePacked_Params.packedBits)
}
inline std::string* Character_ServerMovePacked_Params::mutable_packedbits() {
  std::string* _s = _internal_mutable_packedbits();
  // @@protoc_insertion_point(field_mutable:unrealpb.Character_ServerMovePacked_Params.packedBits)
  return _s;
}
inline const std::string& Character_ServerMovePacked_Params::_internal_packedbits() const {
  return _impl_.packedbits_.Get();
}
inline void Character_ServerMovePacked_Params::_internal_set_packedbits(const std::string& value) {
  
  _impl_.packedbits_.Set(value, GetArenaForAllocation());
}
inline std::string* Character_ServerMovePacked_Params::_internal_mutable_packedbits() {
  
  return _impl_.packedbits_.Mutable(GetArenaForAllocation());
}
inline std::string* Character_ServerMovePacked_Params::release_packedbits() {
  // @@protoc_insertion_point(field_release:unrealpb.Character_ServerMovePacked_Params.packedBits)
  return _impl_.packedbits_.Release();
}
inline void Character_ServerMovePacked_Params::set_allocated_packedbits(std::string* packedbits) {
  if (packedbits != nullptr) {
    
  } else {
    
  }
  _impl_.packedbits_.SetAllocated(packedbits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packedbits_.IsDefault()) {
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Character_ServerMovePacked_Params.packedBits)
}

// -------------------------------------------------------------------

// Character_ClientMoveResponsePacked_Params

// uint32 bitsNum = 1;
inline void Character_ClientMoveResponsePacked_Params::clear_bitsnum() {
  _impl_.bitsnum_ = 0u;
}
inline uint32_t Character_ClientMoveResponsePacked_Params::_internal_bitsnum() const {
  return _impl_.bitsnum_;
}
inline uint32_t Character_ClientMoveResponsePacked_Params::bitsnum() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ClientMoveResponsePacked_Params.bitsNum)
  return _internal_bitsnum();
}
inline void Character_ClientMoveResponsePacked_Params::_internal_set_bitsnum(uint32_t value) {
  
  _impl_.bitsnum_ = value;
}
inline void Character_ClientMoveResponsePacked_Params::set_bitsnum(uint32_t value) {
  _internal_set_bitsnum(value);
  // @@protoc_insertion_point(field_set:unrealpb.Character_ClientMoveResponsePacked_Params.bitsNum)
}

// bytes packedBits = 2;
inline void Character_ClientMoveResponsePacked_Params::clear_packedbits() {
  _impl_.packedbits_.ClearToEmpty();
}
inline const std::string& Character_ClientMoveResponsePacked_Params::packedbits() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
  return _internal_packedbits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character_ClientMoveResponsePacked_Params::set_packedbits(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packedbits_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
}
inline std::string* Character_ClientMoveResponsePacked_Params::mutable_packedbits() {
  std::string* _s = _internal_mutable_packedbits();
  // @@protoc_insertion_point(field_mutable:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
  return _s;
}
inline const std::string& Character_ClientMoveResponsePacked_Params::_internal_packedbits() const {
  return _impl_.packedbits_.Get();
}
inline void Character_ClientMoveResponsePacked_Params::_internal_set_packedbits(const std::string& value) {
  
  _impl_.packedbits_.Set(value, GetArenaForAllocation());
}
inline std::string* Character_ClientMoveResponsePacked_Params::_internal_mutable_packedbits() {
  
  return _impl_.packedbits_.Mutable(GetArenaForAllocation());
}
inline std::string* Character_ClientMoveResponsePacked_Params::release_packedbits() {
  // @@protoc_insertion_point(field_release:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
  return _impl_.packedbits_.Release();
}
inline void Character_ClientMoveResponsePacked_Params::set_allocated_packedbits(std::string* packedbits) {
  if (packedbits != nullptr) {
    
  } else {
    
  }
  _impl_.packedbits_.SetAllocated(packedbits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packedbits_.IsDefault()) {
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Character_ClientMoveResponsePacked_Params.packedBits)
}

// -------------------------------------------------------------------

// PlayerState

// optional float score = 1;
inline bool PlayerState::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerState::has_score() const {
  return _internal_has_score();
}
inline void PlayerState::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PlayerState::_internal_score() const {
  return _impl_.score_;
}
inline float PlayerState::score() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.score)
  return _internal_score();
}
inline void PlayerState::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void PlayerState::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.score)
}

// optional int32 playerId = 2;
inline bool PlayerState::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerState::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerState::clear_playerid() {
  _impl_.playerid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PlayerState::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t PlayerState::playerid() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.playerId)
  return _internal_playerid();
}
inline void PlayerState::_internal_set_playerid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.playerid_ = value;
}
inline void PlayerState::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.playerId)
}

// optional uint32 ping = 3;
inline bool PlayerState::_internal_has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerState::has_ping() const {
  return _internal_has_ping();
}
inline void PlayerState::clear_ping() {
  _impl_.ping_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t PlayerState::_internal_ping() const {
  return _impl_.ping_;
}
inline uint32_t PlayerState::ping() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.ping)
  return _internal_ping();
}
inline void PlayerState::_internal_set_ping(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ping_ = value;
}
inline void PlayerState::set_ping(uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.ping)
}

// optional string playerName = 4;
inline bool PlayerState::_internal_has_playername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerState::has_playername() const {
  return _internal_has_playername();
}
inline void PlayerState::clear_playername() {
  _impl_.playername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerState::playername() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerState.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerState::set_playername(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerState.playerName)
}
inline std::string* PlayerState::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerState.playerName)
  return _s;
}
inline const std::string& PlayerState::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void PlayerState::_internal_set_playername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerState::_internal_mutable_playername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerState::release_playername() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerState.playerName)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.playername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerState::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerState.playerName)
}

// -------------------------------------------------------------------

// ControllerState

// .unrealpb.UnrealObjectRef playerState = 1;
inline bool ControllerState::_internal_has_playerstate() const {
  return this != internal_default_instance() && _impl_.playerstate_ != nullptr;
}
inline bool ControllerState::has_playerstate() const {
  return _internal_has_playerstate();
}
inline void ControllerState::clear_playerstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerstate_ != nullptr) {
    delete _impl_.playerstate_;
  }
  _impl_.playerstate_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::_internal_playerstate() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.playerstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::playerstate() const {
  // @@protoc_insertion_point(field_get:unrealpb.ControllerState.playerState)
  return _internal_playerstate();
}
inline void ControllerState::unsafe_arena_set_allocated_playerstate(
    ::unrealpb::UnrealObjectRef* playerstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstate_);
  }
  _impl_.playerstate_ = playerstate;
  if (playerstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ControllerState.playerState)
}
inline ::unrealpb::UnrealObjectRef* ControllerState::release_playerstate() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::unsafe_arena_release_playerstate() {
  // @@protoc_insertion_point(field_release:unrealpb.ControllerState.playerState)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::_internal_mutable_playerstate() {
  
  if (_impl_.playerstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.playerstate_ = p;
  }
  return _impl_.playerstate_;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::mutable_playerstate() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_playerstate();
  // @@protoc_insertion_point(field_mutable:unrealpb.ControllerState.playerState)
  return _msg;
}
inline void ControllerState::set_allocated_playerstate(::unrealpb::UnrealObjectRef* playerstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerstate_;
  }
  if (playerstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerstate);
    if (message_arena != submessage_arena) {
      playerstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerstate_ = playerstate;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ControllerState.playerState)
}

// .unrealpb.UnrealObjectRef pawn = 2;
inline bool ControllerState::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool ControllerState::has_pawn() const {
  return _internal_has_pawn();
}
inline void ControllerState::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& ControllerState::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.ControllerState.pawn)
  return _internal_pawn();
}
inline void ControllerState::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.ControllerState.pawn)
}
inline ::unrealpb::UnrealObjectRef* ControllerState::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.ControllerState.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* ControllerState::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.ControllerState.pawn)
  return _msg;
}
inline void ControllerState::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.ControllerState.pawn)
}

// -------------------------------------------------------------------

// Controller_ClientSetLocation_Params

// .unrealpb.FVector newLocation = 1;
inline bool Controller_ClientSetLocation_Params::_internal_has_newlocation() const {
  return this != internal_default_instance() && _impl_.newlocation_ != nullptr;
}
inline bool Controller_ClientSetLocation_Params::has_newlocation() const {
  return _internal_has_newlocation();
}
inline void Controller_ClientSetLocation_Params::clear_newlocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.newlocation_ != nullptr) {
    delete _impl_.newlocation_;
  }
  _impl_.newlocation_ = nullptr;
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::_internal_newlocation() const {
  const ::unrealpb::FVector* p = _impl_.newlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::newlocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetLocation_Params.newLocation)
  return _internal_newlocation();
}
inline void Controller_ClientSetLocation_Params::unsafe_arena_set_allocated_newlocation(
    ::unrealpb::FVector* newlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newlocation_);
  }
  _impl_.newlocation_ = newlocation;
  if (newlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newLocation)
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::release_newlocation() {
  
  ::unrealpb::FVector* temp = _impl_.newlocation_;
  _impl_.newlocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::unsafe_arena_release_newlocation() {
  // @@protoc_insertion_point(field_release:unrealpb.Controller_ClientSetLocation_Params.newLocation)
  
  ::unrealpb::FVector* temp = _impl_.newlocation_;
  _impl_.newlocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::_internal_mutable_newlocation() {
  
  if (_impl_.newlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newlocation_ = p;
  }
  return _impl_.newlocation_;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::mutable_newlocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_newlocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.Controller_ClientSetLocation_Params.newLocation)
  return _msg;
}
inline void Controller_ClientSetLocation_Params::set_allocated_newlocation(::unrealpb::FVector* newlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newlocation_;
  }
  if (newlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newlocation);
    if (message_arena != submessage_arena) {
      newlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newlocation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newlocation_ = newlocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newLocation)
}

// .unrealpb.FVector newRotation = 2;
inline bool Controller_ClientSetLocation_Params::_internal_has_newrotation() const {
  return this != internal_default_instance() && _impl_.newrotation_ != nullptr;
}
inline bool Controller_ClientSetLocation_Params::has_newrotation() const {
  return _internal_has_newrotation();
}
inline void Controller_ClientSetLocation_Params::clear_newrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrotation_ != nullptr) {
    delete _impl_.newrotation_;
  }
  _impl_.newrotation_ = nullptr;
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::_internal_newrotation() const {
  const ::unrealpb::FVector* p = _impl_.newrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& Controller_ClientSetLocation_Params::newrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetLocation_Params.newRotation)
  return _internal_newrotation();
}
inline void Controller_ClientSetLocation_Params::unsafe_arena_set_allocated_newrotation(
    ::unrealpb::FVector* newrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrotation_);
  }
  _impl_.newrotation_ = newrotation;
  if (newrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newRotation)
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::release_newrotation() {
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::unsafe_arena_release_newrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.Controller_ClientSetLocation_Params.newRotation)
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::_internal_mutable_newrotation() {
  
  if (_impl_.newrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrotation_ = p;
  }
  return _impl_.newrotation_;
}
inline ::unrealpb::FVector* Controller_ClientSetLocation_Params::mutable_newrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.Controller_ClientSetLocation_Params.newRotation)
  return _msg;
}
inline void Controller_ClientSetLocation_Params::set_allocated_newrotation(::unrealpb::FVector* newrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrotation_;
  }
  if (newrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrotation);
    if (message_arena != submessage_arena) {
      newrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrotation_ = newrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Controller_ClientSetLocation_Params.newRotation)
}

// -------------------------------------------------------------------

// Controller_ClientSetRotation_Params

// .unrealpb.FVector newRotation = 1;
inline bool Controller_ClientSetRotation_Params::_internal_has_newrotation() const {
  return this != internal_default_instance() && _impl_.newrotation_ != nullptr;
}
inline bool Controller_ClientSetRotation_Params::has_newrotation() const {
  return _internal_has_newrotation();
}
inline void Controller_ClientSetRotation_Params::clear_newrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrotation_ != nullptr) {
    delete _impl_.newrotation_;
  }
  _impl_.newrotation_ = nullptr;
}
inline const ::unrealpb::FVector& Controller_ClientSetRotation_Params::_internal_newrotation() const {
  const ::unrealpb::FVector* p = _impl_.newrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& Controller_ClientSetRotation_Params::newrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetRotation_Params.newRotation)
  return _internal_newrotation();
}
inline void Controller_ClientSetRotation_Params::unsafe_arena_set_allocated_newrotation(
    ::unrealpb::FVector* newrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrotation_);
  }
  _impl_.newrotation_ = newrotation;
  if (newrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.Controller_ClientSetRotation_Params.newRotation)
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::release_newrotation() {
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::unsafe_arena_release_newrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.Controller_ClientSetRotation_Params.newRotation)
  
  ::unrealpb::FVector* temp = _impl_.newrotation_;
  _impl_.newrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::_internal_mutable_newrotation() {
  
  if (_impl_.newrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrotation_ = p;
  }
  return _impl_.newrotation_;
}
inline ::unrealpb::FVector* Controller_ClientSetRotation_Params::mutable_newrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.Controller_ClientSetRotation_Params.newRotation)
  return _msg;
}
inline void Controller_ClientSetRotation_Params::set_allocated_newrotation(::unrealpb::FVector* newrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrotation_;
  }
  if (newrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrotation);
    if (message_arena != submessage_arena) {
      newrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrotation_ = newrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Controller_ClientSetRotation_Params.newRotation)
}

// bool bResetCamera = 2;
inline void Controller_ClientSetRotation_Params::clear_bresetcamera() {
  _impl_.bresetcamera_ = false;
}
inline bool Controller_ClientSetRotation_Params::_internal_bresetcamera() const {
  return _impl_.bresetcamera_;
}
inline bool Controller_ClientSetRotation_Params::bresetcamera() const {
  // @@protoc_insertion_point(field_get:unrealpb.Controller_ClientSetRotation_Params.bResetCamera)
  return _internal_bresetcamera();
}
inline void Controller_ClientSetRotation_Params::_internal_set_bresetcamera(bool value) {
  
  _impl_.bresetcamera_ = value;
}
inline void Controller_ClientSetRotation_Params::set_bresetcamera(bool value) {
  _internal_set_bresetcamera(value);
  // @@protoc_insertion_point(field_set:unrealpb.Controller_ClientSetRotation_Params.bResetCamera)
}

// -------------------------------------------------------------------

// PlayerControllerState

// optional .unrealpb.FVector targetViewRotation = 1;
inline bool PlayerControllerState::_internal_has_targetviewrotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetviewrotation_ != nullptr);
  return value;
}
inline bool PlayerControllerState::has_targetviewrotation() const {
  return _internal_has_targetviewrotation();
}
inline void PlayerControllerState::clear_targetviewrotation() {
  if (_impl_.targetviewrotation_ != nullptr) _impl_.targetviewrotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::unrealpb::FVector& PlayerControllerState::_internal_targetviewrotation() const {
  const ::unrealpb::FVector* p = _impl_.targetviewrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerControllerState::targetviewrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerControllerState.targetViewRotation)
  return _internal_targetviewrotation();
}
inline void PlayerControllerState::unsafe_arena_set_allocated_targetviewrotation(
    ::unrealpb::FVector* targetviewrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetviewrotation_);
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  if (targetviewrotation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerControllerState.targetViewRotation)
}
inline ::unrealpb::FVector* PlayerControllerState::release_targetviewrotation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::unsafe_arena_release_targetviewrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerControllerState.targetViewRotation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::unrealpb::FVector* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::_internal_mutable_targetviewrotation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.targetviewrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.targetviewrotation_ = p;
  }
  return _impl_.targetviewrotation_;
}
inline ::unrealpb::FVector* PlayerControllerState::mutable_targetviewrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_targetviewrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerControllerState.targetViewRotation)
  return _msg;
}
inline void PlayerControllerState::set_allocated_targetviewrotation(::unrealpb::FVector* targetviewrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetviewrotation_;
  }
  if (targetviewrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetviewrotation);
    if (message_arena != submessage_arena) {
      targetviewrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetviewrotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerControllerState.targetViewRotation)
}

// optional .unrealpb.FVector spawnLocation = 2;
inline bool PlayerControllerState::_internal_has_spawnlocation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spawnlocation_ != nullptr);
  return value;
}
inline bool PlayerControllerState::has_spawnlocation() const {
  return _internal_has_spawnlocation();
}
inline void PlayerControllerState::clear_spawnlocation() {
  if (_impl_.spawnlocation_ != nullptr) _impl_.spawnlocation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::unrealpb::FVector& PlayerControllerState::_internal_spawnlocation() const {
  const ::unrealpb::FVector* p = _impl_.spawnlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerControllerState::spawnlocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerControllerState.spawnLocation)
  return _internal_spawnlocation();
}
inline void PlayerControllerState::unsafe_arena_set_allocated_spawnlocation(
    ::unrealpb::FVector* spawnlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawnlocation_);
  }
  _impl_.spawnlocation_ = spawnlocation;
  if (spawnlocation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerControllerState.spawnLocation)
}
inline ::unrealpb::FVector* PlayerControllerState::release_spawnlocation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.spawnlocation_;
  _impl_.spawnlocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::unsafe_arena_release_spawnlocation() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerControllerState.spawnLocation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::unrealpb::FVector* temp = _impl_.spawnlocation_;
  _impl_.spawnlocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::_internal_mutable_spawnlocation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.spawnlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.spawnlocation_ = p;
  }
  return _impl_.spawnlocation_;
}
inline ::unrealpb::FVector* PlayerControllerState::mutable_spawnlocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_spawnlocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerControllerState.spawnLocation)
  return _msg;
}
inline void PlayerControllerState::set_allocated_spawnlocation(::unrealpb::FVector* spawnlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spawnlocation_;
  }
  if (spawnlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spawnlocation);
    if (message_arena != submessage_arena) {
      spawnlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawnlocation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.spawnlocation_ = spawnlocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerControllerState.spawnLocation)
}

// -------------------------------------------------------------------

// PlayerController_ServerUpdateCamera_Params

// .unrealpb.FVector camLoc = 1;
inline bool PlayerController_ServerUpdateCamera_Params::_internal_has_camloc() const {
  return this != internal_default_instance() && _impl_.camloc_ != nullptr;
}
inline bool PlayerController_ServerUpdateCamera_Params::has_camloc() const {
  return _internal_has_camloc();
}
inline void PlayerController_ServerUpdateCamera_Params::clear_camloc() {
  if (GetArenaForAllocation() == nullptr && _impl_.camloc_ != nullptr) {
    delete _impl_.camloc_;
  }
  _impl_.camloc_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerUpdateCamera_Params::_internal_camloc() const {
  const ::unrealpb::FVector* p = _impl_.camloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerUpdateCamera_Params::camloc() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  return _internal_camloc();
}
inline void PlayerController_ServerUpdateCamera_Params::unsafe_arena_set_allocated_camloc(
    ::unrealpb::FVector* camloc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camloc_);
  }
  _impl_.camloc_ = camloc;
  if (camloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::release_camloc() {
  
  ::unrealpb::FVector* temp = _impl_.camloc_;
  _impl_.camloc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::unsafe_arena_release_camloc() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  
  ::unrealpb::FVector* temp = _impl_.camloc_;
  _impl_.camloc_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::_internal_mutable_camloc() {
  
  if (_impl_.camloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.camloc_ = p;
  }
  return _impl_.camloc_;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::mutable_camloc() {
  ::unrealpb::FVector* _msg = _internal_mutable_camloc();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  return _msg;
}
inline void PlayerController_ServerUpdateCamera_Params::set_allocated_camloc(::unrealpb::FVector* camloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camloc_;
  }
  if (camloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camloc);
    if (message_arena != submessage_arena) {
      camloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camloc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camloc_ = camloc;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
}

// int32 camPitchAndYaw = 2;
inline void PlayerController_ServerUpdateCamera_Params::clear_campitchandyaw() {
  _impl_.campitchandyaw_ = 0;
}
inline int32_t PlayerController_ServerUpdateCamera_Params::_internal_campitchandyaw() const {
  return _impl_.campitchandyaw_;
}
inline int32_t PlayerController_ServerUpdateCamera_Params::campitchandyaw() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerUpdateCamera_Params.camPitchAndYaw)
  return _internal_campitchandyaw();
}
inline void PlayerController_ServerUpdateCamera_Params::_internal_set_campitchandyaw(int32_t value) {
  
  _impl_.campitchandyaw_ = value;
}
inline void PlayerController_ServerUpdateCamera_Params::set_campitchandyaw(int32_t value) {
  _internal_set_campitchandyaw(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ServerUpdateCamera_Params.camPitchAndYaw)
}

// -------------------------------------------------------------------

// PlayerController_ClientSetHUD_Params

// optional string hudClassName = 1;
inline bool PlayerController_ClientSetHUD_Params::_internal_has_hudclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerController_ClientSetHUD_Params::has_hudclassname() const {
  return _internal_has_hudclassname();
}
inline void PlayerController_ClientSetHUD_Params::clear_hudclassname() {
  _impl_.hudclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerController_ClientSetHUD_Params::hudclassname() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
  return _internal_hudclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerController_ClientSetHUD_Params::set_hudclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hudclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
}
inline std::string* PlayerController_ClientSetHUD_Params::mutable_hudclassname() {
  std::string* _s = _internal_mutable_hudclassname();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
  return _s;
}
inline const std::string& PlayerController_ClientSetHUD_Params::_internal_hudclassname() const {
  return _impl_.hudclassname_.Get();
}
inline void PlayerController_ClientSetHUD_Params::_internal_set_hudclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hudclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetHUD_Params::_internal_mutable_hudclassname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hudclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetHUD_Params::release_hudclassname() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
  if (!_internal_has_hudclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hudclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hudclassname_.IsDefault()) {
    _impl_.hudclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerController_ClientSetHUD_Params::set_allocated_hudclassname(std::string* hudclassname) {
  if (hudclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hudclassname_.SetAllocated(hudclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hudclassname_.IsDefault()) {
    _impl_.hudclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientSetHUD_Params.hudClassName)
}

// -------------------------------------------------------------------

// PlayerController_ClientSetViewTarget_Params

// .unrealpb.UnrealObjectRef actor = 1;
inline bool PlayerController_ClientSetViewTarget_Params::_internal_has_actor() const {
  return this != internal_default_instance() && _impl_.actor_ != nullptr;
}
inline bool PlayerController_ClientSetViewTarget_Params::has_actor() const {
  return _internal_has_actor();
}
inline void PlayerController_ClientSetViewTarget_Params::clear_actor() {
  if (GetArenaForAllocation() == nullptr && _impl_.actor_ != nullptr) {
    delete _impl_.actor_;
  }
  _impl_.actor_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientSetViewTarget_Params::_internal_actor() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientSetViewTarget_Params::actor() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
  return _internal_actor();
}
inline void PlayerController_ClientSetViewTarget_Params::unsafe_arena_set_allocated_actor(
    ::unrealpb::UnrealObjectRef* actor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_);
  }
  _impl_.actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::release_actor() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::_internal_mutable_actor() {
  
  if (_impl_.actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.actor_ = p;
  }
  return _impl_.actor_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientSetViewTarget_Params::mutable_actor() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
  return _msg;
}
inline void PlayerController_ClientSetViewTarget_Params::set_allocated_actor(::unrealpb::UnrealObjectRef* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actor_;
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actor);
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientSetViewTarget_Params.actor)
}

// float blendTime = 2;
inline void PlayerController_ClientSetViewTarget_Params::clear_blendtime() {
  _impl_.blendtime_ = 0;
}
inline float PlayerController_ClientSetViewTarget_Params::_internal_blendtime() const {
  return _impl_.blendtime_;
}
inline float PlayerController_ClientSetViewTarget_Params::blendtime() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.blendTime)
  return _internal_blendtime();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blendtime(float value) {
  
  _impl_.blendtime_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blendtime(float value) {
  _internal_set_blendtime(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.blendTime)
}

// uint32 blendFunction = 3;
inline void PlayerController_ClientSetViewTarget_Params::clear_blendfunction() {
  _impl_.blendfunction_ = 0u;
}
inline uint32_t PlayerController_ClientSetViewTarget_Params::_internal_blendfunction() const {
  return _impl_.blendfunction_;
}
inline uint32_t PlayerController_ClientSetViewTarget_Params::blendfunction() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.blendFunction)
  return _internal_blendfunction();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blendfunction(uint32_t value) {
  
  _impl_.blendfunction_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blendfunction(uint32_t value) {
  _internal_set_blendfunction(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.blendFunction)
}

// float blendExp = 4;
inline void PlayerController_ClientSetViewTarget_Params::clear_blendexp() {
  _impl_.blendexp_ = 0;
}
inline float PlayerController_ClientSetViewTarget_Params::_internal_blendexp() const {
  return _impl_.blendexp_;
}
inline float PlayerController_ClientSetViewTarget_Params::blendexp() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.blendExp)
  return _internal_blendexp();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blendexp(float value) {
  
  _impl_.blendexp_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blendexp(float value) {
  _internal_set_blendexp(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.blendExp)
}

// bool bLockOutgoing = 5;
inline void PlayerController_ClientSetViewTarget_Params::clear_blockoutgoing() {
  _impl_.blockoutgoing_ = false;
}
inline bool PlayerController_ClientSetViewTarget_Params::_internal_blockoutgoing() const {
  return _impl_.blockoutgoing_;
}
inline bool PlayerController_ClientSetViewTarget_Params::blockoutgoing() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetViewTarget_Params.bLockOutgoing)
  return _internal_blockoutgoing();
}
inline void PlayerController_ClientSetViewTarget_Params::_internal_set_blockoutgoing(bool value) {
  
  _impl_.blockoutgoing_ = value;
}
inline void PlayerController_ClientSetViewTarget_Params::set_blockoutgoing(bool value) {
  _internal_set_blockoutgoing(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetViewTarget_Params.bLockOutgoing)
}

// -------------------------------------------------------------------

// PlayerController_ClientEnableNetworkVoice_Params

// optional bool bEnable = 1;
inline bool PlayerController_ClientEnableNetworkVoice_Params::_internal_has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerController_ClientEnableNetworkVoice_Params::has_benable() const {
  return _internal_has_benable();
}
inline void PlayerController_ClientEnableNetworkVoice_Params::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PlayerController_ClientEnableNetworkVoice_Params::_internal_benable() const {
  return _impl_.benable_;
}
inline bool PlayerController_ClientEnableNetworkVoice_Params::benable() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientEnableNetworkVoice_Params.bEnable)
  return _internal_benable();
}
inline void PlayerController_ClientEnableNetworkVoice_Params::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}
inline void PlayerController_ClientEnableNetworkVoice_Params::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientEnableNetworkVoice_Params.bEnable)
}

// -------------------------------------------------------------------

// PlayerController_ClientCapBandwidth_Params

// int32 cap = 1;
inline void PlayerController_ClientCapBandwidth_Params::clear_cap() {
  _impl_.cap_ = 0;
}
inline int32_t PlayerController_ClientCapBandwidth_Params::_internal_cap() const {
  return _impl_.cap_;
}
inline int32_t PlayerController_ClientCapBandwidth_Params::cap() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientCapBandwidth_Params.cap)
  return _internal_cap();
}
inline void PlayerController_ClientCapBandwidth_Params::_internal_set_cap(int32_t value) {
  
  _impl_.cap_ = value;
}
inline void PlayerController_ClientCapBandwidth_Params::set_cap(int32_t value) {
  _internal_set_cap(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientCapBandwidth_Params.cap)
}

// -------------------------------------------------------------------

// PlayerController_ClientRestart_Params

// .unrealpb.UnrealObjectRef pawn = 1;
inline bool PlayerController_ClientRestart_Params::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool PlayerController_ClientRestart_Params::has_pawn() const {
  return _internal_has_pawn();
}
inline void PlayerController_ClientRestart_Params::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRestart_Params::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRestart_Params::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientRestart_Params.pawn)
  return _internal_pawn();
}
inline void PlayerController_ClientRestart_Params::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientRestart_Params.pawn)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientRestart_Params.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRestart_Params::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientRestart_Params.pawn)
  return _msg;
}
inline void PlayerController_ClientRestart_Params::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientRestart_Params.pawn)
}

// -------------------------------------------------------------------

// PlayerController_ClientSetCameraMode_Params

// string newCamMode = 1;
inline void PlayerController_ClientSetCameraMode_Params::clear_newcammode() {
  _impl_.newcammode_.ClearToEmpty();
}
inline const std::string& PlayerController_ClientSetCameraMode_Params::newcammode() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
  return _internal_newcammode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerController_ClientSetCameraMode_Params::set_newcammode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.newcammode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
}
inline std::string* PlayerController_ClientSetCameraMode_Params::mutable_newcammode() {
  std::string* _s = _internal_mutable_newcammode();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
  return _s;
}
inline const std::string& PlayerController_ClientSetCameraMode_Params::_internal_newcammode() const {
  return _impl_.newcammode_.Get();
}
inline void PlayerController_ClientSetCameraMode_Params::_internal_set_newcammode(const std::string& value) {
  
  _impl_.newcammode_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetCameraMode_Params::_internal_mutable_newcammode() {
  
  return _impl_.newcammode_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerController_ClientSetCameraMode_Params::release_newcammode() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
  return _impl_.newcammode_.Release();
}
inline void PlayerController_ClientSetCameraMode_Params::set_allocated_newcammode(std::string* newcammode) {
  if (newcammode != nullptr) {
    
  } else {
    
  }
  _impl_.newcammode_.SetAllocated(newcammode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newcammode_.IsDefault()) {
    _impl_.newcammode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientSetCameraMode_Params.newCamMode)
}

// -------------------------------------------------------------------

// PlayerController_ClientRetryClientRestart_Params

// .unrealpb.UnrealObjectRef pawn = 1;
inline bool PlayerController_ClientRetryClientRestart_Params::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool PlayerController_ClientRetryClientRestart_Params::has_pawn() const {
  return _internal_has_pawn();
}
inline void PlayerController_ClientRetryClientRestart_Params::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRetryClientRestart_Params::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ClientRetryClientRestart_Params::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
  return _internal_pawn();
}
inline void PlayerController_ClientRetryClientRestart_Params::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ClientRetryClientRestart_Params::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
  return _msg;
}
inline void PlayerController_ClientRetryClientRestart_Params::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn)
}

// -------------------------------------------------------------------

// PlayerController_ServerSetSpectatorLocation_Params

// .unrealpb.FVector newLoc = 1;
inline bool PlayerController_ServerSetSpectatorLocation_Params::_internal_has_newloc() const {
  return this != internal_default_instance() && _impl_.newloc_ != nullptr;
}
inline bool PlayerController_ServerSetSpectatorLocation_Params::has_newloc() const {
  return _internal_has_newloc();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::clear_newloc() {
  if (GetArenaForAllocation() == nullptr && _impl_.newloc_ != nullptr) {
    delete _impl_.newloc_;
  }
  _impl_.newloc_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::_internal_newloc() const {
  const ::unrealpb::FVector* p = _impl_.newloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::newloc() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
  return _internal_newloc();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_set_allocated_newloc(
    ::unrealpb::FVector* newloc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newloc_);
  }
  _impl_.newloc_ = newloc;
  if (newloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::release_newloc() {
  
  ::unrealpb::FVector* temp = _impl_.newloc_;
  _impl_.newloc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_release_newloc() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
  
  ::unrealpb::FVector* temp = _impl_.newloc_;
  _impl_.newloc_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::_internal_mutable_newloc() {
  
  if (_impl_.newloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newloc_ = p;
  }
  return _impl_.newloc_;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::mutable_newloc() {
  ::unrealpb::FVector* _msg = _internal_mutable_newloc();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
  return _msg;
}
inline void PlayerController_ServerSetSpectatorLocation_Params::set_allocated_newloc(::unrealpb::FVector* newloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newloc_;
  }
  if (newloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newloc);
    if (message_arena != submessage_arena) {
      newloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newloc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newloc_ = newloc;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc)
}

// .unrealpb.FVector newRot = 2;
inline bool PlayerController_ServerSetSpectatorLocation_Params::_internal_has_newrot() const {
  return this != internal_default_instance() && _impl_.newrot_ != nullptr;
}
inline bool PlayerController_ServerSetSpectatorLocation_Params::has_newrot() const {
  return _internal_has_newrot();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::clear_newrot() {
  if (GetArenaForAllocation() == nullptr && _impl_.newrot_ != nullptr) {
    delete _impl_.newrot_;
  }
  _impl_.newrot_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::_internal_newrot() const {
  const ::unrealpb::FVector* p = _impl_.newrot_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerSetSpectatorLocation_Params::newrot() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
  return _internal_newrot();
}
inline void PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_set_allocated_newrot(
    ::unrealpb::FVector* newrot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newrot_);
  }
  _impl_.newrot_ = newrot;
  if (newrot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::release_newrot() {
  
  ::unrealpb::FVector* temp = _impl_.newrot_;
  _impl_.newrot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::unsafe_arena_release_newrot() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
  
  ::unrealpb::FVector* temp = _impl_.newrot_;
  _impl_.newrot_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::_internal_mutable_newrot() {
  
  if (_impl_.newrot_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.newrot_ = p;
  }
  return _impl_.newrot_;
}
inline ::unrealpb::FVector* PlayerController_ServerSetSpectatorLocation_Params::mutable_newrot() {
  ::unrealpb::FVector* _msg = _internal_mutable_newrot();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
  return _msg;
}
inline void PlayerController_ServerSetSpectatorLocation_Params::set_allocated_newrot(::unrealpb::FVector* newrot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newrot_;
  }
  if (newrot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newrot);
    if (message_arena != submessage_arena) {
      newrot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newrot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newrot_ = newrot;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot)
}

// -------------------------------------------------------------------

// PlayerController_ServerAcknowledgePossession_Params

// .unrealpb.UnrealObjectRef pawn = 1;
inline bool PlayerController_ServerAcknowledgePossession_Params::_internal_has_pawn() const {
  return this != internal_default_instance() && _impl_.pawn_ != nullptr;
}
inline bool PlayerController_ServerAcknowledgePossession_Params::has_pawn() const {
  return _internal_has_pawn();
}
inline void PlayerController_ServerAcknowledgePossession_Params::clear_pawn() {
  if (GetArenaForAllocation() == nullptr && _impl_.pawn_ != nullptr) {
    delete _impl_.pawn_;
  }
  _impl_.pawn_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ServerAcknowledgePossession_Params::_internal_pawn() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.pawn_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& PlayerController_ServerAcknowledgePossession_Params::pawn() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
  return _internal_pawn();
}
inline void PlayerController_ServerAcknowledgePossession_Params::unsafe_arena_set_allocated_pawn(
    ::unrealpb::UnrealObjectRef* pawn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pawn_);
  }
  _impl_.pawn_ = pawn;
  if (pawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::release_pawn() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::unsafe_arena_release_pawn() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.pawn_;
  _impl_.pawn_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::_internal_mutable_pawn() {
  
  if (_impl_.pawn_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.pawn_ = p;
  }
  return _impl_.pawn_;
}
inline ::unrealpb::UnrealObjectRef* PlayerController_ServerAcknowledgePossession_Params::mutable_pawn() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_pawn();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
  return _msg;
}
inline void PlayerController_ServerAcknowledgePossession_Params::set_allocated_pawn(::unrealpb::UnrealObjectRef* pawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pawn_;
  }
  if (pawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pawn);
    if (message_arena != submessage_arena) {
      pawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pawn, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pawn_ = pawn;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn)
}

// -------------------------------------------------------------------

// GameStateBase

// optional string spectatorClassName = 1;
inline bool GameStateBase::_internal_has_spectatorclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameStateBase::has_spectatorclassname() const {
  return _internal_has_spectatorclassname();
}
inline void GameStateBase::clear_spectatorclassname() {
  _impl_.spectatorclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameStateBase::spectatorclassname() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.spectatorClassName)
  return _internal_spectatorclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameStateBase::set_spectatorclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.spectatorclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.spectatorClassName)
}
inline std::string* GameStateBase::mutable_spectatorclassname() {
  std::string* _s = _internal_mutable_spectatorclassname();
  // @@protoc_insertion_point(field_mutable:unrealpb.GameStateBase.spectatorClassName)
  return _s;
}
inline const std::string& GameStateBase::_internal_spectatorclassname() const {
  return _impl_.spectatorclassname_.Get();
}
inline void GameStateBase::_internal_set_spectatorclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.spectatorclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* GameStateBase::_internal_mutable_spectatorclassname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.spectatorclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* GameStateBase::release_spectatorclassname() {
  // @@protoc_insertion_point(field_release:unrealpb.GameStateBase.spectatorClassName)
  if (!_internal_has_spectatorclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.spectatorclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spectatorclassname_.IsDefault()) {
    _impl_.spectatorclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameStateBase::set_allocated_spectatorclassname(std::string* spectatorclassname) {
  if (spectatorclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.spectatorclassname_.SetAllocated(spectatorclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spectatorclassname_.IsDefault()) {
    _impl_.spectatorclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.GameStateBase.spectatorClassName)
}

// optional string gameModeClassName = 2;
inline bool GameStateBase::_internal_has_gamemodeclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameStateBase::has_gamemodeclassname() const {
  return _internal_has_gamemodeclassname();
}
inline void GameStateBase::clear_gamemodeclassname() {
  _impl_.gamemodeclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameStateBase::gamemodeclassname() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.gameModeClassName)
  return _internal_gamemodeclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameStateBase::set_gamemodeclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.gamemodeclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.gameModeClassName)
}
inline std::string* GameStateBase::mutable_gamemodeclassname() {
  std::string* _s = _internal_mutable_gamemodeclassname();
  // @@protoc_insertion_point(field_mutable:unrealpb.GameStateBase.gameModeClassName)
  return _s;
}
inline const std::string& GameStateBase::_internal_gamemodeclassname() const {
  return _impl_.gamemodeclassname_.Get();
}
inline void GameStateBase::_internal_set_gamemodeclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gamemodeclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* GameStateBase::_internal_mutable_gamemodeclassname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.gamemodeclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* GameStateBase::release_gamemodeclassname() {
  // @@protoc_insertion_point(field_release:unrealpb.GameStateBase.gameModeClassName)
  if (!_internal_has_gamemodeclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.gamemodeclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamemodeclassname_.IsDefault()) {
    _impl_.gamemodeclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameStateBase::set_allocated_gamemodeclassname(std::string* gamemodeclassname) {
  if (gamemodeclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gamemodeclassname_.SetAllocated(gamemodeclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamemodeclassname_.IsDefault()) {
    _impl_.gamemodeclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.GameStateBase.gameModeClassName)
}

// optional float replicatedWorldTimeSeconds = 3;
inline bool GameStateBase::_internal_has_replicatedworldtimeseconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameStateBase::has_replicatedworldtimeseconds() const {
  return _internal_has_replicatedworldtimeseconds();
}
inline void GameStateBase::clear_replicatedworldtimeseconds() {
  _impl_.replicatedworldtimeseconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float GameStateBase::_internal_replicatedworldtimeseconds() const {
  return _impl_.replicatedworldtimeseconds_;
}
inline float GameStateBase::replicatedworldtimeseconds() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.replicatedWorldTimeSeconds)
  return _internal_replicatedworldtimeseconds();
}
inline void GameStateBase::_internal_set_replicatedworldtimeseconds(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.replicatedworldtimeseconds_ = value;
}
inline void GameStateBase::set_replicatedworldtimeseconds(float value) {
  _internal_set_replicatedworldtimeseconds(value);
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.replicatedWorldTimeSeconds)
}

// optional bool bReplicatedHasBegunPlay = 4;
inline bool GameStateBase::_internal_has_breplicatedhasbegunplay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameStateBase::has_breplicatedhasbegunplay() const {
  return _internal_has_breplicatedhasbegunplay();
}
inline void GameStateBase::clear_breplicatedhasbegunplay() {
  _impl_.breplicatedhasbegunplay_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GameStateBase::_internal_breplicatedhasbegunplay() const {
  return _impl_.breplicatedhasbegunplay_;
}
inline bool GameStateBase::breplicatedhasbegunplay() const {
  // @@protoc_insertion_point(field_get:unrealpb.GameStateBase.bReplicatedHasBegunPlay)
  return _internal_breplicatedhasbegunplay();
}
inline void GameStateBase::_internal_set_breplicatedhasbegunplay(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.breplicatedhasbegunplay_ = value;
}
inline void GameStateBase::set_breplicatedhasbegunplay(bool value) {
  _internal_set_breplicatedhasbegunplay(value);
  // @@protoc_insertion_point(field_set:unrealpb.GameStateBase.bReplicatedHasBegunPlay)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace unrealpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unreal_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unreal_5fcommon_2eproto CHANNELDUE_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct CHANNELDUE_API TableStruct_unreal_5fcommon_2eproto {
  static const uint32_t offsets[];
};
CHANNELDUE_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unreal_5fcommon_2eproto;
namespace unrealpb {
class BasedMovementInfo;
struct BasedMovementInfoDefaultTypeInternal;
CHANNELDUE_API extern BasedMovementInfoDefaultTypeInternal _BasedMovementInfo_default_instance_;
class CharacterState;
struct CharacterStateDefaultTypeInternal;
CHANNELDUE_API extern CharacterStateDefaultTypeInternal _CharacterState_default_instance_;
class Character_ClientMoveResponsePacked_Params;
struct Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Character_ClientMoveResponsePacked_ParamsDefaultTypeInternal _Character_ClientMoveResponsePacked_Params_default_instance_;
class Character_ServerMovePacked_Params;
struct Character_ServerMovePacked_ParamsDefaultTypeInternal;
CHANNELDUE_API extern Character_ServerMovePacked_ParamsDefaultTypeInternal _Character_ServerMovePacked_Params_default_instance_;
class FVector;
struct FVectorDefaultTypeInternal;
CHANNELDUE_API extern FVectorDefaultTypeInternal _FVector_default_instance_;
class PlayerControllerState;
struct PlayerControllerStateDefaultTypeInternal;
CHANNELDUE_API extern PlayerControllerStateDefaultTypeInternal _PlayerControllerState_default_instance_;
class PlayerController_ServerUpdateCamera_Params;
struct PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal;
CHANNELDUE_API extern PlayerController_ServerUpdateCamera_ParamsDefaultTypeInternal _PlayerController_ServerUpdateCamera_Params_default_instance_;
class RemoteFunctionMessage;
struct RemoteFunctionMessageDefaultTypeInternal;
CHANNELDUE_API extern RemoteFunctionMessageDefaultTypeInternal _RemoteFunctionMessage_default_instance_;
class RootMotionMontage;
struct RootMotionMontageDefaultTypeInternal;
CHANNELDUE_API extern RootMotionMontageDefaultTypeInternal _RootMotionMontage_default_instance_;
class SceneComponentState;
struct SceneComponentStateDefaultTypeInternal;
CHANNELDUE_API extern SceneComponentStateDefaultTypeInternal _SceneComponentState_default_instance_;
class UnrealObjectRef;
struct UnrealObjectRefDefaultTypeInternal;
CHANNELDUE_API extern UnrealObjectRefDefaultTypeInternal _UnrealObjectRef_default_instance_;
}  // namespace unrealpb
PROTOBUF_NAMESPACE_OPEN
template<> CHANNELDUE_API ::unrealpb::BasedMovementInfo* Arena::CreateMaybeMessage<::unrealpb::BasedMovementInfo>(Arena*);
template<> CHANNELDUE_API ::unrealpb::CharacterState* Arena::CreateMaybeMessage<::unrealpb::CharacterState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Character_ClientMoveResponsePacked_Params* Arena::CreateMaybeMessage<::unrealpb::Character_ClientMoveResponsePacked_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::Character_ServerMovePacked_Params* Arena::CreateMaybeMessage<::unrealpb::Character_ServerMovePacked_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::FVector* Arena::CreateMaybeMessage<::unrealpb::FVector>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerControllerState* Arena::CreateMaybeMessage<::unrealpb::PlayerControllerState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::PlayerController_ServerUpdateCamera_Params* Arena::CreateMaybeMessage<::unrealpb::PlayerController_ServerUpdateCamera_Params>(Arena*);
template<> CHANNELDUE_API ::unrealpb::RemoteFunctionMessage* Arena::CreateMaybeMessage<::unrealpb::RemoteFunctionMessage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::RootMotionMontage* Arena::CreateMaybeMessage<::unrealpb::RootMotionMontage>(Arena*);
template<> CHANNELDUE_API ::unrealpb::SceneComponentState* Arena::CreateMaybeMessage<::unrealpb::SceneComponentState>(Arena*);
template<> CHANNELDUE_API ::unrealpb::UnrealObjectRef* Arena::CreateMaybeMessage<::unrealpb::UnrealObjectRef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace unrealpb {

// ===================================================================

class CHANNELDUE_API FVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.FVector) */ {
 public:
  inline FVector() : FVector(nullptr) {}
  ~FVector() override;
  explicit PROTOBUF_CONSTEXPR FVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FVector(const FVector& from);
  FVector(FVector&& from) noexcept
    : FVector() {
    *this = ::std::move(from);
  }

  inline FVector& operator=(const FVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVector& operator=(FVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const FVector* internal_default_instance() {
    return reinterpret_cast<const FVector*>(
               &_FVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FVector& a, FVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FVector& from) {
    FVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.FVector";
  }
  protected:
  explicit FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.FVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnrealObjectRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.UnrealObjectRef) */ {
 public:
  inline UnrealObjectRef() : UnrealObjectRef(nullptr) {}
  ~UnrealObjectRef() override;
  explicit PROTOBUF_CONSTEXPR UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnrealObjectRef(const UnrealObjectRef& from);
  UnrealObjectRef(UnrealObjectRef&& from) noexcept
    : UnrealObjectRef() {
    *this = ::std::move(from);
  }

  inline UnrealObjectRef& operator=(const UnrealObjectRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnrealObjectRef& operator=(UnrealObjectRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnrealObjectRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnrealObjectRef* internal_default_instance() {
    return reinterpret_cast<const UnrealObjectRef*>(
               &_UnrealObjectRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnrealObjectRef& a, UnrealObjectRef& b) {
    a.Swap(&b);
  }
  inline void Swap(UnrealObjectRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnrealObjectRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnrealObjectRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnrealObjectRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnrealObjectRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnrealObjectRef& from) {
    UnrealObjectRef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnrealObjectRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.UnrealObjectRef";
  }
  protected:
  explicit UnrealObjectRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetGUIDFieldNumber = 1,
  };
  // uint32 NetGUID = 1;
  void clear_netguid();
  uint32_t netguid() const;
  void set_netguid(uint32_t value);
  private:
  uint32_t _internal_netguid() const;
  void _internal_set_netguid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.UnrealObjectRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t netguid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API RemoteFunctionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.RemoteFunctionMessage) */ {
 public:
  inline RemoteFunctionMessage() : RemoteFunctionMessage(nullptr) {}
  ~RemoteFunctionMessage() override;
  explicit PROTOBUF_CONSTEXPR RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteFunctionMessage(const RemoteFunctionMessage& from);
  RemoteFunctionMessage(RemoteFunctionMessage&& from) noexcept
    : RemoteFunctionMessage() {
    *this = ::std::move(from);
  }

  inline RemoteFunctionMessage& operator=(const RemoteFunctionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteFunctionMessage& operator=(RemoteFunctionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteFunctionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteFunctionMessage* internal_default_instance() {
    return reinterpret_cast<const RemoteFunctionMessage*>(
               &_RemoteFunctionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoteFunctionMessage& a, RemoteFunctionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteFunctionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteFunctionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteFunctionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteFunctionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteFunctionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteFunctionMessage& from) {
    RemoteFunctionMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteFunctionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.RemoteFunctionMessage";
  }
  protected:
  explicit RemoteFunctionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 2,
    kParamsPayloadFieldNumber = 3,
    kTargetObjFieldNumber = 1,
  };
  // string functionName = 2;
  void clear_functionname();
  const std::string& functionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_functionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_functionname();
  PROTOBUF_NODISCARD std::string* release_functionname();
  void set_allocated_functionname(std::string* functionname);
  private:
  const std::string& _internal_functionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_functionname(const std::string& value);
  std::string* _internal_mutable_functionname();
  public:

  // bytes paramsPayload = 3;
  void clear_paramspayload();
  const std::string& paramspayload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paramspayload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paramspayload();
  PROTOBUF_NODISCARD std::string* release_paramspayload();
  void set_allocated_paramspayload(std::string* paramspayload);
  private:
  const std::string& _internal_paramspayload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paramspayload(const std::string& value);
  std::string* _internal_mutable_paramspayload();
  public:

  // .unrealpb.UnrealObjectRef targetObj = 1;
  bool has_targetobj() const;
  private:
  bool _internal_has_targetobj() const;
  public:
  void clear_targetobj();
  const ::unrealpb::UnrealObjectRef& targetobj() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_targetobj();
  ::unrealpb::UnrealObjectRef* mutable_targetobj();
  void set_allocated_targetobj(::unrealpb::UnrealObjectRef* targetobj);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_targetobj() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_targetobj();
  public:
  void unsafe_arena_set_allocated_targetobj(
      ::unrealpb::UnrealObjectRef* targetobj);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_targetobj();

  // @@protoc_insertion_point(class_scope:unrealpb.RemoteFunctionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr functionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramspayload_;
    ::unrealpb::UnrealObjectRef* targetobj_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SceneComponentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.SceneComponentState) */ {
 public:
  inline SceneComponentState() : SceneComponentState(nullptr) {}
  ~SceneComponentState() override;
  explicit PROTOBUF_CONSTEXPR SceneComponentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneComponentState(const SceneComponentState& from);
  SceneComponentState(SceneComponentState&& from) noexcept
    : SceneComponentState() {
    *this = ::std::move(from);
  }

  inline SceneComponentState& operator=(const SceneComponentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneComponentState& operator=(SceneComponentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneComponentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneComponentState* internal_default_instance() {
    return reinterpret_cast<const SceneComponentState*>(
               &_SceneComponentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SceneComponentState& a, SceneComponentState& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneComponentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneComponentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneComponentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneComponentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneComponentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneComponentState& from) {
    SceneComponentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneComponentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.SceneComponentState";
  }
  protected:
  explicit SceneComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachChildrenFieldNumber = 10,
    kAttachSocketNameFieldNumber = 11,
    kAttachParentFieldNumber = 9,
    kRelativeLocationFieldNumber = 12,
    kRelativeRotationFieldNumber = 13,
    kRelativeScaleFieldNumber = 14,
    kRemovedFieldNumber = 1,
    kBAbsoluteLocationFieldNumber = 2,
    kBAbsoluteRotationFieldNumber = 3,
    kBAbsoluteScaleFieldNumber = 4,
    kBVisibleFieldNumber = 5,
    kBShouldBeAttachedFieldNumber = 6,
    kBShouldSnapLocationWhenAttachedFieldNumber = 7,
    kBShouldSnapRotationWhenAttachedFieldNumber = 8,
  };
  // repeated .unrealpb.UnrealObjectRef attachChildren = 10;
  int attachchildren_size() const;
  private:
  int _internal_attachchildren_size() const;
  public:
  void clear_attachchildren();
  ::unrealpb::UnrealObjectRef* mutable_attachchildren(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >*
      mutable_attachchildren();
  private:
  const ::unrealpb::UnrealObjectRef& _internal_attachchildren(int index) const;
  ::unrealpb::UnrealObjectRef* _internal_add_attachchildren();
  public:
  const ::unrealpb::UnrealObjectRef& attachchildren(int index) const;
  ::unrealpb::UnrealObjectRef* add_attachchildren();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >&
      attachchildren() const;

  // string attachSocketName = 11;
  void clear_attachsocketname();
  const std::string& attachsocketname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachsocketname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachsocketname();
  PROTOBUF_NODISCARD std::string* release_attachsocketname();
  void set_allocated_attachsocketname(std::string* attachsocketname);
  private:
  const std::string& _internal_attachsocketname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachsocketname(const std::string& value);
  std::string* _internal_mutable_attachsocketname();
  public:

  // .unrealpb.UnrealObjectRef attachParent = 9;
  bool has_attachparent() const;
  private:
  bool _internal_has_attachparent() const;
  public:
  void clear_attachparent();
  const ::unrealpb::UnrealObjectRef& attachparent() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_attachparent();
  ::unrealpb::UnrealObjectRef* mutable_attachparent();
  void set_allocated_attachparent(::unrealpb::UnrealObjectRef* attachparent);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_attachparent() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_attachparent();
  public:
  void unsafe_arena_set_allocated_attachparent(
      ::unrealpb::UnrealObjectRef* attachparent);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_attachparent();

  // .unrealpb.FVector relativeLocation = 12;
  bool has_relativelocation() const;
  private:
  bool _internal_has_relativelocation() const;
  public:
  void clear_relativelocation();
  const ::unrealpb::FVector& relativelocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativelocation();
  ::unrealpb::FVector* mutable_relativelocation();
  void set_allocated_relativelocation(::unrealpb::FVector* relativelocation);
  private:
  const ::unrealpb::FVector& _internal_relativelocation() const;
  ::unrealpb::FVector* _internal_mutable_relativelocation();
  public:
  void unsafe_arena_set_allocated_relativelocation(
      ::unrealpb::FVector* relativelocation);
  ::unrealpb::FVector* unsafe_arena_release_relativelocation();

  // .unrealpb.FVector relativeRotation = 13;
  bool has_relativerotation() const;
  private:
  bool _internal_has_relativerotation() const;
  public:
  void clear_relativerotation();
  const ::unrealpb::FVector& relativerotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativerotation();
  ::unrealpb::FVector* mutable_relativerotation();
  void set_allocated_relativerotation(::unrealpb::FVector* relativerotation);
  private:
  const ::unrealpb::FVector& _internal_relativerotation() const;
  ::unrealpb::FVector* _internal_mutable_relativerotation();
  public:
  void unsafe_arena_set_allocated_relativerotation(
      ::unrealpb::FVector* relativerotation);
  ::unrealpb::FVector* unsafe_arena_release_relativerotation();

  // .unrealpb.FVector relativeScale = 14;
  bool has_relativescale() const;
  private:
  bool _internal_has_relativescale() const;
  public:
  void clear_relativescale();
  const ::unrealpb::FVector& relativescale() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_relativescale();
  ::unrealpb::FVector* mutable_relativescale();
  void set_allocated_relativescale(::unrealpb::FVector* relativescale);
  private:
  const ::unrealpb::FVector& _internal_relativescale() const;
  ::unrealpb::FVector* _internal_mutable_relativescale();
  public:
  void unsafe_arena_set_allocated_relativescale(
      ::unrealpb::FVector* relativescale);
  ::unrealpb::FVector* unsafe_arena_release_relativescale();

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // bool bAbsoluteLocation = 2;
  void clear_babsolutelocation();
  bool babsolutelocation() const;
  void set_babsolutelocation(bool value);
  private:
  bool _internal_babsolutelocation() const;
  void _internal_set_babsolutelocation(bool value);
  public:

  // bool bAbsoluteRotation = 3;
  void clear_babsoluterotation();
  bool babsoluterotation() const;
  void set_babsoluterotation(bool value);
  private:
  bool _internal_babsoluterotation() const;
  void _internal_set_babsoluterotation(bool value);
  public:

  // bool bAbsoluteScale = 4;
  void clear_babsolutescale();
  bool babsolutescale() const;
  void set_babsolutescale(bool value);
  private:
  bool _internal_babsolutescale() const;
  void _internal_set_babsolutescale(bool value);
  public:

  // bool bVisible = 5;
  void clear_bvisible();
  bool bvisible() const;
  void set_bvisible(bool value);
  private:
  bool _internal_bvisible() const;
  void _internal_set_bvisible(bool value);
  public:

  // bool bShouldBeAttached = 6;
  void clear_bshouldbeattached();
  bool bshouldbeattached() const;
  void set_bshouldbeattached(bool value);
  private:
  bool _internal_bshouldbeattached() const;
  void _internal_set_bshouldbeattached(bool value);
  public:

  // bool bShouldSnapLocationWhenAttached = 7;
  void clear_bshouldsnaplocationwhenattached();
  bool bshouldsnaplocationwhenattached() const;
  void set_bshouldsnaplocationwhenattached(bool value);
  private:
  bool _internal_bshouldsnaplocationwhenattached() const;
  void _internal_set_bshouldsnaplocationwhenattached(bool value);
  public:

  // bool bShouldSnapRotationWhenAttached = 8;
  void clear_bshouldsnaprotationwhenattached();
  bool bshouldsnaprotationwhenattached() const;
  void set_bshouldsnaprotationwhenattached(bool value);
  private:
  bool _internal_bshouldsnaprotationwhenattached() const;
  void _internal_set_bshouldsnaprotationwhenattached(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.SceneComponentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef > attachchildren_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachsocketname_;
    ::unrealpb::UnrealObjectRef* attachparent_;
    ::unrealpb::FVector* relativelocation_;
    ::unrealpb::FVector* relativerotation_;
    ::unrealpb::FVector* relativescale_;
    bool removed_;
    bool babsolutelocation_;
    bool babsoluterotation_;
    bool babsolutescale_;
    bool bvisible_;
    bool bshouldbeattached_;
    bool bshouldsnaplocationwhenattached_;
    bool bshouldsnaprotationwhenattached_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API RootMotionMontage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:unrealpb.RootMotionMontage) */ {
 public:
  inline RootMotionMontage() : RootMotionMontage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RootMotionMontage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RootMotionMontage(const RootMotionMontage& from);
  RootMotionMontage(RootMotionMontage&& from) noexcept
    : RootMotionMontage() {
    *this = ::std::move(from);
  }

  inline RootMotionMontage& operator=(const RootMotionMontage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootMotionMontage& operator=(RootMotionMontage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RootMotionMontage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RootMotionMontage* internal_default_instance() {
    return reinterpret_cast<const RootMotionMontage*>(
               &_RootMotionMontage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RootMotionMontage& a, RootMotionMontage& b) {
    a.Swap(&b);
  }
  inline void Swap(RootMotionMontage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootMotionMontage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RootMotionMontage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RootMotionMontage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RootMotionMontage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RootMotionMontage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.RootMotionMontage";
  }
  protected:
  explicit RootMotionMontage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:unrealpb.RootMotionMontage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API BasedMovementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.BasedMovementInfo) */ {
 public:
  inline BasedMovementInfo() : BasedMovementInfo(nullptr) {}
  ~BasedMovementInfo() override;
  explicit PROTOBUF_CONSTEXPR BasedMovementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasedMovementInfo(const BasedMovementInfo& from);
  BasedMovementInfo(BasedMovementInfo&& from) noexcept
    : BasedMovementInfo() {
    *this = ::std::move(from);
  }

  inline BasedMovementInfo& operator=(const BasedMovementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasedMovementInfo& operator=(BasedMovementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasedMovementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasedMovementInfo* internal_default_instance() {
    return reinterpret_cast<const BasedMovementInfo*>(
               &_BasedMovementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BasedMovementInfo& a, BasedMovementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BasedMovementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasedMovementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasedMovementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasedMovementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasedMovementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BasedMovementInfo& from) {
    BasedMovementInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasedMovementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.BasedMovementInfo";
  }
  protected:
  explicit BasedMovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoneNameFieldNumber = 2,
    kMovementBaseFieldNumber = 1,
    kLocationFieldNumber = 3,
    kRotationFieldNumber = 4,
    kBServerHasBaseComponentFieldNumber = 5,
    kBRelativeRotationFieldNumber = 6,
    kBServerHasVelocityFieldNumber = 7,
  };
  // string boneName = 2;
  void clear_bonename();
  const std::string& bonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bonename();
  PROTOBUF_NODISCARD std::string* release_bonename();
  void set_allocated_bonename(std::string* bonename);
  private:
  const std::string& _internal_bonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bonename(const std::string& value);
  std::string* _internal_mutable_bonename();
  public:

  // .unrealpb.UnrealObjectRef movementBase = 1;
  bool has_movementbase() const;
  private:
  bool _internal_has_movementbase() const;
  public:
  void clear_movementbase();
  const ::unrealpb::UnrealObjectRef& movementbase() const;
  PROTOBUF_NODISCARD ::unrealpb::UnrealObjectRef* release_movementbase();
  ::unrealpb::UnrealObjectRef* mutable_movementbase();
  void set_allocated_movementbase(::unrealpb::UnrealObjectRef* movementbase);
  private:
  const ::unrealpb::UnrealObjectRef& _internal_movementbase() const;
  ::unrealpb::UnrealObjectRef* _internal_mutable_movementbase();
  public:
  void unsafe_arena_set_allocated_movementbase(
      ::unrealpb::UnrealObjectRef* movementbase);
  ::unrealpb::UnrealObjectRef* unsafe_arena_release_movementbase();

  // .unrealpb.FVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::unrealpb::FVector& location() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_location();
  ::unrealpb::FVector* mutable_location();
  void set_allocated_location(::unrealpb::FVector* location);
  private:
  const ::unrealpb::FVector& _internal_location() const;
  ::unrealpb::FVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::unrealpb::FVector* location);
  ::unrealpb::FVector* unsafe_arena_release_location();

  // .unrealpb.FVector rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::unrealpb::FVector& rotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_rotation();
  ::unrealpb::FVector* mutable_rotation();
  void set_allocated_rotation(::unrealpb::FVector* rotation);
  private:
  const ::unrealpb::FVector& _internal_rotation() const;
  ::unrealpb::FVector* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::unrealpb::FVector* rotation);
  ::unrealpb::FVector* unsafe_arena_release_rotation();

  // bool bServerHasBaseComponent = 5;
  void clear_bserverhasbasecomponent();
  bool bserverhasbasecomponent() const;
  void set_bserverhasbasecomponent(bool value);
  private:
  bool _internal_bserverhasbasecomponent() const;
  void _internal_set_bserverhasbasecomponent(bool value);
  public:

  // bool bRelativeRotation = 6;
  void clear_brelativerotation();
  bool brelativerotation() const;
  void set_brelativerotation(bool value);
  private:
  bool _internal_brelativerotation() const;
  void _internal_set_brelativerotation(bool value);
  public:

  // bool bServerHasVelocity = 7;
  void clear_bserverhasvelocity();
  bool bserverhasvelocity() const;
  void set_bserverhasvelocity(bool value);
  private:
  bool _internal_bserverhasvelocity() const;
  void _internal_set_bserverhasvelocity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.BasedMovementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bonename_;
    ::unrealpb::UnrealObjectRef* movementbase_;
    ::unrealpb::FVector* location_;
    ::unrealpb::FVector* rotation_;
    bool bserverhasbasecomponent_;
    bool brelativerotation_;
    bool bserverhasvelocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API CharacterState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.CharacterState) */ {
 public:
  inline CharacterState() : CharacterState(nullptr) {}
  ~CharacterState() override;
  explicit PROTOBUF_CONSTEXPR CharacterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterState(const CharacterState& from);
  CharacterState(CharacterState&& from) noexcept
    : CharacterState() {
    *this = ::std::move(from);
  }

  inline CharacterState& operator=(const CharacterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterState& operator=(CharacterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterState* internal_default_instance() {
    return reinterpret_cast<const CharacterState*>(
               &_CharacterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CharacterState& a, CharacterState& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterState& from) {
    CharacterState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.CharacterState";
  }
  protected:
  explicit CharacterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootMotionFieldNumber = 2,
    kBasedMovementFieldNumber = 3,
    kServerLastTransformUpdateTimeStampFieldNumber = 4,
    kRemovedFieldNumber = 1,
    kBIsCrouchedFieldNumber = 6,
    kBProxyIsJumpForceAppliedFieldNumber = 7,
    kMovementModeFieldNumber = 5,
    kAnimRootMotionTranslationScaleFieldNumber = 8,
    kReplayLastTransformUpdateTimeStampFieldNumber = 9,
  };
  // .unrealpb.RootMotionMontage rootMotion = 2;
  bool has_rootmotion() const;
  private:
  bool _internal_has_rootmotion() const;
  public:
  void clear_rootmotion();
  const ::unrealpb::RootMotionMontage& rootmotion() const;
  PROTOBUF_NODISCARD ::unrealpb::RootMotionMontage* release_rootmotion();
  ::unrealpb::RootMotionMontage* mutable_rootmotion();
  void set_allocated_rootmotion(::unrealpb::RootMotionMontage* rootmotion);
  private:
  const ::unrealpb::RootMotionMontage& _internal_rootmotion() const;
  ::unrealpb::RootMotionMontage* _internal_mutable_rootmotion();
  public:
  void unsafe_arena_set_allocated_rootmotion(
      ::unrealpb::RootMotionMontage* rootmotion);
  ::unrealpb::RootMotionMontage* unsafe_arena_release_rootmotion();

  // .unrealpb.BasedMovementInfo basedMovement = 3;
  bool has_basedmovement() const;
  private:
  bool _internal_has_basedmovement() const;
  public:
  void clear_basedmovement();
  const ::unrealpb::BasedMovementInfo& basedmovement() const;
  PROTOBUF_NODISCARD ::unrealpb::BasedMovementInfo* release_basedmovement();
  ::unrealpb::BasedMovementInfo* mutable_basedmovement();
  void set_allocated_basedmovement(::unrealpb::BasedMovementInfo* basedmovement);
  private:
  const ::unrealpb::BasedMovementInfo& _internal_basedmovement() const;
  ::unrealpb::BasedMovementInfo* _internal_mutable_basedmovement();
  public:
  void unsafe_arena_set_allocated_basedmovement(
      ::unrealpb::BasedMovementInfo* basedmovement);
  ::unrealpb::BasedMovementInfo* unsafe_arena_release_basedmovement();

  // float serverLastTransformUpdateTimeStamp = 4;
  void clear_serverlasttransformupdatetimestamp();
  float serverlasttransformupdatetimestamp() const;
  void set_serverlasttransformupdatetimestamp(float value);
  private:
  float _internal_serverlasttransformupdatetimestamp() const;
  void _internal_set_serverlasttransformupdatetimestamp(float value);
  public:

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // bool bIsCrouched = 6;
  void clear_biscrouched();
  bool biscrouched() const;
  void set_biscrouched(bool value);
  private:
  bool _internal_biscrouched() const;
  void _internal_set_biscrouched(bool value);
  public:

  // bool bProxyIsJumpForceApplied = 7;
  void clear_bproxyisjumpforceapplied();
  bool bproxyisjumpforceapplied() const;
  void set_bproxyisjumpforceapplied(bool value);
  private:
  bool _internal_bproxyisjumpforceapplied() const;
  void _internal_set_bproxyisjumpforceapplied(bool value);
  public:

  // uint32 movementMode = 5;
  void clear_movementmode();
  uint32_t movementmode() const;
  void set_movementmode(uint32_t value);
  private:
  uint32_t _internal_movementmode() const;
  void _internal_set_movementmode(uint32_t value);
  public:

  // float animRootMotionTranslationScale = 8;
  void clear_animrootmotiontranslationscale();
  float animrootmotiontranslationscale() const;
  void set_animrootmotiontranslationscale(float value);
  private:
  float _internal_animrootmotiontranslationscale() const;
  void _internal_set_animrootmotiontranslationscale(float value);
  public:

  // float replayLastTransformUpdateTimeStamp = 9;
  void clear_replaylasttransformupdatetimestamp();
  float replaylasttransformupdatetimestamp() const;
  void set_replaylasttransformupdatetimestamp(float value);
  private:
  float _internal_replaylasttransformupdatetimestamp() const;
  void _internal_set_replaylasttransformupdatetimestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.CharacterState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::RootMotionMontage* rootmotion_;
    ::unrealpb::BasedMovementInfo* basedmovement_;
    float serverlasttransformupdatetimestamp_;
    bool removed_;
    bool biscrouched_;
    bool bproxyisjumpforceapplied_;
    uint32_t movementmode_;
    float animrootmotiontranslationscale_;
    float replaylasttransformupdatetimestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Character_ServerMovePacked_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Character_ServerMovePacked_Params) */ {
 public:
  inline Character_ServerMovePacked_Params() : Character_ServerMovePacked_Params(nullptr) {}
  ~Character_ServerMovePacked_Params() override;
  explicit PROTOBUF_CONSTEXPR Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_ServerMovePacked_Params(const Character_ServerMovePacked_Params& from);
  Character_ServerMovePacked_Params(Character_ServerMovePacked_Params&& from) noexcept
    : Character_ServerMovePacked_Params() {
    *this = ::std::move(from);
  }

  inline Character_ServerMovePacked_Params& operator=(const Character_ServerMovePacked_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ServerMovePacked_Params& operator=(Character_ServerMovePacked_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_ServerMovePacked_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_ServerMovePacked_Params* internal_default_instance() {
    return reinterpret_cast<const Character_ServerMovePacked_Params*>(
               &_Character_ServerMovePacked_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Character_ServerMovePacked_Params& a, Character_ServerMovePacked_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ServerMovePacked_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ServerMovePacked_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_ServerMovePacked_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_ServerMovePacked_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_ServerMovePacked_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_ServerMovePacked_Params& from) {
    Character_ServerMovePacked_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ServerMovePacked_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Character_ServerMovePacked_Params";
  }
  protected:
  explicit Character_ServerMovePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedBitsFieldNumber = 1,
  };
  // bytes PackedBits = 1;
  void clear_packedbits();
  const std::string& packedbits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packedbits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packedbits();
  PROTOBUF_NODISCARD std::string* release_packedbits();
  void set_allocated_packedbits(std::string* packedbits);
  private:
  const std::string& _internal_packedbits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packedbits(const std::string& value);
  std::string* _internal_mutable_packedbits();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Character_ServerMovePacked_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packedbits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API Character_ClientMoveResponsePacked_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.Character_ClientMoveResponsePacked_Params) */ {
 public:
  inline Character_ClientMoveResponsePacked_Params() : Character_ClientMoveResponsePacked_Params(nullptr) {}
  ~Character_ClientMoveResponsePacked_Params() override;
  explicit PROTOBUF_CONSTEXPR Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character_ClientMoveResponsePacked_Params(const Character_ClientMoveResponsePacked_Params& from);
  Character_ClientMoveResponsePacked_Params(Character_ClientMoveResponsePacked_Params&& from) noexcept
    : Character_ClientMoveResponsePacked_Params() {
    *this = ::std::move(from);
  }

  inline Character_ClientMoveResponsePacked_Params& operator=(const Character_ClientMoveResponsePacked_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ClientMoveResponsePacked_Params& operator=(Character_ClientMoveResponsePacked_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character_ClientMoveResponsePacked_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character_ClientMoveResponsePacked_Params* internal_default_instance() {
    return reinterpret_cast<const Character_ClientMoveResponsePacked_Params*>(
               &_Character_ClientMoveResponsePacked_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Character_ClientMoveResponsePacked_Params& a, Character_ClientMoveResponsePacked_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ClientMoveResponsePacked_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ClientMoveResponsePacked_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character_ClientMoveResponsePacked_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character_ClientMoveResponsePacked_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character_ClientMoveResponsePacked_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character_ClientMoveResponsePacked_Params& from) {
    Character_ClientMoveResponsePacked_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ClientMoveResponsePacked_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.Character_ClientMoveResponsePacked_Params";
  }
  protected:
  explicit Character_ClientMoveResponsePacked_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedBitsFieldNumber = 1,
  };
  // bytes PackedBits = 1;
  void clear_packedbits();
  const std::string& packedbits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packedbits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packedbits();
  PROTOBUF_NODISCARD std::string* release_packedbits();
  void set_allocated_packedbits(std::string* packedbits);
  private:
  const std::string& _internal_packedbits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packedbits(const std::string& value);
  std::string* _internal_mutable_packedbits();
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.Character_ClientMoveResponsePacked_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packedbits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerControllerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerControllerState) */ {
 public:
  inline PlayerControllerState() : PlayerControllerState(nullptr) {}
  ~PlayerControllerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerControllerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerControllerState(const PlayerControllerState& from);
  PlayerControllerState(PlayerControllerState&& from) noexcept
    : PlayerControllerState() {
    *this = ::std::move(from);
  }

  inline PlayerControllerState& operator=(const PlayerControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerControllerState& operator=(PlayerControllerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerControllerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerControllerState* internal_default_instance() {
    return reinterpret_cast<const PlayerControllerState*>(
               &_PlayerControllerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PlayerControllerState& a, PlayerControllerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerControllerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerControllerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerControllerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerControllerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerControllerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerControllerState& from) {
    PlayerControllerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerControllerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerControllerState";
  }
  protected:
  explicit PlayerControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetViewRotationFieldNumber = 1,
    kSpawnLocationFieldNumber = 2,
  };
  // .unrealpb.FVector targetViewRotation = 1;
  bool has_targetviewrotation() const;
  private:
  bool _internal_has_targetviewrotation() const;
  public:
  void clear_targetviewrotation();
  const ::unrealpb::FVector& targetviewrotation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_targetviewrotation();
  ::unrealpb::FVector* mutable_targetviewrotation();
  void set_allocated_targetviewrotation(::unrealpb::FVector* targetviewrotation);
  private:
  const ::unrealpb::FVector& _internal_targetviewrotation() const;
  ::unrealpb::FVector* _internal_mutable_targetviewrotation();
  public:
  void unsafe_arena_set_allocated_targetviewrotation(
      ::unrealpb::FVector* targetviewrotation);
  ::unrealpb::FVector* unsafe_arena_release_targetviewrotation();

  // .unrealpb.FVector spawnLocation = 2;
  bool has_spawnlocation() const;
  private:
  bool _internal_has_spawnlocation() const;
  public:
  void clear_spawnlocation();
  const ::unrealpb::FVector& spawnlocation() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_spawnlocation();
  ::unrealpb::FVector* mutable_spawnlocation();
  void set_allocated_spawnlocation(::unrealpb::FVector* spawnlocation);
  private:
  const ::unrealpb::FVector& _internal_spawnlocation() const;
  ::unrealpb::FVector* _internal_mutable_spawnlocation();
  public:
  void unsafe_arena_set_allocated_spawnlocation(
      ::unrealpb::FVector* spawnlocation);
  ::unrealpb::FVector* unsafe_arena_release_spawnlocation();

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerControllerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* targetviewrotation_;
    ::unrealpb::FVector* spawnlocation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API PlayerController_ServerUpdateCamera_Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unrealpb.PlayerController_ServerUpdateCamera_Params) */ {
 public:
  inline PlayerController_ServerUpdateCamera_Params() : PlayerController_ServerUpdateCamera_Params(nullptr) {}
  ~PlayerController_ServerUpdateCamera_Params() override;
  explicit PROTOBUF_CONSTEXPR PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerController_ServerUpdateCamera_Params(const PlayerController_ServerUpdateCamera_Params& from);
  PlayerController_ServerUpdateCamera_Params(PlayerController_ServerUpdateCamera_Params&& from) noexcept
    : PlayerController_ServerUpdateCamera_Params() {
    *this = ::std::move(from);
  }

  inline PlayerController_ServerUpdateCamera_Params& operator=(const PlayerController_ServerUpdateCamera_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerController_ServerUpdateCamera_Params& operator=(PlayerController_ServerUpdateCamera_Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerController_ServerUpdateCamera_Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerController_ServerUpdateCamera_Params* internal_default_instance() {
    return reinterpret_cast<const PlayerController_ServerUpdateCamera_Params*>(
               &_PlayerController_ServerUpdateCamera_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayerController_ServerUpdateCamera_Params& a, PlayerController_ServerUpdateCamera_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerController_ServerUpdateCamera_Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerController_ServerUpdateCamera_Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerController_ServerUpdateCamera_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerController_ServerUpdateCamera_Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerController_ServerUpdateCamera_Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerController_ServerUpdateCamera_Params& from) {
    PlayerController_ServerUpdateCamera_Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerController_ServerUpdateCamera_Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unrealpb.PlayerController_ServerUpdateCamera_Params";
  }
  protected:
  explicit PlayerController_ServerUpdateCamera_Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamLocFieldNumber = 1,
    kCamPitchAndYawFieldNumber = 2,
  };
  // .unrealpb.FVector camLoc = 1;
  bool has_camloc() const;
  private:
  bool _internal_has_camloc() const;
  public:
  void clear_camloc();
  const ::unrealpb::FVector& camloc() const;
  PROTOBUF_NODISCARD ::unrealpb::FVector* release_camloc();
  ::unrealpb::FVector* mutable_camloc();
  void set_allocated_camloc(::unrealpb::FVector* camloc);
  private:
  const ::unrealpb::FVector& _internal_camloc() const;
  ::unrealpb::FVector* _internal_mutable_camloc();
  public:
  void unsafe_arena_set_allocated_camloc(
      ::unrealpb::FVector* camloc);
  ::unrealpb::FVector* unsafe_arena_release_camloc();

  // int32 camPitchAndYaw = 2;
  void clear_campitchandyaw();
  int32_t campitchandyaw() const;
  void set_campitchandyaw(int32_t value);
  private:
  int32_t _internal_campitchandyaw() const;
  void _internal_set_campitchandyaw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:unrealpb.PlayerController_ServerUpdateCamera_Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::FVector* camloc_;
    int32_t campitchandyaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FVector

// float x = 1;
inline void FVector::clear_x() {
  _impl_.x_ = 0;
}
inline float FVector::_internal_x() const {
  return _impl_.x_;
}
inline float FVector::x() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.x)
  return _internal_x();
}
inline void FVector::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void FVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.x)
}

// float y = 2;
inline void FVector::clear_y() {
  _impl_.y_ = 0;
}
inline float FVector::_internal_y() const {
  return _impl_.y_;
}
inline float FVector::y() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.y)
  return _internal_y();
}
inline void FVector::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void FVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.y)
}

// float z = 3;
inline void FVector::clear_z() {
  _impl_.z_ = 0;
}
inline float FVector::_internal_z() const {
  return _impl_.z_;
}
inline float FVector::z() const {
  // @@protoc_insertion_point(field_get:unrealpb.FVector.z)
  return _internal_z();
}
inline void FVector::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void FVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:unrealpb.FVector.z)
}

// -------------------------------------------------------------------

// UnrealObjectRef

// uint32 NetGUID = 1;
inline void UnrealObjectRef::clear_netguid() {
  _impl_.netguid_ = 0u;
}
inline uint32_t UnrealObjectRef::_internal_netguid() const {
  return _impl_.netguid_;
}
inline uint32_t UnrealObjectRef::netguid() const {
  // @@protoc_insertion_point(field_get:unrealpb.UnrealObjectRef.NetGUID)
  return _internal_netguid();
}
inline void UnrealObjectRef::_internal_set_netguid(uint32_t value) {
  
  _impl_.netguid_ = value;
}
inline void UnrealObjectRef::set_netguid(uint32_t value) {
  _internal_set_netguid(value);
  // @@protoc_insertion_point(field_set:unrealpb.UnrealObjectRef.NetGUID)
}

// -------------------------------------------------------------------

// RemoteFunctionMessage

// .unrealpb.UnrealObjectRef targetObj = 1;
inline bool RemoteFunctionMessage::_internal_has_targetobj() const {
  return this != internal_default_instance() && _impl_.targetobj_ != nullptr;
}
inline bool RemoteFunctionMessage::has_targetobj() const {
  return _internal_has_targetobj();
}
inline void RemoteFunctionMessage::clear_targetobj() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetobj_ != nullptr) {
    delete _impl_.targetobj_;
  }
  _impl_.targetobj_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& RemoteFunctionMessage::_internal_targetobj() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.targetobj_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& RemoteFunctionMessage::targetobj() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.targetObj)
  return _internal_targetobj();
}
inline void RemoteFunctionMessage::unsafe_arena_set_allocated_targetobj(
    ::unrealpb::UnrealObjectRef* targetobj) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetobj_);
  }
  _impl_.targetobj_ = targetobj;
  if (targetobj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.RemoteFunctionMessage.targetObj)
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::release_targetobj() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.targetobj_;
  _impl_.targetobj_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::unsafe_arena_release_targetobj() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.targetObj)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.targetobj_;
  _impl_.targetobj_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::_internal_mutable_targetobj() {
  
  if (_impl_.targetobj_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.targetobj_ = p;
  }
  return _impl_.targetobj_;
}
inline ::unrealpb::UnrealObjectRef* RemoteFunctionMessage::mutable_targetobj() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_targetobj();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.targetObj)
  return _msg;
}
inline void RemoteFunctionMessage::set_allocated_targetobj(::unrealpb::UnrealObjectRef* targetobj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetobj_;
  }
  if (targetobj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetobj);
    if (message_arena != submessage_arena) {
      targetobj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetobj, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.targetobj_ = targetobj;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.targetObj)
}

// string functionName = 2;
inline void RemoteFunctionMessage::clear_functionname() {
  _impl_.functionname_.ClearToEmpty();
}
inline const std::string& RemoteFunctionMessage::functionname() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.functionName)
  return _internal_functionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteFunctionMessage::set_functionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.functionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.functionName)
}
inline std::string* RemoteFunctionMessage::mutable_functionname() {
  std::string* _s = _internal_mutable_functionname();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.functionName)
  return _s;
}
inline const std::string& RemoteFunctionMessage::_internal_functionname() const {
  return _impl_.functionname_.Get();
}
inline void RemoteFunctionMessage::_internal_set_functionname(const std::string& value) {
  
  _impl_.functionname_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::_internal_mutable_functionname() {
  
  return _impl_.functionname_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::release_functionname() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.functionName)
  return _impl_.functionname_.Release();
}
inline void RemoteFunctionMessage::set_allocated_functionname(std::string* functionname) {
  if (functionname != nullptr) {
    
  } else {
    
  }
  _impl_.functionname_.SetAllocated(functionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.functionname_.IsDefault()) {
    _impl_.functionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.functionName)
}

// bytes paramsPayload = 3;
inline void RemoteFunctionMessage::clear_paramspayload() {
  _impl_.paramspayload_.ClearToEmpty();
}
inline const std::string& RemoteFunctionMessage::paramspayload() const {
  // @@protoc_insertion_point(field_get:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _internal_paramspayload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteFunctionMessage::set_paramspayload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.paramspayload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.RemoteFunctionMessage.paramsPayload)
}
inline std::string* RemoteFunctionMessage::mutable_paramspayload() {
  std::string* _s = _internal_mutable_paramspayload();
  // @@protoc_insertion_point(field_mutable:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _s;
}
inline const std::string& RemoteFunctionMessage::_internal_paramspayload() const {
  return _impl_.paramspayload_.Get();
}
inline void RemoteFunctionMessage::_internal_set_paramspayload(const std::string& value) {
  
  _impl_.paramspayload_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::_internal_mutable_paramspayload() {
  
  return _impl_.paramspayload_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoteFunctionMessage::release_paramspayload() {
  // @@protoc_insertion_point(field_release:unrealpb.RemoteFunctionMessage.paramsPayload)
  return _impl_.paramspayload_.Release();
}
inline void RemoteFunctionMessage::set_allocated_paramspayload(std::string* paramspayload) {
  if (paramspayload != nullptr) {
    
  } else {
    
  }
  _impl_.paramspayload_.SetAllocated(paramspayload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.paramspayload_.IsDefault()) {
    _impl_.paramspayload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.RemoteFunctionMessage.paramsPayload)
}

// -------------------------------------------------------------------

// SceneComponentState

// bool removed = 1;
inline void SceneComponentState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool SceneComponentState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool SceneComponentState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.removed)
  return _internal_removed();
}
inline void SceneComponentState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void SceneComponentState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.removed)
}

// bool bAbsoluteLocation = 2;
inline void SceneComponentState::clear_babsolutelocation() {
  _impl_.babsolutelocation_ = false;
}
inline bool SceneComponentState::_internal_babsolutelocation() const {
  return _impl_.babsolutelocation_;
}
inline bool SceneComponentState::babsolutelocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteLocation)
  return _internal_babsolutelocation();
}
inline void SceneComponentState::_internal_set_babsolutelocation(bool value) {
  
  _impl_.babsolutelocation_ = value;
}
inline void SceneComponentState::set_babsolutelocation(bool value) {
  _internal_set_babsolutelocation(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteLocation)
}

// bool bAbsoluteRotation = 3;
inline void SceneComponentState::clear_babsoluterotation() {
  _impl_.babsoluterotation_ = false;
}
inline bool SceneComponentState::_internal_babsoluterotation() const {
  return _impl_.babsoluterotation_;
}
inline bool SceneComponentState::babsoluterotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteRotation)
  return _internal_babsoluterotation();
}
inline void SceneComponentState::_internal_set_babsoluterotation(bool value) {
  
  _impl_.babsoluterotation_ = value;
}
inline void SceneComponentState::set_babsoluterotation(bool value) {
  _internal_set_babsoluterotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteRotation)
}

// bool bAbsoluteScale = 4;
inline void SceneComponentState::clear_babsolutescale() {
  _impl_.babsolutescale_ = false;
}
inline bool SceneComponentState::_internal_babsolutescale() const {
  return _impl_.babsolutescale_;
}
inline bool SceneComponentState::babsolutescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bAbsoluteScale)
  return _internal_babsolutescale();
}
inline void SceneComponentState::_internal_set_babsolutescale(bool value) {
  
  _impl_.babsolutescale_ = value;
}
inline void SceneComponentState::set_babsolutescale(bool value) {
  _internal_set_babsolutescale(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bAbsoluteScale)
}

// bool bVisible = 5;
inline void SceneComponentState::clear_bvisible() {
  _impl_.bvisible_ = false;
}
inline bool SceneComponentState::_internal_bvisible() const {
  return _impl_.bvisible_;
}
inline bool SceneComponentState::bvisible() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bVisible)
  return _internal_bvisible();
}
inline void SceneComponentState::_internal_set_bvisible(bool value) {
  
  _impl_.bvisible_ = value;
}
inline void SceneComponentState::set_bvisible(bool value) {
  _internal_set_bvisible(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bVisible)
}

// bool bShouldBeAttached = 6;
inline void SceneComponentState::clear_bshouldbeattached() {
  _impl_.bshouldbeattached_ = false;
}
inline bool SceneComponentState::_internal_bshouldbeattached() const {
  return _impl_.bshouldbeattached_;
}
inline bool SceneComponentState::bshouldbeattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldBeAttached)
  return _internal_bshouldbeattached();
}
inline void SceneComponentState::_internal_set_bshouldbeattached(bool value) {
  
  _impl_.bshouldbeattached_ = value;
}
inline void SceneComponentState::set_bshouldbeattached(bool value) {
  _internal_set_bshouldbeattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldBeAttached)
}

// bool bShouldSnapLocationWhenAttached = 7;
inline void SceneComponentState::clear_bshouldsnaplocationwhenattached() {
  _impl_.bshouldsnaplocationwhenattached_ = false;
}
inline bool SceneComponentState::_internal_bshouldsnaplocationwhenattached() const {
  return _impl_.bshouldsnaplocationwhenattached_;
}
inline bool SceneComponentState::bshouldsnaplocationwhenattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldSnapLocationWhenAttached)
  return _internal_bshouldsnaplocationwhenattached();
}
inline void SceneComponentState::_internal_set_bshouldsnaplocationwhenattached(bool value) {
  
  _impl_.bshouldsnaplocationwhenattached_ = value;
}
inline void SceneComponentState::set_bshouldsnaplocationwhenattached(bool value) {
  _internal_set_bshouldsnaplocationwhenattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldSnapLocationWhenAttached)
}

// bool bShouldSnapRotationWhenAttached = 8;
inline void SceneComponentState::clear_bshouldsnaprotationwhenattached() {
  _impl_.bshouldsnaprotationwhenattached_ = false;
}
inline bool SceneComponentState::_internal_bshouldsnaprotationwhenattached() const {
  return _impl_.bshouldsnaprotationwhenattached_;
}
inline bool SceneComponentState::bshouldsnaprotationwhenattached() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.bShouldSnapRotationWhenAttached)
  return _internal_bshouldsnaprotationwhenattached();
}
inline void SceneComponentState::_internal_set_bshouldsnaprotationwhenattached(bool value) {
  
  _impl_.bshouldsnaprotationwhenattached_ = value;
}
inline void SceneComponentState::set_bshouldsnaprotationwhenattached(bool value) {
  _internal_set_bshouldsnaprotationwhenattached(value);
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.bShouldSnapRotationWhenAttached)
}

// .unrealpb.UnrealObjectRef attachParent = 9;
inline bool SceneComponentState::_internal_has_attachparent() const {
  return this != internal_default_instance() && _impl_.attachparent_ != nullptr;
}
inline bool SceneComponentState::has_attachparent() const {
  return _internal_has_attachparent();
}
inline void SceneComponentState::clear_attachparent() {
  if (GetArenaForAllocation() == nullptr && _impl_.attachparent_ != nullptr) {
    delete _impl_.attachparent_;
  }
  _impl_.attachparent_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::_internal_attachparent() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.attachparent_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::attachparent() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachParent)
  return _internal_attachparent();
}
inline void SceneComponentState::unsafe_arena_set_allocated_attachparent(
    ::unrealpb::UnrealObjectRef* attachparent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attachparent_);
  }
  _impl_.attachparent_ = attachparent;
  if (attachparent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.attachParent)
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::release_attachparent() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::unsafe_arena_release_attachparent() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.attachParent)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.attachparent_;
  _impl_.attachparent_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::_internal_mutable_attachparent() {
  
  if (_impl_.attachparent_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.attachparent_ = p;
  }
  return _impl_.attachparent_;
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::mutable_attachparent() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_attachparent();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachParent)
  return _msg;
}
inline void SceneComponentState::set_allocated_attachparent(::unrealpb::UnrealObjectRef* attachparent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attachparent_;
  }
  if (attachparent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attachparent);
    if (message_arena != submessage_arena) {
      attachparent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachparent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attachparent_ = attachparent;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.attachParent)
}

// repeated .unrealpb.UnrealObjectRef attachChildren = 10;
inline int SceneComponentState::_internal_attachchildren_size() const {
  return _impl_.attachchildren_.size();
}
inline int SceneComponentState::attachchildren_size() const {
  return _internal_attachchildren_size();
}
inline void SceneComponentState::clear_attachchildren() {
  _impl_.attachchildren_.Clear();
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::mutable_attachchildren(int index) {
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachChildren)
  return _impl_.attachchildren_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >*
SceneComponentState::mutable_attachchildren() {
  // @@protoc_insertion_point(field_mutable_list:unrealpb.SceneComponentState.attachChildren)
  return &_impl_.attachchildren_;
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::_internal_attachchildren(int index) const {
  return _impl_.attachchildren_.Get(index);
}
inline const ::unrealpb::UnrealObjectRef& SceneComponentState::attachchildren(int index) const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachChildren)
  return _internal_attachchildren(index);
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::_internal_add_attachchildren() {
  return _impl_.attachchildren_.Add();
}
inline ::unrealpb::UnrealObjectRef* SceneComponentState::add_attachchildren() {
  ::unrealpb::UnrealObjectRef* _add = _internal_add_attachchildren();
  // @@protoc_insertion_point(field_add:unrealpb.SceneComponentState.attachChildren)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::unrealpb::UnrealObjectRef >&
SceneComponentState::attachchildren() const {
  // @@protoc_insertion_point(field_list:unrealpb.SceneComponentState.attachChildren)
  return _impl_.attachchildren_;
}

// string attachSocketName = 11;
inline void SceneComponentState::clear_attachsocketname() {
  _impl_.attachsocketname_.ClearToEmpty();
}
inline const std::string& SceneComponentState::attachsocketname() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.attachSocketName)
  return _internal_attachsocketname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneComponentState::set_attachsocketname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attachsocketname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.SceneComponentState.attachSocketName)
}
inline std::string* SceneComponentState::mutable_attachsocketname() {
  std::string* _s = _internal_mutable_attachsocketname();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.attachSocketName)
  return _s;
}
inline const std::string& SceneComponentState::_internal_attachsocketname() const {
  return _impl_.attachsocketname_.Get();
}
inline void SceneComponentState::_internal_set_attachsocketname(const std::string& value) {
  
  _impl_.attachsocketname_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneComponentState::_internal_mutable_attachsocketname() {
  
  return _impl_.attachsocketname_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneComponentState::release_attachsocketname() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.attachSocketName)
  return _impl_.attachsocketname_.Release();
}
inline void SceneComponentState::set_allocated_attachsocketname(std::string* attachsocketname) {
  if (attachsocketname != nullptr) {
    
  } else {
    
  }
  _impl_.attachsocketname_.SetAllocated(attachsocketname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocketname_.IsDefault()) {
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.attachSocketName)
}

// .unrealpb.FVector relativeLocation = 12;
inline bool SceneComponentState::_internal_has_relativelocation() const {
  return this != internal_default_instance() && _impl_.relativelocation_ != nullptr;
}
inline bool SceneComponentState::has_relativelocation() const {
  return _internal_has_relativelocation();
}
inline void SceneComponentState::clear_relativelocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.relativelocation_ != nullptr) {
    delete _impl_.relativelocation_;
  }
  _impl_.relativelocation_ = nullptr;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativelocation() const {
  const ::unrealpb::FVector* p = _impl_.relativelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativelocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeLocation)
  return _internal_relativelocation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativelocation(
    ::unrealpb::FVector* relativelocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativelocation_);
  }
  _impl_.relativelocation_ = relativelocation;
  if (relativelocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeLocation)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativelocation() {
  
  ::unrealpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativelocation() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeLocation)
  
  ::unrealpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativelocation() {
  
  if (_impl_.relativelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativelocation_ = p;
  }
  return _impl_.relativelocation_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativelocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativelocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeLocation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativelocation(::unrealpb::FVector* relativelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativelocation_;
  }
  if (relativelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativelocation);
    if (message_arena != submessage_arena) {
      relativelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativelocation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relativelocation_ = relativelocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeLocation)
}

// .unrealpb.FVector relativeRotation = 13;
inline bool SceneComponentState::_internal_has_relativerotation() const {
  return this != internal_default_instance() && _impl_.relativerotation_ != nullptr;
}
inline bool SceneComponentState::has_relativerotation() const {
  return _internal_has_relativerotation();
}
inline void SceneComponentState::clear_relativerotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.relativerotation_ != nullptr) {
    delete _impl_.relativerotation_;
  }
  _impl_.relativerotation_ = nullptr;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativerotation() const {
  const ::unrealpb::FVector* p = _impl_.relativerotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeRotation)
  return _internal_relativerotation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativerotation(
    ::unrealpb::FVector* relativerotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativerotation_);
  }
  _impl_.relativerotation_ = relativerotation;
  if (relativerotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeRotation)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativerotation() {
  
  ::unrealpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativerotation() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeRotation)
  
  ::unrealpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativerotation() {
  
  if (_impl_.relativerotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativerotation_ = p;
  }
  return _impl_.relativerotation_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativerotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativerotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeRotation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativerotation(::unrealpb::FVector* relativerotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativerotation_;
  }
  if (relativerotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativerotation);
    if (message_arena != submessage_arena) {
      relativerotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativerotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relativerotation_ = relativerotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeRotation)
}

// .unrealpb.FVector relativeScale = 14;
inline bool SceneComponentState::_internal_has_relativescale() const {
  return this != internal_default_instance() && _impl_.relativescale_ != nullptr;
}
inline bool SceneComponentState::has_relativescale() const {
  return _internal_has_relativescale();
}
inline void SceneComponentState::clear_relativescale() {
  if (GetArenaForAllocation() == nullptr && _impl_.relativescale_ != nullptr) {
    delete _impl_.relativescale_;
  }
  _impl_.relativescale_ = nullptr;
}
inline const ::unrealpb::FVector& SceneComponentState::_internal_relativescale() const {
  const ::unrealpb::FVector* p = _impl_.relativescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& SceneComponentState::relativescale() const {
  // @@protoc_insertion_point(field_get:unrealpb.SceneComponentState.relativeScale)
  return _internal_relativescale();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativescale(
    ::unrealpb::FVector* relativescale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativescale_);
  }
  _impl_.relativescale_ = relativescale;
  if (relativescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.SceneComponentState.relativeScale)
}
inline ::unrealpb::FVector* SceneComponentState::release_relativescale() {
  
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::unsafe_arena_release_relativescale() {
  // @@protoc_insertion_point(field_release:unrealpb.SceneComponentState.relativeScale)
  
  ::unrealpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* SceneComponentState::_internal_mutable_relativescale() {
  
  if (_impl_.relativescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.relativescale_ = p;
  }
  return _impl_.relativescale_;
}
inline ::unrealpb::FVector* SceneComponentState::mutable_relativescale() {
  ::unrealpb::FVector* _msg = _internal_mutable_relativescale();
  // @@protoc_insertion_point(field_mutable:unrealpb.SceneComponentState.relativeScale)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativescale(::unrealpb::FVector* relativescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativescale_;
  }
  if (relativescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativescale);
    if (message_arena != submessage_arena) {
      relativescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativescale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relativescale_ = relativescale;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.SceneComponentState.relativeScale)
}

// -------------------------------------------------------------------

// RootMotionMontage

// -------------------------------------------------------------------

// BasedMovementInfo

// .unrealpb.UnrealObjectRef movementBase = 1;
inline bool BasedMovementInfo::_internal_has_movementbase() const {
  return this != internal_default_instance() && _impl_.movementbase_ != nullptr;
}
inline bool BasedMovementInfo::has_movementbase() const {
  return _internal_has_movementbase();
}
inline void BasedMovementInfo::clear_movementbase() {
  if (GetArenaForAllocation() == nullptr && _impl_.movementbase_ != nullptr) {
    delete _impl_.movementbase_;
  }
  _impl_.movementbase_ = nullptr;
}
inline const ::unrealpb::UnrealObjectRef& BasedMovementInfo::_internal_movementbase() const {
  const ::unrealpb::UnrealObjectRef* p = _impl_.movementbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::UnrealObjectRef&>(
      ::unrealpb::_UnrealObjectRef_default_instance_);
}
inline const ::unrealpb::UnrealObjectRef& BasedMovementInfo::movementbase() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.movementBase)
  return _internal_movementbase();
}
inline void BasedMovementInfo::unsafe_arena_set_allocated_movementbase(
    ::unrealpb::UnrealObjectRef* movementbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.movementbase_);
  }
  _impl_.movementbase_ = movementbase;
  if (movementbase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.BasedMovementInfo.movementBase)
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::release_movementbase() {
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::unsafe_arena_release_movementbase() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.movementBase)
  
  ::unrealpb::UnrealObjectRef* temp = _impl_.movementbase_;
  _impl_.movementbase_ = nullptr;
  return temp;
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::_internal_mutable_movementbase() {
  
  if (_impl_.movementbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::UnrealObjectRef>(GetArenaForAllocation());
    _impl_.movementbase_ = p;
  }
  return _impl_.movementbase_;
}
inline ::unrealpb::UnrealObjectRef* BasedMovementInfo::mutable_movementbase() {
  ::unrealpb::UnrealObjectRef* _msg = _internal_mutable_movementbase();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.movementBase)
  return _msg;
}
inline void BasedMovementInfo::set_allocated_movementbase(::unrealpb::UnrealObjectRef* movementbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.movementbase_;
  }
  if (movementbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(movementbase);
    if (message_arena != submessage_arena) {
      movementbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movementbase, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.movementbase_ = movementbase;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.movementBase)
}

// string boneName = 2;
inline void BasedMovementInfo::clear_bonename() {
  _impl_.bonename_.ClearToEmpty();
}
inline const std::string& BasedMovementInfo::bonename() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.boneName)
  return _internal_bonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BasedMovementInfo::set_bonename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.boneName)
}
inline std::string* BasedMovementInfo::mutable_bonename() {
  std::string* _s = _internal_mutable_bonename();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.boneName)
  return _s;
}
inline const std::string& BasedMovementInfo::_internal_bonename() const {
  return _impl_.bonename_.Get();
}
inline void BasedMovementInfo::_internal_set_bonename(const std::string& value) {
  
  _impl_.bonename_.Set(value, GetArenaForAllocation());
}
inline std::string* BasedMovementInfo::_internal_mutable_bonename() {
  
  return _impl_.bonename_.Mutable(GetArenaForAllocation());
}
inline std::string* BasedMovementInfo::release_bonename() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.boneName)
  return _impl_.bonename_.Release();
}
inline void BasedMovementInfo::set_allocated_bonename(std::string* bonename) {
  if (bonename != nullptr) {
    
  } else {
    
  }
  _impl_.bonename_.SetAllocated(bonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bonename_.IsDefault()) {
    _impl_.bonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.boneName)
}

// .unrealpb.FVector location = 3;
inline bool BasedMovementInfo::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool BasedMovementInfo::has_location() const {
  return _internal_has_location();
}
inline void BasedMovementInfo::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::unrealpb::FVector& BasedMovementInfo::_internal_location() const {
  const ::unrealpb::FVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& BasedMovementInfo::location() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.location)
  return _internal_location();
}
inline void BasedMovementInfo::unsafe_arena_set_allocated_location(
    ::unrealpb::FVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.BasedMovementInfo.location)
}
inline ::unrealpb::FVector* BasedMovementInfo::release_location() {
  
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.location)
  
  ::unrealpb::FVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::unrealpb::FVector* BasedMovementInfo::mutable_location() {
  ::unrealpb::FVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.location)
  return _msg;
}
inline void BasedMovementInfo::set_allocated_location(::unrealpb::FVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.location)
}

// .unrealpb.FVector rotation = 4;
inline bool BasedMovementInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool BasedMovementInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void BasedMovementInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::unrealpb::FVector& BasedMovementInfo::_internal_rotation() const {
  const ::unrealpb::FVector* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& BasedMovementInfo::rotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.rotation)
  return _internal_rotation();
}
inline void BasedMovementInfo::unsafe_arena_set_allocated_rotation(
    ::unrealpb::FVector* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.BasedMovementInfo.rotation)
}
inline ::unrealpb::FVector* BasedMovementInfo::release_rotation() {
  
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:unrealpb.BasedMovementInfo.rotation)
  
  ::unrealpb::FVector* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* BasedMovementInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::unrealpb::FVector* BasedMovementInfo::mutable_rotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.BasedMovementInfo.rotation)
  return _msg;
}
inline void BasedMovementInfo::set_allocated_rotation(::unrealpb::FVector* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.BasedMovementInfo.rotation)
}

// bool bServerHasBaseComponent = 5;
inline void BasedMovementInfo::clear_bserverhasbasecomponent() {
  _impl_.bserverhasbasecomponent_ = false;
}
inline bool BasedMovementInfo::_internal_bserverhasbasecomponent() const {
  return _impl_.bserverhasbasecomponent_;
}
inline bool BasedMovementInfo::bserverhasbasecomponent() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.bServerHasBaseComponent)
  return _internal_bserverhasbasecomponent();
}
inline void BasedMovementInfo::_internal_set_bserverhasbasecomponent(bool value) {
  
  _impl_.bserverhasbasecomponent_ = value;
}
inline void BasedMovementInfo::set_bserverhasbasecomponent(bool value) {
  _internal_set_bserverhasbasecomponent(value);
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.bServerHasBaseComponent)
}

// bool bRelativeRotation = 6;
inline void BasedMovementInfo::clear_brelativerotation() {
  _impl_.brelativerotation_ = false;
}
inline bool BasedMovementInfo::_internal_brelativerotation() const {
  return _impl_.brelativerotation_;
}
inline bool BasedMovementInfo::brelativerotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.bRelativeRotation)
  return _internal_brelativerotation();
}
inline void BasedMovementInfo::_internal_set_brelativerotation(bool value) {
  
  _impl_.brelativerotation_ = value;
}
inline void BasedMovementInfo::set_brelativerotation(bool value) {
  _internal_set_brelativerotation(value);
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.bRelativeRotation)
}

// bool bServerHasVelocity = 7;
inline void BasedMovementInfo::clear_bserverhasvelocity() {
  _impl_.bserverhasvelocity_ = false;
}
inline bool BasedMovementInfo::_internal_bserverhasvelocity() const {
  return _impl_.bserverhasvelocity_;
}
inline bool BasedMovementInfo::bserverhasvelocity() const {
  // @@protoc_insertion_point(field_get:unrealpb.BasedMovementInfo.bServerHasVelocity)
  return _internal_bserverhasvelocity();
}
inline void BasedMovementInfo::_internal_set_bserverhasvelocity(bool value) {
  
  _impl_.bserverhasvelocity_ = value;
}
inline void BasedMovementInfo::set_bserverhasvelocity(bool value) {
  _internal_set_bserverhasvelocity(value);
  // @@protoc_insertion_point(field_set:unrealpb.BasedMovementInfo.bServerHasVelocity)
}

// -------------------------------------------------------------------

// CharacterState

// bool removed = 1;
inline void CharacterState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool CharacterState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool CharacterState::removed() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.removed)
  return _internal_removed();
}
inline void CharacterState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void CharacterState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.removed)
}

// .unrealpb.RootMotionMontage rootMotion = 2;
inline bool CharacterState::_internal_has_rootmotion() const {
  return this != internal_default_instance() && _impl_.rootmotion_ != nullptr;
}
inline bool CharacterState::has_rootmotion() const {
  return _internal_has_rootmotion();
}
inline void CharacterState::clear_rootmotion() {
  if (GetArenaForAllocation() == nullptr && _impl_.rootmotion_ != nullptr) {
    delete _impl_.rootmotion_;
  }
  _impl_.rootmotion_ = nullptr;
}
inline const ::unrealpb::RootMotionMontage& CharacterState::_internal_rootmotion() const {
  const ::unrealpb::RootMotionMontage* p = _impl_.rootmotion_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::RootMotionMontage&>(
      ::unrealpb::_RootMotionMontage_default_instance_);
}
inline const ::unrealpb::RootMotionMontage& CharacterState::rootmotion() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.rootMotion)
  return _internal_rootmotion();
}
inline void CharacterState::unsafe_arena_set_allocated_rootmotion(
    ::unrealpb::RootMotionMontage* rootmotion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootmotion_);
  }
  _impl_.rootmotion_ = rootmotion;
  if (rootmotion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.CharacterState.rootMotion)
}
inline ::unrealpb::RootMotionMontage* CharacterState::release_rootmotion() {
  
  ::unrealpb::RootMotionMontage* temp = _impl_.rootmotion_;
  _impl_.rootmotion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::RootMotionMontage* CharacterState::unsafe_arena_release_rootmotion() {
  // @@protoc_insertion_point(field_release:unrealpb.CharacterState.rootMotion)
  
  ::unrealpb::RootMotionMontage* temp = _impl_.rootmotion_;
  _impl_.rootmotion_ = nullptr;
  return temp;
}
inline ::unrealpb::RootMotionMontage* CharacterState::_internal_mutable_rootmotion() {
  
  if (_impl_.rootmotion_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::RootMotionMontage>(GetArenaForAllocation());
    _impl_.rootmotion_ = p;
  }
  return _impl_.rootmotion_;
}
inline ::unrealpb::RootMotionMontage* CharacterState::mutable_rootmotion() {
  ::unrealpb::RootMotionMontage* _msg = _internal_mutable_rootmotion();
  // @@protoc_insertion_point(field_mutable:unrealpb.CharacterState.rootMotion)
  return _msg;
}
inline void CharacterState::set_allocated_rootmotion(::unrealpb::RootMotionMontage* rootmotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rootmotion_;
  }
  if (rootmotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rootmotion);
    if (message_arena != submessage_arena) {
      rootmotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootmotion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rootmotion_ = rootmotion;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.CharacterState.rootMotion)
}

// .unrealpb.BasedMovementInfo basedMovement = 3;
inline bool CharacterState::_internal_has_basedmovement() const {
  return this != internal_default_instance() && _impl_.basedmovement_ != nullptr;
}
inline bool CharacterState::has_basedmovement() const {
  return _internal_has_basedmovement();
}
inline void CharacterState::clear_basedmovement() {
  if (GetArenaForAllocation() == nullptr && _impl_.basedmovement_ != nullptr) {
    delete _impl_.basedmovement_;
  }
  _impl_.basedmovement_ = nullptr;
}
inline const ::unrealpb::BasedMovementInfo& CharacterState::_internal_basedmovement() const {
  const ::unrealpb::BasedMovementInfo* p = _impl_.basedmovement_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::BasedMovementInfo&>(
      ::unrealpb::_BasedMovementInfo_default_instance_);
}
inline const ::unrealpb::BasedMovementInfo& CharacterState::basedmovement() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.basedMovement)
  return _internal_basedmovement();
}
inline void CharacterState::unsafe_arena_set_allocated_basedmovement(
    ::unrealpb::BasedMovementInfo* basedmovement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basedmovement_);
  }
  _impl_.basedmovement_ = basedmovement;
  if (basedmovement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.CharacterState.basedMovement)
}
inline ::unrealpb::BasedMovementInfo* CharacterState::release_basedmovement() {
  
  ::unrealpb::BasedMovementInfo* temp = _impl_.basedmovement_;
  _impl_.basedmovement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::BasedMovementInfo* CharacterState::unsafe_arena_release_basedmovement() {
  // @@protoc_insertion_point(field_release:unrealpb.CharacterState.basedMovement)
  
  ::unrealpb::BasedMovementInfo* temp = _impl_.basedmovement_;
  _impl_.basedmovement_ = nullptr;
  return temp;
}
inline ::unrealpb::BasedMovementInfo* CharacterState::_internal_mutable_basedmovement() {
  
  if (_impl_.basedmovement_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::BasedMovementInfo>(GetArenaForAllocation());
    _impl_.basedmovement_ = p;
  }
  return _impl_.basedmovement_;
}
inline ::unrealpb::BasedMovementInfo* CharacterState::mutable_basedmovement() {
  ::unrealpb::BasedMovementInfo* _msg = _internal_mutable_basedmovement();
  // @@protoc_insertion_point(field_mutable:unrealpb.CharacterState.basedMovement)
  return _msg;
}
inline void CharacterState::set_allocated_basedmovement(::unrealpb::BasedMovementInfo* basedmovement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basedmovement_;
  }
  if (basedmovement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basedmovement);
    if (message_arena != submessage_arena) {
      basedmovement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basedmovement, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basedmovement_ = basedmovement;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.CharacterState.basedMovement)
}

// float serverLastTransformUpdateTimeStamp = 4;
inline void CharacterState::clear_serverlasttransformupdatetimestamp() {
  _impl_.serverlasttransformupdatetimestamp_ = 0;
}
inline float CharacterState::_internal_serverlasttransformupdatetimestamp() const {
  return _impl_.serverlasttransformupdatetimestamp_;
}
inline float CharacterState::serverlasttransformupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.serverLastTransformUpdateTimeStamp)
  return _internal_serverlasttransformupdatetimestamp();
}
inline void CharacterState::_internal_set_serverlasttransformupdatetimestamp(float value) {
  
  _impl_.serverlasttransformupdatetimestamp_ = value;
}
inline void CharacterState::set_serverlasttransformupdatetimestamp(float value) {
  _internal_set_serverlasttransformupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.serverLastTransformUpdateTimeStamp)
}

// uint32 movementMode = 5;
inline void CharacterState::clear_movementmode() {
  _impl_.movementmode_ = 0u;
}
inline uint32_t CharacterState::_internal_movementmode() const {
  return _impl_.movementmode_;
}
inline uint32_t CharacterState::movementmode() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.movementMode)
  return _internal_movementmode();
}
inline void CharacterState::_internal_set_movementmode(uint32_t value) {
  
  _impl_.movementmode_ = value;
}
inline void CharacterState::set_movementmode(uint32_t value) {
  _internal_set_movementmode(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.movementMode)
}

// bool bIsCrouched = 6;
inline void CharacterState::clear_biscrouched() {
  _impl_.biscrouched_ = false;
}
inline bool CharacterState::_internal_biscrouched() const {
  return _impl_.biscrouched_;
}
inline bool CharacterState::biscrouched() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.bIsCrouched)
  return _internal_biscrouched();
}
inline void CharacterState::_internal_set_biscrouched(bool value) {
  
  _impl_.biscrouched_ = value;
}
inline void CharacterState::set_biscrouched(bool value) {
  _internal_set_biscrouched(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.bIsCrouched)
}

// bool bProxyIsJumpForceApplied = 7;
inline void CharacterState::clear_bproxyisjumpforceapplied() {
  _impl_.bproxyisjumpforceapplied_ = false;
}
inline bool CharacterState::_internal_bproxyisjumpforceapplied() const {
  return _impl_.bproxyisjumpforceapplied_;
}
inline bool CharacterState::bproxyisjumpforceapplied() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.bProxyIsJumpForceApplied)
  return _internal_bproxyisjumpforceapplied();
}
inline void CharacterState::_internal_set_bproxyisjumpforceapplied(bool value) {
  
  _impl_.bproxyisjumpforceapplied_ = value;
}
inline void CharacterState::set_bproxyisjumpforceapplied(bool value) {
  _internal_set_bproxyisjumpforceapplied(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.bProxyIsJumpForceApplied)
}

// float animRootMotionTranslationScale = 8;
inline void CharacterState::clear_animrootmotiontranslationscale() {
  _impl_.animrootmotiontranslationscale_ = 0;
}
inline float CharacterState::_internal_animrootmotiontranslationscale() const {
  return _impl_.animrootmotiontranslationscale_;
}
inline float CharacterState::animrootmotiontranslationscale() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.animRootMotionTranslationScale)
  return _internal_animrootmotiontranslationscale();
}
inline void CharacterState::_internal_set_animrootmotiontranslationscale(float value) {
  
  _impl_.animrootmotiontranslationscale_ = value;
}
inline void CharacterState::set_animrootmotiontranslationscale(float value) {
  _internal_set_animrootmotiontranslationscale(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.animRootMotionTranslationScale)
}

// float replayLastTransformUpdateTimeStamp = 9;
inline void CharacterState::clear_replaylasttransformupdatetimestamp() {
  _impl_.replaylasttransformupdatetimestamp_ = 0;
}
inline float CharacterState::_internal_replaylasttransformupdatetimestamp() const {
  return _impl_.replaylasttransformupdatetimestamp_;
}
inline float CharacterState::replaylasttransformupdatetimestamp() const {
  // @@protoc_insertion_point(field_get:unrealpb.CharacterState.replayLastTransformUpdateTimeStamp)
  return _internal_replaylasttransformupdatetimestamp();
}
inline void CharacterState::_internal_set_replaylasttransformupdatetimestamp(float value) {
  
  _impl_.replaylasttransformupdatetimestamp_ = value;
}
inline void CharacterState::set_replaylasttransformupdatetimestamp(float value) {
  _internal_set_replaylasttransformupdatetimestamp(value);
  // @@protoc_insertion_point(field_set:unrealpb.CharacterState.replayLastTransformUpdateTimeStamp)
}

// -------------------------------------------------------------------

// Character_ServerMovePacked_Params

// bytes PackedBits = 1;
inline void Character_ServerMovePacked_Params::clear_packedbits() {
  _impl_.packedbits_.ClearToEmpty();
}
inline const std::string& Character_ServerMovePacked_Params::packedbits() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ServerMovePacked_Params.PackedBits)
  return _internal_packedbits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character_ServerMovePacked_Params::set_packedbits(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packedbits_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.Character_ServerMovePacked_Params.PackedBits)
}
inline std::string* Character_ServerMovePacked_Params::mutable_packedbits() {
  std::string* _s = _internal_mutable_packedbits();
  // @@protoc_insertion_point(field_mutable:unrealpb.Character_ServerMovePacked_Params.PackedBits)
  return _s;
}
inline const std::string& Character_ServerMovePacked_Params::_internal_packedbits() const {
  return _impl_.packedbits_.Get();
}
inline void Character_ServerMovePacked_Params::_internal_set_packedbits(const std::string& value) {
  
  _impl_.packedbits_.Set(value, GetArenaForAllocation());
}
inline std::string* Character_ServerMovePacked_Params::_internal_mutable_packedbits() {
  
  return _impl_.packedbits_.Mutable(GetArenaForAllocation());
}
inline std::string* Character_ServerMovePacked_Params::release_packedbits() {
  // @@protoc_insertion_point(field_release:unrealpb.Character_ServerMovePacked_Params.PackedBits)
  return _impl_.packedbits_.Release();
}
inline void Character_ServerMovePacked_Params::set_allocated_packedbits(std::string* packedbits) {
  if (packedbits != nullptr) {
    
  } else {
    
  }
  _impl_.packedbits_.SetAllocated(packedbits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packedbits_.IsDefault()) {
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Character_ServerMovePacked_Params.PackedBits)
}

// -------------------------------------------------------------------

// Character_ClientMoveResponsePacked_Params

// bytes PackedBits = 1;
inline void Character_ClientMoveResponsePacked_Params::clear_packedbits() {
  _impl_.packedbits_.ClearToEmpty();
}
inline const std::string& Character_ClientMoveResponsePacked_Params::packedbits() const {
  // @@protoc_insertion_point(field_get:unrealpb.Character_ClientMoveResponsePacked_Params.PackedBits)
  return _internal_packedbits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Character_ClientMoveResponsePacked_Params::set_packedbits(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packedbits_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:unrealpb.Character_ClientMoveResponsePacked_Params.PackedBits)
}
inline std::string* Character_ClientMoveResponsePacked_Params::mutable_packedbits() {
  std::string* _s = _internal_mutable_packedbits();
  // @@protoc_insertion_point(field_mutable:unrealpb.Character_ClientMoveResponsePacked_Params.PackedBits)
  return _s;
}
inline const std::string& Character_ClientMoveResponsePacked_Params::_internal_packedbits() const {
  return _impl_.packedbits_.Get();
}
inline void Character_ClientMoveResponsePacked_Params::_internal_set_packedbits(const std::string& value) {
  
  _impl_.packedbits_.Set(value, GetArenaForAllocation());
}
inline std::string* Character_ClientMoveResponsePacked_Params::_internal_mutable_packedbits() {
  
  return _impl_.packedbits_.Mutable(GetArenaForAllocation());
}
inline std::string* Character_ClientMoveResponsePacked_Params::release_packedbits() {
  // @@protoc_insertion_point(field_release:unrealpb.Character_ClientMoveResponsePacked_Params.PackedBits)
  return _impl_.packedbits_.Release();
}
inline void Character_ClientMoveResponsePacked_Params::set_allocated_packedbits(std::string* packedbits) {
  if (packedbits != nullptr) {
    
  } else {
    
  }
  _impl_.packedbits_.SetAllocated(packedbits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packedbits_.IsDefault()) {
    _impl_.packedbits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:unrealpb.Character_ClientMoveResponsePacked_Params.PackedBits)
}

// -------------------------------------------------------------------

// PlayerControllerState

// .unrealpb.FVector targetViewRotation = 1;
inline bool PlayerControllerState::_internal_has_targetviewrotation() const {
  return this != internal_default_instance() && _impl_.targetviewrotation_ != nullptr;
}
inline bool PlayerControllerState::has_targetviewrotation() const {
  return _internal_has_targetviewrotation();
}
inline void PlayerControllerState::clear_targetviewrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetviewrotation_ != nullptr) {
    delete _impl_.targetviewrotation_;
  }
  _impl_.targetviewrotation_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerControllerState::_internal_targetviewrotation() const {
  const ::unrealpb::FVector* p = _impl_.targetviewrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerControllerState::targetviewrotation() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerControllerState.targetViewRotation)
  return _internal_targetviewrotation();
}
inline void PlayerControllerState::unsafe_arena_set_allocated_targetviewrotation(
    ::unrealpb::FVector* targetviewrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetviewrotation_);
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  if (targetviewrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerControllerState.targetViewRotation)
}
inline ::unrealpb::FVector* PlayerControllerState::release_targetviewrotation() {
  
  ::unrealpb::FVector* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::unsafe_arena_release_targetviewrotation() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerControllerState.targetViewRotation)
  
  ::unrealpb::FVector* temp = _impl_.targetviewrotation_;
  _impl_.targetviewrotation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::_internal_mutable_targetviewrotation() {
  
  if (_impl_.targetviewrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.targetviewrotation_ = p;
  }
  return _impl_.targetviewrotation_;
}
inline ::unrealpb::FVector* PlayerControllerState::mutable_targetviewrotation() {
  ::unrealpb::FVector* _msg = _internal_mutable_targetviewrotation();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerControllerState.targetViewRotation)
  return _msg;
}
inline void PlayerControllerState::set_allocated_targetviewrotation(::unrealpb::FVector* targetviewrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetviewrotation_;
  }
  if (targetviewrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetviewrotation);
    if (message_arena != submessage_arena) {
      targetviewrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetviewrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.targetviewrotation_ = targetviewrotation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerControllerState.targetViewRotation)
}

// .unrealpb.FVector spawnLocation = 2;
inline bool PlayerControllerState::_internal_has_spawnlocation() const {
  return this != internal_default_instance() && _impl_.spawnlocation_ != nullptr;
}
inline bool PlayerControllerState::has_spawnlocation() const {
  return _internal_has_spawnlocation();
}
inline void PlayerControllerState::clear_spawnlocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.spawnlocation_ != nullptr) {
    delete _impl_.spawnlocation_;
  }
  _impl_.spawnlocation_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerControllerState::_internal_spawnlocation() const {
  const ::unrealpb::FVector* p = _impl_.spawnlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerControllerState::spawnlocation() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerControllerState.spawnLocation)
  return _internal_spawnlocation();
}
inline void PlayerControllerState::unsafe_arena_set_allocated_spawnlocation(
    ::unrealpb::FVector* spawnlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawnlocation_);
  }
  _impl_.spawnlocation_ = spawnlocation;
  if (spawnlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerControllerState.spawnLocation)
}
inline ::unrealpb::FVector* PlayerControllerState::release_spawnlocation() {
  
  ::unrealpb::FVector* temp = _impl_.spawnlocation_;
  _impl_.spawnlocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::unsafe_arena_release_spawnlocation() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerControllerState.spawnLocation)
  
  ::unrealpb::FVector* temp = _impl_.spawnlocation_;
  _impl_.spawnlocation_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerControllerState::_internal_mutable_spawnlocation() {
  
  if (_impl_.spawnlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.spawnlocation_ = p;
  }
  return _impl_.spawnlocation_;
}
inline ::unrealpb::FVector* PlayerControllerState::mutable_spawnlocation() {
  ::unrealpb::FVector* _msg = _internal_mutable_spawnlocation();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerControllerState.spawnLocation)
  return _msg;
}
inline void PlayerControllerState::set_allocated_spawnlocation(::unrealpb::FVector* spawnlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spawnlocation_;
  }
  if (spawnlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spawnlocation);
    if (message_arena != submessage_arena) {
      spawnlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawnlocation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spawnlocation_ = spawnlocation;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerControllerState.spawnLocation)
}

// -------------------------------------------------------------------

// PlayerController_ServerUpdateCamera_Params

// .unrealpb.FVector camLoc = 1;
inline bool PlayerController_ServerUpdateCamera_Params::_internal_has_camloc() const {
  return this != internal_default_instance() && _impl_.camloc_ != nullptr;
}
inline bool PlayerController_ServerUpdateCamera_Params::has_camloc() const {
  return _internal_has_camloc();
}
inline void PlayerController_ServerUpdateCamera_Params::clear_camloc() {
  if (GetArenaForAllocation() == nullptr && _impl_.camloc_ != nullptr) {
    delete _impl_.camloc_;
  }
  _impl_.camloc_ = nullptr;
}
inline const ::unrealpb::FVector& PlayerController_ServerUpdateCamera_Params::_internal_camloc() const {
  const ::unrealpb::FVector* p = _impl_.camloc_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::FVector&>(
      ::unrealpb::_FVector_default_instance_);
}
inline const ::unrealpb::FVector& PlayerController_ServerUpdateCamera_Params::camloc() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  return _internal_camloc();
}
inline void PlayerController_ServerUpdateCamera_Params::unsafe_arena_set_allocated_camloc(
    ::unrealpb::FVector* camloc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camloc_);
  }
  _impl_.camloc_ = camloc;
  if (camloc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::release_camloc() {
  
  ::unrealpb::FVector* temp = _impl_.camloc_;
  _impl_.camloc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::unsafe_arena_release_camloc() {
  // @@protoc_insertion_point(field_release:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  
  ::unrealpb::FVector* temp = _impl_.camloc_;
  _impl_.camloc_ = nullptr;
  return temp;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::_internal_mutable_camloc() {
  
  if (_impl_.camloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::FVector>(GetArenaForAllocation());
    _impl_.camloc_ = p;
  }
  return _impl_.camloc_;
}
inline ::unrealpb::FVector* PlayerController_ServerUpdateCamera_Params::mutable_camloc() {
  ::unrealpb::FVector* _msg = _internal_mutable_camloc();
  // @@protoc_insertion_point(field_mutable:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
  return _msg;
}
inline void PlayerController_ServerUpdateCamera_Params::set_allocated_camloc(::unrealpb::FVector* camloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.camloc_;
  }
  if (camloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camloc);
    if (message_arena != submessage_arena) {
      camloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camloc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camloc_ = camloc;
  // @@protoc_insertion_point(field_set_allocated:unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc)
}

// int32 camPitchAndYaw = 2;
inline void PlayerController_ServerUpdateCamera_Params::clear_campitchandyaw() {
  _impl_.campitchandyaw_ = 0;
}
inline int32_t PlayerController_ServerUpdateCamera_Params::_internal_campitchandyaw() const {
  return _impl_.campitchandyaw_;
}
inline int32_t PlayerController_ServerUpdateCamera_Params::campitchandyaw() const {
  // @@protoc_insertion_point(field_get:unrealpb.PlayerController_ServerUpdateCamera_Params.camPitchAndYaw)
  return _internal_campitchandyaw();
}
inline void PlayerController_ServerUpdateCamera_Params::_internal_set_campitchandyaw(int32_t value) {
  
  _impl_.campitchandyaw_ = value;
}
inline void PlayerController_ServerUpdateCamera_Params::set_campitchandyaw(int32_t value) {
  _internal_set_campitchandyaw(value);
  // @@protoc_insertion_point(field_set:unrealpb.PlayerController_ServerUpdateCamera_Params.camPitchAndYaw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace unrealpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

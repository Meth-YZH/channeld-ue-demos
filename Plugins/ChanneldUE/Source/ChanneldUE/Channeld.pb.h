// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channeld.proto

#ifndef PROTOBUF_channeld_2eproto__INCLUDED
#define PROTOBUF_channeld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_channeld_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[27];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPacketImpl();
void InitDefaultsPacket();
void InitDefaultsMessagePackImpl();
void InitDefaultsMessagePack();
void InitDefaultsServerForwardMessageImpl();
void InitDefaultsServerForwardMessage();
void InitDefaultsAuthMessageImpl();
void InitDefaultsAuthMessage();
void InitDefaultsAuthResultMessageImpl();
void InitDefaultsAuthResultMessage();
void InitDefaultsChannelSubscriptionOptionsImpl();
void InitDefaultsChannelSubscriptionOptions();
void InitDefaultsChannelDataMergeOptionsImpl();
void InitDefaultsChannelDataMergeOptions();
void InitDefaultsCreateChannelMessageImpl();
void InitDefaultsCreateChannelMessage();
void InitDefaultsCreateChannelResultMessageImpl();
void InitDefaultsCreateChannelResultMessage();
void InitDefaultsRemoveChannelMessageImpl();
void InitDefaultsRemoveChannelMessage();
void InitDefaultsListChannelMessageImpl();
void InitDefaultsListChannelMessage();
void InitDefaultsListChannelResultMessage_ChannelInfoImpl();
void InitDefaultsListChannelResultMessage_ChannelInfo();
void InitDefaultsListChannelResultMessageImpl();
void InitDefaultsListChannelResultMessage();
void InitDefaultsSubscribedToChannelMessageImpl();
void InitDefaultsSubscribedToChannelMessage();
void InitDefaultsSubscribedToChannelResultMessageImpl();
void InitDefaultsSubscribedToChannelResultMessage();
void InitDefaultsUnsubscribedFromChannelMessageImpl();
void InitDefaultsUnsubscribedFromChannelMessage();
void InitDefaultsUnsubscribedFromChannelResultMessageImpl();
void InitDefaultsUnsubscribedFromChannelResultMessage();
void InitDefaultsChannelDataUpdateMessageImpl();
void InitDefaultsChannelDataUpdateMessage();
void InitDefaultsDisconnectMessageImpl();
void InitDefaultsDisconnectMessage();
void InitDefaultsSpatialInfoImpl();
void InitDefaultsSpatialInfo();
void InitDefaultsCreateSpatialChannelsResultMessageImpl();
void InitDefaultsCreateSpatialChannelsResultMessage();
void InitDefaultsQuerySpatialChannelMessageImpl();
void InitDefaultsQuerySpatialChannelMessage();
void InitDefaultsQuerySpatialChannelResultMessageImpl();
void InitDefaultsQuerySpatialChannelResultMessage();
void InitDefaultsChannelDataHandoverMessageImpl();
void InitDefaultsChannelDataHandoverMessage();
void InitDefaultsSpatialRegionImpl();
void InitDefaultsSpatialRegion();
void InitDefaultsSpatialRegionsUpdateMessageImpl();
void InitDefaultsSpatialRegionsUpdateMessage();
void InitDefaultsDebugGetSpatialRegionsMessageImpl();
void InitDefaultsDebugGetSpatialRegionsMessage();
inline void InitDefaults() {
  InitDefaultsPacket();
  InitDefaultsMessagePack();
  InitDefaultsServerForwardMessage();
  InitDefaultsAuthMessage();
  InitDefaultsAuthResultMessage();
  InitDefaultsChannelSubscriptionOptions();
  InitDefaultsChannelDataMergeOptions();
  InitDefaultsCreateChannelMessage();
  InitDefaultsCreateChannelResultMessage();
  InitDefaultsRemoveChannelMessage();
  InitDefaultsListChannelMessage();
  InitDefaultsListChannelResultMessage_ChannelInfo();
  InitDefaultsListChannelResultMessage();
  InitDefaultsSubscribedToChannelMessage();
  InitDefaultsSubscribedToChannelResultMessage();
  InitDefaultsUnsubscribedFromChannelMessage();
  InitDefaultsUnsubscribedFromChannelResultMessage();
  InitDefaultsChannelDataUpdateMessage();
  InitDefaultsDisconnectMessage();
  InitDefaultsSpatialInfo();
  InitDefaultsCreateSpatialChannelsResultMessage();
  InitDefaultsQuerySpatialChannelMessage();
  InitDefaultsQuerySpatialChannelResultMessage();
  InitDefaultsChannelDataHandoverMessage();
  InitDefaultsSpatialRegion();
  InitDefaultsSpatialRegionsUpdateMessage();
  InitDefaultsDebugGetSpatialRegionsMessage();
}
}  // namespace protobuf_channeld_2eproto
namespace channeldpb {
class AuthMessage;
class AuthMessageDefaultTypeInternal;
extern AuthMessageDefaultTypeInternal _AuthMessage_default_instance_;
class AuthResultMessage;
class AuthResultMessageDefaultTypeInternal;
extern AuthResultMessageDefaultTypeInternal _AuthResultMessage_default_instance_;
class ChannelDataHandoverMessage;
class ChannelDataHandoverMessageDefaultTypeInternal;
extern ChannelDataHandoverMessageDefaultTypeInternal _ChannelDataHandoverMessage_default_instance_;
class ChannelDataMergeOptions;
class ChannelDataMergeOptionsDefaultTypeInternal;
extern ChannelDataMergeOptionsDefaultTypeInternal _ChannelDataMergeOptions_default_instance_;
class ChannelDataUpdateMessage;
class ChannelDataUpdateMessageDefaultTypeInternal;
extern ChannelDataUpdateMessageDefaultTypeInternal _ChannelDataUpdateMessage_default_instance_;
class ChannelSubscriptionOptions;
class ChannelSubscriptionOptionsDefaultTypeInternal;
extern ChannelSubscriptionOptionsDefaultTypeInternal _ChannelSubscriptionOptions_default_instance_;
class CreateChannelMessage;
class CreateChannelMessageDefaultTypeInternal;
extern CreateChannelMessageDefaultTypeInternal _CreateChannelMessage_default_instance_;
class CreateChannelResultMessage;
class CreateChannelResultMessageDefaultTypeInternal;
extern CreateChannelResultMessageDefaultTypeInternal _CreateChannelResultMessage_default_instance_;
class CreateSpatialChannelsResultMessage;
class CreateSpatialChannelsResultMessageDefaultTypeInternal;
extern CreateSpatialChannelsResultMessageDefaultTypeInternal _CreateSpatialChannelsResultMessage_default_instance_;
class DebugGetSpatialRegionsMessage;
class DebugGetSpatialRegionsMessageDefaultTypeInternal;
extern DebugGetSpatialRegionsMessageDefaultTypeInternal _DebugGetSpatialRegionsMessage_default_instance_;
class DisconnectMessage;
class DisconnectMessageDefaultTypeInternal;
extern DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
class ListChannelMessage;
class ListChannelMessageDefaultTypeInternal;
extern ListChannelMessageDefaultTypeInternal _ListChannelMessage_default_instance_;
class ListChannelResultMessage;
class ListChannelResultMessageDefaultTypeInternal;
extern ListChannelResultMessageDefaultTypeInternal _ListChannelResultMessage_default_instance_;
class ListChannelResultMessage_ChannelInfo;
class ListChannelResultMessage_ChannelInfoDefaultTypeInternal;
extern ListChannelResultMessage_ChannelInfoDefaultTypeInternal _ListChannelResultMessage_ChannelInfo_default_instance_;
class MessagePack;
class MessagePackDefaultTypeInternal;
extern MessagePackDefaultTypeInternal _MessagePack_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class QuerySpatialChannelMessage;
class QuerySpatialChannelMessageDefaultTypeInternal;
extern QuerySpatialChannelMessageDefaultTypeInternal _QuerySpatialChannelMessage_default_instance_;
class QuerySpatialChannelResultMessage;
class QuerySpatialChannelResultMessageDefaultTypeInternal;
extern QuerySpatialChannelResultMessageDefaultTypeInternal _QuerySpatialChannelResultMessage_default_instance_;
class RemoveChannelMessage;
class RemoveChannelMessageDefaultTypeInternal;
extern RemoveChannelMessageDefaultTypeInternal _RemoveChannelMessage_default_instance_;
class ServerForwardMessage;
class ServerForwardMessageDefaultTypeInternal;
extern ServerForwardMessageDefaultTypeInternal _ServerForwardMessage_default_instance_;
class SpatialInfo;
class SpatialInfoDefaultTypeInternal;
extern SpatialInfoDefaultTypeInternal _SpatialInfo_default_instance_;
class SpatialRegion;
class SpatialRegionDefaultTypeInternal;
extern SpatialRegionDefaultTypeInternal _SpatialRegion_default_instance_;
class SpatialRegionsUpdateMessage;
class SpatialRegionsUpdateMessageDefaultTypeInternal;
extern SpatialRegionsUpdateMessageDefaultTypeInternal _SpatialRegionsUpdateMessage_default_instance_;
class SubscribedToChannelMessage;
class SubscribedToChannelMessageDefaultTypeInternal;
extern SubscribedToChannelMessageDefaultTypeInternal _SubscribedToChannelMessage_default_instance_;
class SubscribedToChannelResultMessage;
class SubscribedToChannelResultMessageDefaultTypeInternal;
extern SubscribedToChannelResultMessageDefaultTypeInternal _SubscribedToChannelResultMessage_default_instance_;
class UnsubscribedFromChannelMessage;
class UnsubscribedFromChannelMessageDefaultTypeInternal;
extern UnsubscribedFromChannelMessageDefaultTypeInternal _UnsubscribedFromChannelMessage_default_instance_;
class UnsubscribedFromChannelResultMessage;
class UnsubscribedFromChannelResultMessageDefaultTypeInternal;
extern UnsubscribedFromChannelResultMessageDefaultTypeInternal _UnsubscribedFromChannelResultMessage_default_instance_;
}  // namespace channeldpb
namespace channeldpb {

enum AuthResultMessage_AuthResult {
  AuthResultMessage_AuthResult_SUCCESSFUL = 0,
  AuthResultMessage_AuthResult_INVALID_PIT = 1,
  AuthResultMessage_AuthResult_INVALID_LT = 2,
  AuthResultMessage_AuthResult_AuthResultMessage_AuthResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AuthResultMessage_AuthResult_AuthResultMessage_AuthResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AuthResultMessage_AuthResult_IsValid(int value);
const AuthResultMessage_AuthResult AuthResultMessage_AuthResult_AuthResult_MIN = AuthResultMessage_AuthResult_SUCCESSFUL;
const AuthResultMessage_AuthResult AuthResultMessage_AuthResult_AuthResult_MAX = AuthResultMessage_AuthResult_INVALID_LT;
const int AuthResultMessage_AuthResult_AuthResult_ARRAYSIZE = AuthResultMessage_AuthResult_AuthResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuthResultMessage_AuthResult_descriptor();
inline const ::std::string& AuthResultMessage_AuthResult_Name(AuthResultMessage_AuthResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuthResultMessage_AuthResult_descriptor(), value);
}
inline bool AuthResultMessage_AuthResult_Parse(
    const ::std::string& name, AuthResultMessage_AuthResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthResultMessage_AuthResult>(
    AuthResultMessage_AuthResult_descriptor(), name, value);
}
enum BroadcastType {
  NO_BROADCAST = 0,
  ALL = 1,
  ALL_BUT_SENDER = 2,
  ALL_BUT_OWNER = 4,
  SINGLE_CONNECTION = 8,
  ADJACENT_CHANNELS = 16,
  BroadcastType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BroadcastType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BroadcastType_IsValid(int value);
const BroadcastType BroadcastType_MIN = NO_BROADCAST;
const BroadcastType BroadcastType_MAX = ADJACENT_CHANNELS;
const int BroadcastType_ARRAYSIZE = BroadcastType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BroadcastType_descriptor();
inline const ::std::string& BroadcastType_Name(BroadcastType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BroadcastType_descriptor(), value);
}
inline bool BroadcastType_Parse(
    const ::std::string& name, BroadcastType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BroadcastType>(
    BroadcastType_descriptor(), name, value);
}
enum ConnectionType {
  NO_CONNECTION = 0,
  SERVER = 1,
  CLIENT = 2,
  ConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConnectionType_IsValid(int value);
const ConnectionType ConnectionType_MIN = NO_CONNECTION;
const ConnectionType ConnectionType_MAX = CLIENT;
const int ConnectionType_ARRAYSIZE = ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor();
inline const ::std::string& ConnectionType_Name(ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionType_descriptor(), value);
}
inline bool ConnectionType_Parse(
    const ::std::string& name, ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionType>(
    ConnectionType_descriptor(), name, value);
}
enum ChannelType {
  UNKNOWN = 0,
  GLOBAL = 1,
  PRIVATE = 2,
  SUBWORLD = 3,
  SPATIAL = 4,
  TEST = 100,
  TEST1 = 101,
  TEST2 = 102,
  TEST3 = 103,
  TEST4 = 104,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = UNKNOWN;
const ChannelType ChannelType_MAX = TEST4;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
enum MessageType {
  INVALID = 0,
  AUTH = 1,
  CREATE_CHANNEL = 3,
  REMOVE_CHANNEL = 4,
  LIST_CHANNEL = 5,
  SUB_TO_CHANNEL = 6,
  UNSUB_FROM_CHANNEL = 7,
  CHANNEL_DATA_UPDATE = 8,
  DISCONNECT = 9,
  CREATE_SPATIAL_CHANNEL = 10,
  QUERY_SPATIAL_CHANNEL = 11,
  CHANNEL_DATA_HANDOVER = 12,
  SPATIAL_REGIONS_UPDATE = 13,
  DEBUG_GET_SPATIAL_REGIONS = 99,
  USER_SPACE_START = 100,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = INVALID;
const MessageType MessageType_MAX = USER_SPACE_START;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum CompressionType {
  NO_COMPRESSION = 0,
  SNAPPY = 1,
  CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CompressionType_IsValid(int value);
const CompressionType CompressionType_MIN = NO_COMPRESSION;
const CompressionType CompressionType_MAX = SNAPPY;
const int CompressionType_ARRAYSIZE = CompressionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressionType_descriptor();
inline const ::std::string& CompressionType_Name(CompressionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressionType_descriptor(), value);
}
inline bool CompressionType_Parse(
    const ::std::string& name, CompressionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressionType>(
    CompressionType_descriptor(), name, value);
}
enum ChannelDataAccess {
  NO_ACCESS = 0,
  READ_ACCESS = 1,
  WRITE_ACCESS = 2,
  ChannelDataAccess_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChannelDataAccess_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChannelDataAccess_IsValid(int value);
const ChannelDataAccess ChannelDataAccess_MIN = NO_ACCESS;
const ChannelDataAccess ChannelDataAccess_MAX = WRITE_ACCESS;
const int ChannelDataAccess_ARRAYSIZE = ChannelDataAccess_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelDataAccess_descriptor();
inline const ::std::string& ChannelDataAccess_Name(ChannelDataAccess value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelDataAccess_descriptor(), value);
}
inline bool ChannelDataAccess_Parse(
    const ::std::string& name, ChannelDataAccess* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelDataAccess>(
    ChannelDataAccess_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const PROTOBUF_FINAL { return New(NULL); }

  Packet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .channeldpb.MessagePack messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::channeldpb::MessagePack& messages(int index) const;
  ::channeldpb::MessagePack* mutable_messages(int index);
  ::channeldpb::MessagePack* add_messages();
  ::google::protobuf::RepeatedPtrField< ::channeldpb::MessagePack >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::channeldpb::MessagePack >&
      messages() const;

  // @@protoc_insertion_point(class_scope:channeldpb.Packet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::channeldpb::MessagePack > messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsPacketImpl();
};
// -------------------------------------------------------------------

class MessagePack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.MessagePack) */ {
 public:
  MessagePack();
  virtual ~MessagePack();

  MessagePack(const MessagePack& from);

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessagePack(MessagePack&& from) noexcept
    : MessagePack() {
    *this = ::std::move(from);
  }

  inline MessagePack& operator=(MessagePack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagePack* internal_default_instance() {
    return reinterpret_cast<const MessagePack*>(
               &_MessagePack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MessagePack* other);
  friend void swap(MessagePack& a, MessagePack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessagePack* New() const PROTOBUF_FINAL { return New(NULL); }

  MessagePack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessagePack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgBody = 5;
  void clear_msgbody();
  static const int kMsgBodyFieldNumber = 5;
  const ::std::string& msgbody() const;
  void set_msgbody(const ::std::string& value);
  #if LANG_CXX11
  void set_msgbody(::std::string&& value);
  #endif
  void set_msgbody(const char* value);
  void set_msgbody(const void* value, size_t size);
  ::std::string* mutable_msgbody();
  ::std::string* release_msgbody();
  void set_allocated_msgbody(::std::string* msgbody);

  // uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // uint32 broadcast = 2;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 2;
  ::google::protobuf::uint32 broadcast() const;
  void set_broadcast(::google::protobuf::uint32 value);

  // uint32 stubId = 3;
  void clear_stubid();
  static const int kStubIdFieldNumber = 3;
  ::google::protobuf::uint32 stubid() const;
  void set_stubid(::google::protobuf::uint32 value);

  // uint32 msgType = 4;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.MessagePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgbody_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 broadcast_;
  ::google::protobuf::uint32 stubid_;
  ::google::protobuf::uint32 msgtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsMessagePackImpl();
};
// -------------------------------------------------------------------

class ServerForwardMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ServerForwardMessage) */ {
 public:
  ServerForwardMessage();
  virtual ~ServerForwardMessage();

  ServerForwardMessage(const ServerForwardMessage& from);

  inline ServerForwardMessage& operator=(const ServerForwardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerForwardMessage(ServerForwardMessage&& from) noexcept
    : ServerForwardMessage() {
    *this = ::std::move(from);
  }

  inline ServerForwardMessage& operator=(ServerForwardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerForwardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerForwardMessage* internal_default_instance() {
    return reinterpret_cast<const ServerForwardMessage*>(
               &_ServerForwardMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServerForwardMessage* other);
  friend void swap(ServerForwardMessage& a, ServerForwardMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerForwardMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerForwardMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerForwardMessage& from);
  void MergeFrom(const ServerForwardMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerForwardMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint32 clientConnId = 1;
  void clear_clientconnid();
  static const int kClientConnIdFieldNumber = 1;
  ::google::protobuf::uint32 clientconnid() const;
  void set_clientconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.ServerForwardMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 clientconnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsServerForwardMessageImpl();
};
// -------------------------------------------------------------------

class AuthMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.AuthMessage) */ {
 public:
  AuthMessage();
  virtual ~AuthMessage();

  AuthMessage(const AuthMessage& from);

  inline AuthMessage& operator=(const AuthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthMessage(AuthMessage&& from) noexcept
    : AuthMessage() {
    *this = ::std::move(from);
  }

  inline AuthMessage& operator=(AuthMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthMessage* internal_default_instance() {
    return reinterpret_cast<const AuthMessage*>(
               &_AuthMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AuthMessage* other);
  friend void swap(AuthMessage& a, AuthMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthMessage& from);
  void MergeFrom(const AuthMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string playerIdentifierToken = 1;
  void clear_playeridentifiertoken();
  static const int kPlayerIdentifierTokenFieldNumber = 1;
  const ::std::string& playeridentifiertoken() const;
  void set_playeridentifiertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_playeridentifiertoken(::std::string&& value);
  #endif
  void set_playeridentifiertoken(const char* value);
  void set_playeridentifiertoken(const char* value, size_t size);
  ::std::string* mutable_playeridentifiertoken();
  ::std::string* release_playeridentifiertoken();
  void set_allocated_playeridentifiertoken(::std::string* playeridentifiertoken);

  // string loginToken = 2;
  void clear_logintoken();
  static const int kLoginTokenFieldNumber = 2;
  const ::std::string& logintoken() const;
  void set_logintoken(const ::std::string& value);
  #if LANG_CXX11
  void set_logintoken(::std::string&& value);
  #endif
  void set_logintoken(const char* value);
  void set_logintoken(const char* value, size_t size);
  ::std::string* mutable_logintoken();
  ::std::string* release_logintoken();
  void set_allocated_logintoken(::std::string* logintoken);

  // @@protoc_insertion_point(class_scope:channeldpb.AuthMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playeridentifiertoken_;
  ::google::protobuf::internal::ArenaStringPtr logintoken_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsAuthMessageImpl();
};
// -------------------------------------------------------------------

class AuthResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.AuthResultMessage) */ {
 public:
  AuthResultMessage();
  virtual ~AuthResultMessage();

  AuthResultMessage(const AuthResultMessage& from);

  inline AuthResultMessage& operator=(const AuthResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthResultMessage(AuthResultMessage&& from) noexcept
    : AuthResultMessage() {
    *this = ::std::move(from);
  }

  inline AuthResultMessage& operator=(AuthResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthResultMessage* internal_default_instance() {
    return reinterpret_cast<const AuthResultMessage*>(
               &_AuthResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AuthResultMessage* other);
  friend void swap(AuthResultMessage& a, AuthResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthResultMessage& from);
  void MergeFrom(const AuthResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AuthResultMessage_AuthResult AuthResult;
  static const AuthResult SUCCESSFUL =
    AuthResultMessage_AuthResult_SUCCESSFUL;
  static const AuthResult INVALID_PIT =
    AuthResultMessage_AuthResult_INVALID_PIT;
  static const AuthResult INVALID_LT =
    AuthResultMessage_AuthResult_INVALID_LT;
  static inline bool AuthResult_IsValid(int value) {
    return AuthResultMessage_AuthResult_IsValid(value);
  }
  static const AuthResult AuthResult_MIN =
    AuthResultMessage_AuthResult_AuthResult_MIN;
  static const AuthResult AuthResult_MAX =
    AuthResultMessage_AuthResult_AuthResult_MAX;
  static const int AuthResult_ARRAYSIZE =
    AuthResultMessage_AuthResult_AuthResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuthResult_descriptor() {
    return AuthResultMessage_AuthResult_descriptor();
  }
  static inline const ::std::string& AuthResult_Name(AuthResult value) {
    return AuthResultMessage_AuthResult_Name(value);
  }
  static inline bool AuthResult_Parse(const ::std::string& name,
      AuthResult* value) {
    return AuthResultMessage_AuthResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::channeldpb::AuthResultMessage_AuthResult result() const;
  void set_result(::channeldpb::AuthResultMessage_AuthResult value);

  // uint32 connId = 2;
  void clear_connid();
  static const int kConnIdFieldNumber = 2;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // .channeldpb.CompressionType compressionType = 3;
  void clear_compressiontype();
  static const int kCompressionTypeFieldNumber = 3;
  ::channeldpb::CompressionType compressiontype() const;
  void set_compressiontype(::channeldpb::CompressionType value);

  // @@protoc_insertion_point(class_scope:channeldpb.AuthResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  ::google::protobuf::uint32 connid_;
  int compressiontype_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsAuthResultMessageImpl();
};
// -------------------------------------------------------------------

class ChannelSubscriptionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelSubscriptionOptions) */ {
 public:
  ChannelSubscriptionOptions();
  virtual ~ChannelSubscriptionOptions();

  ChannelSubscriptionOptions(const ChannelSubscriptionOptions& from);

  inline ChannelSubscriptionOptions& operator=(const ChannelSubscriptionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelSubscriptionOptions(ChannelSubscriptionOptions&& from) noexcept
    : ChannelSubscriptionOptions() {
    *this = ::std::move(from);
  }

  inline ChannelSubscriptionOptions& operator=(ChannelSubscriptionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelSubscriptionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelSubscriptionOptions* internal_default_instance() {
    return reinterpret_cast<const ChannelSubscriptionOptions*>(
               &_ChannelSubscriptionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ChannelSubscriptionOptions* other);
  friend void swap(ChannelSubscriptionOptions& a, ChannelSubscriptionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelSubscriptionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelSubscriptionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelSubscriptionOptions& from);
  void MergeFrom(const ChannelSubscriptionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelSubscriptionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dataFieldMasks = 2;
  int datafieldmasks_size() const;
  void clear_datafieldmasks();
  static const int kDataFieldMasksFieldNumber = 2;
  const ::std::string& datafieldmasks(int index) const;
  ::std::string* mutable_datafieldmasks(int index);
  void set_datafieldmasks(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_datafieldmasks(int index, ::std::string&& value);
  #endif
  void set_datafieldmasks(int index, const char* value);
  void set_datafieldmasks(int index, const char* value, size_t size);
  ::std::string* add_datafieldmasks();
  void add_datafieldmasks(const ::std::string& value);
  #if LANG_CXX11
  void add_datafieldmasks(::std::string&& value);
  #endif
  void add_datafieldmasks(const char* value);
  void add_datafieldmasks(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& datafieldmasks() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datafieldmasks();

  // .channeldpb.ChannelDataAccess dataAccess = 1;
  void clear_dataaccess();
  static const int kDataAccessFieldNumber = 1;
  ::channeldpb::ChannelDataAccess dataaccess() const;
  void set_dataaccess(::channeldpb::ChannelDataAccess value);

  // uint32 fanOutIntervalMs = 3;
  void clear_fanoutintervalms();
  static const int kFanOutIntervalMsFieldNumber = 3;
  ::google::protobuf::uint32 fanoutintervalms() const;
  void set_fanoutintervalms(::google::protobuf::uint32 value);

  // int32 fanOutDelayMs = 4;
  void clear_fanoutdelayms();
  static const int kFanOutDelayMsFieldNumber = 4;
  ::google::protobuf::int32 fanoutdelayms() const;
  void set_fanoutdelayms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelSubscriptionOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datafieldmasks_;
  int dataaccess_;
  ::google::protobuf::uint32 fanoutintervalms_;
  ::google::protobuf::int32 fanoutdelayms_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsChannelSubscriptionOptionsImpl();
};
// -------------------------------------------------------------------

class ChannelDataMergeOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelDataMergeOptions) */ {
 public:
  ChannelDataMergeOptions();
  virtual ~ChannelDataMergeOptions();

  ChannelDataMergeOptions(const ChannelDataMergeOptions& from);

  inline ChannelDataMergeOptions& operator=(const ChannelDataMergeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelDataMergeOptions(ChannelDataMergeOptions&& from) noexcept
    : ChannelDataMergeOptions() {
    *this = ::std::move(from);
  }

  inline ChannelDataMergeOptions& operator=(ChannelDataMergeOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDataMergeOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDataMergeOptions* internal_default_instance() {
    return reinterpret_cast<const ChannelDataMergeOptions*>(
               &_ChannelDataMergeOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ChannelDataMergeOptions* other);
  friend void swap(ChannelDataMergeOptions& a, ChannelDataMergeOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelDataMergeOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDataMergeOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDataMergeOptions& from);
  void MergeFrom(const ChannelDataMergeOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDataMergeOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 listSizeLimit = 2;
  void clear_listsizelimit();
  static const int kListSizeLimitFieldNumber = 2;
  ::google::protobuf::uint32 listsizelimit() const;
  void set_listsizelimit(::google::protobuf::uint32 value);

  // bool shouldReplaceList = 1;
  void clear_shouldreplacelist();
  static const int kShouldReplaceListFieldNumber = 1;
  bool shouldreplacelist() const;
  void set_shouldreplacelist(bool value);

  // bool truncateTop = 3;
  void clear_truncatetop();
  static const int kTruncateTopFieldNumber = 3;
  bool truncatetop() const;
  void set_truncatetop(bool value);

  // bool shouldCheckRemovableMapField = 4;
  void clear_shouldcheckremovablemapfield();
  static const int kShouldCheckRemovableMapFieldFieldNumber = 4;
  bool shouldcheckremovablemapfield() const;
  void set_shouldcheckremovablemapfield(bool value);

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelDataMergeOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 listsizelimit_;
  bool shouldreplacelist_;
  bool truncatetop_;
  bool shouldcheckremovablemapfield_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsChannelDataMergeOptionsImpl();
};
// -------------------------------------------------------------------

class CreateChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.CreateChannelMessage) */ {
 public:
  CreateChannelMessage();
  virtual ~CreateChannelMessage();

  CreateChannelMessage(const CreateChannelMessage& from);

  inline CreateChannelMessage& operator=(const CreateChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateChannelMessage(CreateChannelMessage&& from) noexcept
    : CreateChannelMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelMessage& operator=(CreateChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelMessage*>(
               &_CreateChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CreateChannelMessage* other);
  friend void swap(CreateChannelMessage& a, CreateChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateChannelMessage& from);
  void MergeFrom(const CreateChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metadata = 2;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  bool has_suboptions() const;
  void clear_suboptions();
  static const int kSubOptionsFieldNumber = 3;
  const ::channeldpb::ChannelSubscriptionOptions& suboptions() const;
  ::channeldpb::ChannelSubscriptionOptions* release_suboptions();
  ::channeldpb::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions);

  // .google.protobuf.Any data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  bool has_mergeoptions() const;
  void clear_mergeoptions();
  static const int kMergeOptionsFieldNumber = 5;
  const ::channeldpb::ChannelDataMergeOptions& mergeoptions() const;
  ::channeldpb::ChannelDataMergeOptions* release_mergeoptions();
  ::channeldpb::ChannelDataMergeOptions* mutable_mergeoptions();
  void set_allocated_mergeoptions(::channeldpb::ChannelDataMergeOptions* mergeoptions);

  // .channeldpb.ChannelType channelType = 1;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 1;
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeldpb.CreateChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::channeldpb::ChannelSubscriptionOptions* suboptions_;
  ::google::protobuf::Any* data_;
  ::channeldpb::ChannelDataMergeOptions* mergeoptions_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsCreateChannelMessageImpl();
};
// -------------------------------------------------------------------

class CreateChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.CreateChannelResultMessage) */ {
 public:
  CreateChannelResultMessage();
  virtual ~CreateChannelResultMessage();

  CreateChannelResultMessage(const CreateChannelResultMessage& from);

  inline CreateChannelResultMessage& operator=(const CreateChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateChannelResultMessage(CreateChannelResultMessage&& from) noexcept
    : CreateChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelResultMessage& operator=(CreateChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResultMessage*>(
               &_CreateChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CreateChannelResultMessage* other);
  friend void swap(CreateChannelResultMessage& a, CreateChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateChannelResultMessage& from);
  void MergeFrom(const CreateChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metadata = 2;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // .channeldpb.ChannelType channelType = 1;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 1;
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);

  // uint32 ownerConnId = 3;
  void clear_ownerconnid();
  static const int kOwnerConnIdFieldNumber = 3;
  ::google::protobuf::uint32 ownerconnid() const;
  void set_ownerconnid(::google::protobuf::uint32 value);

  // uint32 channelId = 4;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 4;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.CreateChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  int channeltype_;
  ::google::protobuf::uint32 ownerconnid_;
  ::google::protobuf::uint32 channelid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsCreateChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class RemoveChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.RemoveChannelMessage) */ {
 public:
  RemoveChannelMessage();
  virtual ~RemoveChannelMessage();

  RemoveChannelMessage(const RemoveChannelMessage& from);

  inline RemoveChannelMessage& operator=(const RemoveChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveChannelMessage(RemoveChannelMessage&& from) noexcept
    : RemoveChannelMessage() {
    *this = ::std::move(from);
  }

  inline RemoveChannelMessage& operator=(RemoveChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveChannelMessage* internal_default_instance() {
    return reinterpret_cast<const RemoveChannelMessage*>(
               &_RemoveChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RemoveChannelMessage* other);
  friend void swap(RemoveChannelMessage& a, RemoveChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveChannelMessage& from);
  void MergeFrom(const RemoveChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.RemoveChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 channelid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsRemoveChannelMessageImpl();
};
// -------------------------------------------------------------------

class ListChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ListChannelMessage) */ {
 public:
  ListChannelMessage();
  virtual ~ListChannelMessage();

  ListChannelMessage(const ListChannelMessage& from);

  inline ListChannelMessage& operator=(const ListChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListChannelMessage(ListChannelMessage&& from) noexcept
    : ListChannelMessage() {
    *this = ::std::move(from);
  }

  inline ListChannelMessage& operator=(ListChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ListChannelMessage*>(
               &_ListChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ListChannelMessage* other);
  friend void swap(ListChannelMessage& a, ListChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ListChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListChannelMessage& from);
  void MergeFrom(const ListChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string metadataFilters = 2;
  int metadatafilters_size() const;
  void clear_metadatafilters();
  static const int kMetadataFiltersFieldNumber = 2;
  const ::std::string& metadatafilters(int index) const;
  ::std::string* mutable_metadatafilters(int index);
  void set_metadatafilters(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_metadatafilters(int index, ::std::string&& value);
  #endif
  void set_metadatafilters(int index, const char* value);
  void set_metadatafilters(int index, const char* value, size_t size);
  ::std::string* add_metadatafilters();
  void add_metadatafilters(const ::std::string& value);
  #if LANG_CXX11
  void add_metadatafilters(::std::string&& value);
  #endif
  void add_metadatafilters(const char* value);
  void add_metadatafilters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& metadatafilters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_metadatafilters();

  // .channeldpb.ChannelType typeFilter = 1;
  void clear_typefilter();
  static const int kTypeFilterFieldNumber = 1;
  ::channeldpb::ChannelType typefilter() const;
  void set_typefilter(::channeldpb::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeldpb.ListChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> metadatafilters_;
  int typefilter_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsListChannelMessageImpl();
};
// -------------------------------------------------------------------

class ListChannelResultMessage_ChannelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ListChannelResultMessage.ChannelInfo) */ {
 public:
  ListChannelResultMessage_ChannelInfo();
  virtual ~ListChannelResultMessage_ChannelInfo();

  ListChannelResultMessage_ChannelInfo(const ListChannelResultMessage_ChannelInfo& from);

  inline ListChannelResultMessage_ChannelInfo& operator=(const ListChannelResultMessage_ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListChannelResultMessage_ChannelInfo(ListChannelResultMessage_ChannelInfo&& from) noexcept
    : ListChannelResultMessage_ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ListChannelResultMessage_ChannelInfo& operator=(ListChannelResultMessage_ChannelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChannelResultMessage_ChannelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelResultMessage_ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ListChannelResultMessage_ChannelInfo*>(
               &_ListChannelResultMessage_ChannelInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ListChannelResultMessage_ChannelInfo* other);
  friend void swap(ListChannelResultMessage_ChannelInfo& a, ListChannelResultMessage_ChannelInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListChannelResultMessage_ChannelInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ListChannelResultMessage_ChannelInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListChannelResultMessage_ChannelInfo& from);
  void MergeFrom(const ListChannelResultMessage_ChannelInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListChannelResultMessage_ChannelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metadata = 3;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // .channeldpb.ChannelType channelType = 2;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 2;
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeldpb.ListChannelResultMessage.ChannelInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::uint32 channelid_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsListChannelResultMessage_ChannelInfoImpl();
};
// -------------------------------------------------------------------

class ListChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ListChannelResultMessage) */ {
 public:
  ListChannelResultMessage();
  virtual ~ListChannelResultMessage();

  ListChannelResultMessage(const ListChannelResultMessage& from);

  inline ListChannelResultMessage& operator=(const ListChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListChannelResultMessage(ListChannelResultMessage&& from) noexcept
    : ListChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline ListChannelResultMessage& operator=(ListChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const ListChannelResultMessage*>(
               &_ListChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ListChannelResultMessage* other);
  friend void swap(ListChannelResultMessage& a, ListChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ListChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListChannelResultMessage& from);
  void MergeFrom(const ListChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ListChannelResultMessage_ChannelInfo ChannelInfo;

  // accessors -------------------------------------------------------

  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::channeldpb::ListChannelResultMessage_ChannelInfo& channels(int index) const;
  ::channeldpb::ListChannelResultMessage_ChannelInfo* mutable_channels(int index);
  ::channeldpb::ListChannelResultMessage_ChannelInfo* add_channels();
  ::google::protobuf::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >*
      mutable_channels();
  const ::google::protobuf::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >&
      channels() const;

  // @@protoc_insertion_point(class_scope:channeldpb.ListChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo > channels_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsListChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class SubscribedToChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.SubscribedToChannelMessage) */ {
 public:
  SubscribedToChannelMessage();
  virtual ~SubscribedToChannelMessage();

  SubscribedToChannelMessage(const SubscribedToChannelMessage& from);

  inline SubscribedToChannelMessage& operator=(const SubscribedToChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribedToChannelMessage(SubscribedToChannelMessage&& from) noexcept
    : SubscribedToChannelMessage() {
    *this = ::std::move(from);
  }

  inline SubscribedToChannelMessage& operator=(SubscribedToChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribedToChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribedToChannelMessage* internal_default_instance() {
    return reinterpret_cast<const SubscribedToChannelMessage*>(
               &_SubscribedToChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SubscribedToChannelMessage* other);
  friend void swap(SubscribedToChannelMessage& a, SubscribedToChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribedToChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribedToChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribedToChannelMessage& from);
  void MergeFrom(const SubscribedToChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribedToChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  bool has_suboptions() const;
  void clear_suboptions();
  static const int kSubOptionsFieldNumber = 2;
  const ::channeldpb::ChannelSubscriptionOptions& suboptions() const;
  ::channeldpb::ChannelSubscriptionOptions* release_suboptions();
  ::channeldpb::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions);

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.SubscribedToChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::channeldpb::ChannelSubscriptionOptions* suboptions_;
  ::google::protobuf::uint32 connid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsSubscribedToChannelMessageImpl();
};
// -------------------------------------------------------------------

class SubscribedToChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.SubscribedToChannelResultMessage) */ {
 public:
  SubscribedToChannelResultMessage();
  virtual ~SubscribedToChannelResultMessage();

  SubscribedToChannelResultMessage(const SubscribedToChannelResultMessage& from);

  inline SubscribedToChannelResultMessage& operator=(const SubscribedToChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribedToChannelResultMessage(SubscribedToChannelResultMessage&& from) noexcept
    : SubscribedToChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline SubscribedToChannelResultMessage& operator=(SubscribedToChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribedToChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribedToChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const SubscribedToChannelResultMessage*>(
               &_SubscribedToChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SubscribedToChannelResultMessage* other);
  friend void swap(SubscribedToChannelResultMessage& a, SubscribedToChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribedToChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribedToChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribedToChannelResultMessage& from);
  void MergeFrom(const SubscribedToChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribedToChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  bool has_suboptions() const;
  void clear_suboptions();
  static const int kSubOptionsFieldNumber = 2;
  const ::channeldpb::ChannelSubscriptionOptions& suboptions() const;
  ::channeldpb::ChannelSubscriptionOptions* release_suboptions();
  ::channeldpb::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions);

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // .channeldpb.ConnectionType connType = 3;
  void clear_conntype();
  static const int kConnTypeFieldNumber = 3;
  ::channeldpb::ConnectionType conntype() const;
  void set_conntype(::channeldpb::ConnectionType value);

  // .channeldpb.ChannelType channelType = 4;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 4;
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeldpb.SubscribedToChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::channeldpb::ChannelSubscriptionOptions* suboptions_;
  ::google::protobuf::uint32 connid_;
  int conntype_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsSubscribedToChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class UnsubscribedFromChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.UnsubscribedFromChannelMessage) */ {
 public:
  UnsubscribedFromChannelMessage();
  virtual ~UnsubscribedFromChannelMessage();

  UnsubscribedFromChannelMessage(const UnsubscribedFromChannelMessage& from);

  inline UnsubscribedFromChannelMessage& operator=(const UnsubscribedFromChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsubscribedFromChannelMessage(UnsubscribedFromChannelMessage&& from) noexcept
    : UnsubscribedFromChannelMessage() {
    *this = ::std::move(from);
  }

  inline UnsubscribedFromChannelMessage& operator=(UnsubscribedFromChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribedFromChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribedFromChannelMessage* internal_default_instance() {
    return reinterpret_cast<const UnsubscribedFromChannelMessage*>(
               &_UnsubscribedFromChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UnsubscribedFromChannelMessage* other);
  friend void swap(UnsubscribedFromChannelMessage& a, UnsubscribedFromChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribedFromChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  UnsubscribedFromChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnsubscribedFromChannelMessage& from);
  void MergeFrom(const UnsubscribedFromChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnsubscribedFromChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.UnsubscribedFromChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 connid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsUnsubscribedFromChannelMessageImpl();
};
// -------------------------------------------------------------------

class UnsubscribedFromChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.UnsubscribedFromChannelResultMessage) */ {
 public:
  UnsubscribedFromChannelResultMessage();
  virtual ~UnsubscribedFromChannelResultMessage();

  UnsubscribedFromChannelResultMessage(const UnsubscribedFromChannelResultMessage& from);

  inline UnsubscribedFromChannelResultMessage& operator=(const UnsubscribedFromChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsubscribedFromChannelResultMessage(UnsubscribedFromChannelResultMessage&& from) noexcept
    : UnsubscribedFromChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline UnsubscribedFromChannelResultMessage& operator=(UnsubscribedFromChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribedFromChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribedFromChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const UnsubscribedFromChannelResultMessage*>(
               &_UnsubscribedFromChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(UnsubscribedFromChannelResultMessage* other);
  friend void swap(UnsubscribedFromChannelResultMessage& a, UnsubscribedFromChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribedFromChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  UnsubscribedFromChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnsubscribedFromChannelResultMessage& from);
  void MergeFrom(const UnsubscribedFromChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnsubscribedFromChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // .channeldpb.ConnectionType connType = 2;
  void clear_conntype();
  static const int kConnTypeFieldNumber = 2;
  ::channeldpb::ConnectionType conntype() const;
  void set_conntype(::channeldpb::ConnectionType value);

  // .channeldpb.ChannelType channelType = 3;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 3;
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeldpb.UnsubscribedFromChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 connid_;
  int conntype_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsUnsubscribedFromChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class ChannelDataUpdateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelDataUpdateMessage) */ {
 public:
  ChannelDataUpdateMessage();
  virtual ~ChannelDataUpdateMessage();

  ChannelDataUpdateMessage(const ChannelDataUpdateMessage& from);

  inline ChannelDataUpdateMessage& operator=(const ChannelDataUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelDataUpdateMessage(ChannelDataUpdateMessage&& from) noexcept
    : ChannelDataUpdateMessage() {
    *this = ::std::move(from);
  }

  inline ChannelDataUpdateMessage& operator=(ChannelDataUpdateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDataUpdateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDataUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelDataUpdateMessage*>(
               &_ChannelDataUpdateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ChannelDataUpdateMessage* other);
  friend void swap(ChannelDataUpdateMessage& a, ChannelDataUpdateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelDataUpdateMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDataUpdateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDataUpdateMessage& from);
  void MergeFrom(const ChannelDataUpdateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDataUpdateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // uint32 contextConnId = 2;
  void clear_contextconnid();
  static const int kContextConnIdFieldNumber = 2;
  ::google::protobuf::uint32 contextconnid() const;
  void set_contextconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelDataUpdateMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::uint32 contextconnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsChannelDataUpdateMessageImpl();
};
// -------------------------------------------------------------------

class DisconnectMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.DisconnectMessage) */ {
 public:
  DisconnectMessage();
  virtual ~DisconnectMessage();

  DisconnectMessage(const DisconnectMessage& from);

  inline DisconnectMessage& operator=(const DisconnectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisconnectMessage(DisconnectMessage&& from) noexcept
    : DisconnectMessage() {
    *this = ::std::move(from);
  }

  inline DisconnectMessage& operator=(DisconnectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectMessage* internal_default_instance() {
    return reinterpret_cast<const DisconnectMessage*>(
               &_DisconnectMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DisconnectMessage* other);
  friend void swap(DisconnectMessage& a, DisconnectMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  DisconnectMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisconnectMessage& from);
  void MergeFrom(const DisconnectMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisconnectMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.DisconnectMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 connid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsDisconnectMessageImpl();
};
// -------------------------------------------------------------------

class SpatialInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInfo) */ {
 public:
  SpatialInfo();
  virtual ~SpatialInfo();

  SpatialInfo(const SpatialInfo& from);

  inline SpatialInfo& operator=(const SpatialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpatialInfo(SpatialInfo&& from) noexcept
    : SpatialInfo() {
    *this = ::std::move(from);
  }

  inline SpatialInfo& operator=(SpatialInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialInfo* internal_default_instance() {
    return reinterpret_cast<const SpatialInfo*>(
               &_SpatialInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SpatialInfo* other);
  friend void swap(SpatialInfo& a, SpatialInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SpatialInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpatialInfo& from);
  void MergeFrom(const SpatialInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpatialInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsSpatialInfoImpl();
};
// -------------------------------------------------------------------

class CreateSpatialChannelsResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.CreateSpatialChannelsResultMessage) */ {
 public:
  CreateSpatialChannelsResultMessage();
  virtual ~CreateSpatialChannelsResultMessage();

  CreateSpatialChannelsResultMessage(const CreateSpatialChannelsResultMessage& from);

  inline CreateSpatialChannelsResultMessage& operator=(const CreateSpatialChannelsResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSpatialChannelsResultMessage(CreateSpatialChannelsResultMessage&& from) noexcept
    : CreateSpatialChannelsResultMessage() {
    *this = ::std::move(from);
  }

  inline CreateSpatialChannelsResultMessage& operator=(CreateSpatialChannelsResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSpatialChannelsResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSpatialChannelsResultMessage* internal_default_instance() {
    return reinterpret_cast<const CreateSpatialChannelsResultMessage*>(
               &_CreateSpatialChannelsResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CreateSpatialChannelsResultMessage* other);
  friend void swap(CreateSpatialChannelsResultMessage& a, CreateSpatialChannelsResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSpatialChannelsResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateSpatialChannelsResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateSpatialChannelsResultMessage& from);
  void MergeFrom(const CreateSpatialChannelsResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateSpatialChannelsResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 spatialChannelId = 1;
  int spatialchannelid_size() const;
  void clear_spatialchannelid();
  static const int kSpatialChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 spatialchannelid(int index) const;
  void set_spatialchannelid(int index, ::google::protobuf::uint32 value);
  void add_spatialchannelid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      spatialchannelid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_spatialchannelid();

  // string metadata = 2;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // uint32 ownerConnId = 3;
  void clear_ownerconnid();
  static const int kOwnerConnIdFieldNumber = 3;
  ::google::protobuf::uint32 ownerconnid() const;
  void set_ownerconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.CreateSpatialChannelsResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > spatialchannelid_;
  mutable int _spatialchannelid_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::uint32 ownerconnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsCreateSpatialChannelsResultMessageImpl();
};
// -------------------------------------------------------------------

class QuerySpatialChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.QuerySpatialChannelMessage) */ {
 public:
  QuerySpatialChannelMessage();
  virtual ~QuerySpatialChannelMessage();

  QuerySpatialChannelMessage(const QuerySpatialChannelMessage& from);

  inline QuerySpatialChannelMessage& operator=(const QuerySpatialChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySpatialChannelMessage(QuerySpatialChannelMessage&& from) noexcept
    : QuerySpatialChannelMessage() {
    *this = ::std::move(from);
  }

  inline QuerySpatialChannelMessage& operator=(QuerySpatialChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySpatialChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuerySpatialChannelMessage* internal_default_instance() {
    return reinterpret_cast<const QuerySpatialChannelMessage*>(
               &_QuerySpatialChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(QuerySpatialChannelMessage* other);
  friend void swap(QuerySpatialChannelMessage& a, QuerySpatialChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySpatialChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySpatialChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySpatialChannelMessage& from);
  void MergeFrom(const QuerySpatialChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySpatialChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  int spatialinfo_size() const;
  void clear_spatialinfo();
  static const int kSpatialInfoFieldNumber = 1;
  const ::channeldpb::SpatialInfo& spatialinfo(int index) const;
  ::channeldpb::SpatialInfo* mutable_spatialinfo(int index);
  ::channeldpb::SpatialInfo* add_spatialinfo();
  ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialInfo >*
      mutable_spatialinfo();
  const ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialInfo >&
      spatialinfo() const;

  // @@protoc_insertion_point(class_scope:channeldpb.QuerySpatialChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialInfo > spatialinfo_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsQuerySpatialChannelMessageImpl();
};
// -------------------------------------------------------------------

class QuerySpatialChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.QuerySpatialChannelResultMessage) */ {
 public:
  QuerySpatialChannelResultMessage();
  virtual ~QuerySpatialChannelResultMessage();

  QuerySpatialChannelResultMessage(const QuerySpatialChannelResultMessage& from);

  inline QuerySpatialChannelResultMessage& operator=(const QuerySpatialChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuerySpatialChannelResultMessage(QuerySpatialChannelResultMessage&& from) noexcept
    : QuerySpatialChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline QuerySpatialChannelResultMessage& operator=(QuerySpatialChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySpatialChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuerySpatialChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const QuerySpatialChannelResultMessage*>(
               &_QuerySpatialChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(QuerySpatialChannelResultMessage* other);
  friend void swap(QuerySpatialChannelResultMessage& a, QuerySpatialChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuerySpatialChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  QuerySpatialChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuerySpatialChannelResultMessage& from);
  void MergeFrom(const QuerySpatialChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuerySpatialChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 channelId = 1;
  int channelid_size() const;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid(int index) const;
  void set_channelid(int index, ::google::protobuf::uint32 value);
  void add_channelid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channelid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channelid();

  // @@protoc_insertion_point(class_scope:channeldpb.QuerySpatialChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channelid_;
  mutable int _channelid_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsQuerySpatialChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class ChannelDataHandoverMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelDataHandoverMessage) */ {
 public:
  ChannelDataHandoverMessage();
  virtual ~ChannelDataHandoverMessage();

  ChannelDataHandoverMessage(const ChannelDataHandoverMessage& from);

  inline ChannelDataHandoverMessage& operator=(const ChannelDataHandoverMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelDataHandoverMessage(ChannelDataHandoverMessage&& from) noexcept
    : ChannelDataHandoverMessage() {
    *this = ::std::move(from);
  }

  inline ChannelDataHandoverMessage& operator=(ChannelDataHandoverMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDataHandoverMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDataHandoverMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelDataHandoverMessage*>(
               &_ChannelDataHandoverMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(ChannelDataHandoverMessage* other);
  friend void swap(ChannelDataHandoverMessage& a, ChannelDataHandoverMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelDataHandoverMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDataHandoverMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDataHandoverMessage& from);
  void MergeFrom(const ChannelDataHandoverMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDataHandoverMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // uint32 srcChannelId = 1;
  void clear_srcchannelid();
  static const int kSrcChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 srcchannelid() const;
  void set_srcchannelid(::google::protobuf::uint32 value);

  // uint32 dstChannelId = 2;
  void clear_dstchannelid();
  static const int kDstChannelIdFieldNumber = 2;
  ::google::protobuf::uint32 dstchannelid() const;
  void set_dstchannelid(::google::protobuf::uint32 value);

  // uint32 contextConnId = 3;
  void clear_contextconnid();
  static const int kContextConnIdFieldNumber = 3;
  ::google::protobuf::uint32 contextconnid() const;
  void set_contextconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelDataHandoverMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::uint32 srcchannelid_;
  ::google::protobuf::uint32 dstchannelid_;
  ::google::protobuf::uint32 contextconnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsChannelDataHandoverMessageImpl();
};
// -------------------------------------------------------------------

class SpatialRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialRegion) */ {
 public:
  SpatialRegion();
  virtual ~SpatialRegion();

  SpatialRegion(const SpatialRegion& from);

  inline SpatialRegion& operator=(const SpatialRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpatialRegion(SpatialRegion&& from) noexcept
    : SpatialRegion() {
    *this = ::std::move(from);
  }

  inline SpatialRegion& operator=(SpatialRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialRegion* internal_default_instance() {
    return reinterpret_cast<const SpatialRegion*>(
               &_SpatialRegion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(SpatialRegion* other);
  friend void swap(SpatialRegion& a, SpatialRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialRegion* New() const PROTOBUF_FINAL { return New(NULL); }

  SpatialRegion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpatialRegion& from);
  void MergeFrom(const SpatialRegion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpatialRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .channeldpb.SpatialInfo min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  const ::channeldpb::SpatialInfo& min() const;
  ::channeldpb::SpatialInfo* release_min();
  ::channeldpb::SpatialInfo* mutable_min();
  void set_allocated_min(::channeldpb::SpatialInfo* min);

  // .channeldpb.SpatialInfo max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  const ::channeldpb::SpatialInfo& max() const;
  ::channeldpb::SpatialInfo* release_max();
  ::channeldpb::SpatialInfo* mutable_max();
  void set_allocated_max(::channeldpb::SpatialInfo* max);

  // uint32 channelId = 3;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // uint32 serverIndex = 4;
  void clear_serverindex();
  static const int kServerIndexFieldNumber = 4;
  ::google::protobuf::uint32 serverindex() const;
  void set_serverindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::channeldpb::SpatialInfo* min_;
  ::channeldpb::SpatialInfo* max_;
  ::google::protobuf::uint32 channelid_;
  ::google::protobuf::uint32 serverindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsSpatialRegionImpl();
};
// -------------------------------------------------------------------

class SpatialRegionsUpdateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialRegionsUpdateMessage) */ {
 public:
  SpatialRegionsUpdateMessage();
  virtual ~SpatialRegionsUpdateMessage();

  SpatialRegionsUpdateMessage(const SpatialRegionsUpdateMessage& from);

  inline SpatialRegionsUpdateMessage& operator=(const SpatialRegionsUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpatialRegionsUpdateMessage(SpatialRegionsUpdateMessage&& from) noexcept
    : SpatialRegionsUpdateMessage() {
    *this = ::std::move(from);
  }

  inline SpatialRegionsUpdateMessage& operator=(SpatialRegionsUpdateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialRegionsUpdateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialRegionsUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const SpatialRegionsUpdateMessage*>(
               &_SpatialRegionsUpdateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SpatialRegionsUpdateMessage* other);
  friend void swap(SpatialRegionsUpdateMessage& a, SpatialRegionsUpdateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialRegionsUpdateMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SpatialRegionsUpdateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpatialRegionsUpdateMessage& from);
  void MergeFrom(const SpatialRegionsUpdateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpatialRegionsUpdateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .channeldpb.SpatialRegion regions = 1;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 1;
  const ::channeldpb::SpatialRegion& regions(int index) const;
  ::channeldpb::SpatialRegion* mutable_regions(int index);
  ::channeldpb::SpatialRegion* add_regions();
  ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialRegion >*
      mutable_regions();
  const ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialRegion >&
      regions() const;

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialRegionsUpdateMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialRegion > regions_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsSpatialRegionsUpdateMessageImpl();
};
// -------------------------------------------------------------------

class DebugGetSpatialRegionsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeldpb.DebugGetSpatialRegionsMessage) */ {
 public:
  DebugGetSpatialRegionsMessage();
  virtual ~DebugGetSpatialRegionsMessage();

  DebugGetSpatialRegionsMessage(const DebugGetSpatialRegionsMessage& from);

  inline DebugGetSpatialRegionsMessage& operator=(const DebugGetSpatialRegionsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugGetSpatialRegionsMessage(DebugGetSpatialRegionsMessage&& from) noexcept
    : DebugGetSpatialRegionsMessage() {
    *this = ::std::move(from);
  }

  inline DebugGetSpatialRegionsMessage& operator=(DebugGetSpatialRegionsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugGetSpatialRegionsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugGetSpatialRegionsMessage* internal_default_instance() {
    return reinterpret_cast<const DebugGetSpatialRegionsMessage*>(
               &_DebugGetSpatialRegionsMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(DebugGetSpatialRegionsMessage* other);
  friend void swap(DebugGetSpatialRegionsMessage& a, DebugGetSpatialRegionsMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugGetSpatialRegionsMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugGetSpatialRegionsMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugGetSpatialRegionsMessage& from);
  void MergeFrom(const DebugGetSpatialRegionsMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugGetSpatialRegionsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:channeldpb.DebugGetSpatialRegionsMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_channeld_2eproto::TableStruct;
  friend void ::protobuf_channeld_2eproto::InitDefaultsDebugGetSpatialRegionsMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// repeated .channeldpb.MessagePack messages = 1;
inline int Packet::messages_size() const {
  return messages_.size();
}
inline void Packet::clear_messages() {
  messages_.Clear();
}
inline const ::channeldpb::MessagePack& Packet::messages(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.Packet.messages)
  return messages_.Get(index);
}
inline ::channeldpb::MessagePack* Packet::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.Packet.messages)
  return messages_.Mutable(index);
}
inline ::channeldpb::MessagePack* Packet::add_messages() {
  // @@protoc_insertion_point(field_add:channeldpb.Packet.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channeldpb::MessagePack >*
Packet::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.Packet.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channeldpb::MessagePack >&
Packet::messages() const {
  // @@protoc_insertion_point(field_list:channeldpb.Packet.messages)
  return messages_;
}

// -------------------------------------------------------------------

// MessagePack

// uint32 channelId = 1;
inline void MessagePack::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.channelId)
  return channelid_;
}
inline void MessagePack::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.channelId)
}

// uint32 broadcast = 2;
inline void MessagePack::clear_broadcast() {
  broadcast_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::broadcast() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.broadcast)
  return broadcast_;
}
inline void MessagePack::set_broadcast(::google::protobuf::uint32 value) {
  
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.broadcast)
}

// uint32 stubId = 3;
inline void MessagePack::clear_stubid() {
  stubid_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::stubid() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.stubId)
  return stubid_;
}
inline void MessagePack::set_stubid(::google::protobuf::uint32 value) {
  
  stubid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.stubId)
}

// uint32 msgType = 4;
inline void MessagePack::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::msgtype() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.msgType)
  return msgtype_;
}
inline void MessagePack::set_msgtype(::google::protobuf::uint32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.msgType)
}

// bytes msgBody = 5;
inline void MessagePack::clear_msgbody() {
  msgbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePack::msgbody() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.msgBody)
  return msgbody_.GetNoArena();
}
inline void MessagePack::set_msgbody(const ::std::string& value) {
  
  msgbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.msgBody)
}
#if LANG_CXX11
inline void MessagePack::set_msgbody(::std::string&& value) {
  
  msgbody_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.MessagePack.msgBody)
}
#endif
inline void MessagePack::set_msgbody(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.MessagePack.msgBody)
}
inline void MessagePack::set_msgbody(const void* value, size_t size) {
  
  msgbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.MessagePack.msgBody)
}
inline ::std::string* MessagePack::mutable_msgbody() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.MessagePack.msgBody)
  return msgbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePack::release_msgbody() {
  // @@protoc_insertion_point(field_release:channeldpb.MessagePack.msgBody)
  
  return msgbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_allocated_msgbody(::std::string* msgbody) {
  if (msgbody != NULL) {
    
  } else {
    
  }
  msgbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgbody);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.MessagePack.msgBody)
}

// -------------------------------------------------------------------

// ServerForwardMessage

// uint32 clientConnId = 1;
inline void ServerForwardMessage::clear_clientconnid() {
  clientconnid_ = 0u;
}
inline ::google::protobuf::uint32 ServerForwardMessage::clientconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ServerForwardMessage.clientConnId)
  return clientconnid_;
}
inline void ServerForwardMessage::set_clientconnid(::google::protobuf::uint32 value) {
  
  clientconnid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ServerForwardMessage.clientConnId)
}

// bytes payload = 2;
inline void ServerForwardMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerForwardMessage::payload() const {
  // @@protoc_insertion_point(field_get:channeldpb.ServerForwardMessage.payload)
  return payload_.GetNoArena();
}
inline void ServerForwardMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.ServerForwardMessage.payload)
}
#if LANG_CXX11
inline void ServerForwardMessage::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.ServerForwardMessage.payload)
}
#endif
inline void ServerForwardMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.ServerForwardMessage.payload)
}
inline void ServerForwardMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.ServerForwardMessage.payload)
}
inline ::std::string* ServerForwardMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.ServerForwardMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerForwardMessage::release_payload() {
  // @@protoc_insertion_point(field_release:channeldpb.ServerForwardMessage.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerForwardMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ServerForwardMessage.payload)
}

// -------------------------------------------------------------------

// AuthMessage

// string playerIdentifierToken = 1;
inline void AuthMessage::clear_playeridentifiertoken() {
  playeridentifiertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthMessage::playeridentifiertoken() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthMessage.playerIdentifierToken)
  return playeridentifiertoken_.GetNoArena();
}
inline void AuthMessage::set_playeridentifiertoken(const ::std::string& value) {
  
  playeridentifiertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.AuthMessage.playerIdentifierToken)
}
#if LANG_CXX11
inline void AuthMessage::set_playeridentifiertoken(::std::string&& value) {
  
  playeridentifiertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.AuthMessage.playerIdentifierToken)
}
#endif
inline void AuthMessage::set_playeridentifiertoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playeridentifiertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.AuthMessage.playerIdentifierToken)
}
inline void AuthMessage::set_playeridentifiertoken(const char* value, size_t size) {
  
  playeridentifiertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.AuthMessage.playerIdentifierToken)
}
inline ::std::string* AuthMessage::mutable_playeridentifiertoken() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.AuthMessage.playerIdentifierToken)
  return playeridentifiertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthMessage::release_playeridentifiertoken() {
  // @@protoc_insertion_point(field_release:channeldpb.AuthMessage.playerIdentifierToken)
  
  return playeridentifiertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthMessage::set_allocated_playeridentifiertoken(::std::string* playeridentifiertoken) {
  if (playeridentifiertoken != NULL) {
    
  } else {
    
  }
  playeridentifiertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playeridentifiertoken);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.AuthMessage.playerIdentifierToken)
}

// string loginToken = 2;
inline void AuthMessage::clear_logintoken() {
  logintoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthMessage::logintoken() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthMessage.loginToken)
  return logintoken_.GetNoArena();
}
inline void AuthMessage::set_logintoken(const ::std::string& value) {
  
  logintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.AuthMessage.loginToken)
}
#if LANG_CXX11
inline void AuthMessage::set_logintoken(::std::string&& value) {
  
  logintoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.AuthMessage.loginToken)
}
#endif
inline void AuthMessage::set_logintoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.AuthMessage.loginToken)
}
inline void AuthMessage::set_logintoken(const char* value, size_t size) {
  
  logintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.AuthMessage.loginToken)
}
inline ::std::string* AuthMessage::mutable_logintoken() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.AuthMessage.loginToken)
  return logintoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthMessage::release_logintoken() {
  // @@protoc_insertion_point(field_release:channeldpb.AuthMessage.loginToken)
  
  return logintoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthMessage::set_allocated_logintoken(::std::string* logintoken) {
  if (logintoken != NULL) {
    
  } else {
    
  }
  logintoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logintoken);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.AuthMessage.loginToken)
}

// -------------------------------------------------------------------

// AuthResultMessage

// .channeldpb.AuthResultMessage.AuthResult result = 1;
inline void AuthResultMessage::clear_result() {
  result_ = 0;
}
inline ::channeldpb::AuthResultMessage_AuthResult AuthResultMessage::result() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthResultMessage.result)
  return static_cast< ::channeldpb::AuthResultMessage_AuthResult >(result_);
}
inline void AuthResultMessage::set_result(::channeldpb::AuthResultMessage_AuthResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.AuthResultMessage.result)
}

// uint32 connId = 2;
inline void AuthResultMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 AuthResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthResultMessage.connId)
  return connid_;
}
inline void AuthResultMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.AuthResultMessage.connId)
}

// .channeldpb.CompressionType compressionType = 3;
inline void AuthResultMessage::clear_compressiontype() {
  compressiontype_ = 0;
}
inline ::channeldpb::CompressionType AuthResultMessage::compressiontype() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthResultMessage.compressionType)
  return static_cast< ::channeldpb::CompressionType >(compressiontype_);
}
inline void AuthResultMessage::set_compressiontype(::channeldpb::CompressionType value) {
  
  compressiontype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.AuthResultMessage.compressionType)
}

// -------------------------------------------------------------------

// ChannelSubscriptionOptions

// .channeldpb.ChannelDataAccess dataAccess = 1;
inline void ChannelSubscriptionOptions::clear_dataaccess() {
  dataaccess_ = 0;
}
inline ::channeldpb::ChannelDataAccess ChannelSubscriptionOptions::dataaccess() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.dataAccess)
  return static_cast< ::channeldpb::ChannelDataAccess >(dataaccess_);
}
inline void ChannelSubscriptionOptions::set_dataaccess(::channeldpb::ChannelDataAccess value) {
  
  dataaccess_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.dataAccess)
}

// repeated string dataFieldMasks = 2;
inline int ChannelSubscriptionOptions::datafieldmasks_size() const {
  return datafieldmasks_.size();
}
inline void ChannelSubscriptionOptions::clear_datafieldmasks() {
  datafieldmasks_.Clear();
}
inline const ::std::string& ChannelSubscriptionOptions::datafieldmasks(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return datafieldmasks_.Get(index);
}
inline ::std::string* ChannelSubscriptionOptions::mutable_datafieldmasks(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return datafieldmasks_.Mutable(index);
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  datafieldmasks_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  datafieldmasks_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datafieldmasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const char* value, size_t size) {
  datafieldmasks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline ::std::string* ChannelSubscriptionOptions::add_datafieldmasks() {
  // @@protoc_insertion_point(field_add_mutable:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return datafieldmasks_.Add();
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const ::std::string& value) {
  datafieldmasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
#if LANG_CXX11
inline void ChannelSubscriptionOptions::add_datafieldmasks(::std::string&& value) {
  datafieldmasks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
#endif
inline void ChannelSubscriptionOptions::add_datafieldmasks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datafieldmasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const char* value, size_t size) {
  datafieldmasks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChannelSubscriptionOptions::datafieldmasks() const {
  // @@protoc_insertion_point(field_list:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return datafieldmasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChannelSubscriptionOptions::mutable_datafieldmasks() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return &datafieldmasks_;
}

// uint32 fanOutIntervalMs = 3;
inline void ChannelSubscriptionOptions::clear_fanoutintervalms() {
  fanoutintervalms_ = 0u;
}
inline ::google::protobuf::uint32 ChannelSubscriptionOptions::fanoutintervalms() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.fanOutIntervalMs)
  return fanoutintervalms_;
}
inline void ChannelSubscriptionOptions::set_fanoutintervalms(::google::protobuf::uint32 value) {
  
  fanoutintervalms_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.fanOutIntervalMs)
}

// int32 fanOutDelayMs = 4;
inline void ChannelSubscriptionOptions::clear_fanoutdelayms() {
  fanoutdelayms_ = 0;
}
inline ::google::protobuf::int32 ChannelSubscriptionOptions::fanoutdelayms() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.fanOutDelayMs)
  return fanoutdelayms_;
}
inline void ChannelSubscriptionOptions::set_fanoutdelayms(::google::protobuf::int32 value) {
  
  fanoutdelayms_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.fanOutDelayMs)
}

// -------------------------------------------------------------------

// ChannelDataMergeOptions

// bool shouldReplaceList = 1;
inline void ChannelDataMergeOptions::clear_shouldreplacelist() {
  shouldreplacelist_ = false;
}
inline bool ChannelDataMergeOptions::shouldreplacelist() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.shouldReplaceList)
  return shouldreplacelist_;
}
inline void ChannelDataMergeOptions::set_shouldreplacelist(bool value) {
  
  shouldreplacelist_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.shouldReplaceList)
}

// uint32 listSizeLimit = 2;
inline void ChannelDataMergeOptions::clear_listsizelimit() {
  listsizelimit_ = 0u;
}
inline ::google::protobuf::uint32 ChannelDataMergeOptions::listsizelimit() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.listSizeLimit)
  return listsizelimit_;
}
inline void ChannelDataMergeOptions::set_listsizelimit(::google::protobuf::uint32 value) {
  
  listsizelimit_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.listSizeLimit)
}

// bool truncateTop = 3;
inline void ChannelDataMergeOptions::clear_truncatetop() {
  truncatetop_ = false;
}
inline bool ChannelDataMergeOptions::truncatetop() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.truncateTop)
  return truncatetop_;
}
inline void ChannelDataMergeOptions::set_truncatetop(bool value) {
  
  truncatetop_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.truncateTop)
}

// bool shouldCheckRemovableMapField = 4;
inline void ChannelDataMergeOptions::clear_shouldcheckremovablemapfield() {
  shouldcheckremovablemapfield_ = false;
}
inline bool ChannelDataMergeOptions::shouldcheckremovablemapfield() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.shouldCheckRemovableMapField)
  return shouldcheckremovablemapfield_;
}
inline void ChannelDataMergeOptions::set_shouldcheckremovablemapfield(bool value) {
  
  shouldcheckremovablemapfield_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.shouldCheckRemovableMapField)
}

// -------------------------------------------------------------------

// CreateChannelMessage

// .channeldpb.ChannelType channelType = 1;
inline void CreateChannelMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeldpb::ChannelType CreateChannelMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.channelType)
  return static_cast< ::channeldpb::ChannelType >(channeltype_);
}
inline void CreateChannelMessage::set_channeltype(::channeldpb::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelMessage.channelType)
}

// string metadata = 2;
inline void CreateChannelMessage::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChannelMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.metadata)
  return metadata_.GetNoArena();
}
inline void CreateChannelMessage::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelMessage.metadata)
}
#if LANG_CXX11
inline void CreateChannelMessage::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.CreateChannelMessage.metadata)
}
#endif
inline void CreateChannelMessage::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.CreateChannelMessage.metadata)
}
inline void CreateChannelMessage::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.CreateChannelMessage.metadata)
}
inline ::std::string* CreateChannelMessage::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChannelMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChannelMessage::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.metadata)
}

// .channeldpb.ChannelSubscriptionOptions subOptions = 3;
inline bool CreateChannelMessage::has_suboptions() const {
  return this != internal_default_instance() && suboptions_ != NULL;
}
inline void CreateChannelMessage::clear_suboptions() {
  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
}
inline const ::channeldpb::ChannelSubscriptionOptions& CreateChannelMessage::suboptions() const {
  const ::channeldpb::ChannelSubscriptionOptions* p = suboptions_;
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.subOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeldpb::ChannelSubscriptionOptions*>(
      &::channeldpb::_ChannelSubscriptionOptions_default_instance_);
}
inline ::channeldpb::ChannelSubscriptionOptions* CreateChannelMessage::release_suboptions() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.subOptions)
  
  ::channeldpb::ChannelSubscriptionOptions* temp = suboptions_;
  suboptions_ = NULL;
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* CreateChannelMessage::mutable_suboptions() {
  
  if (suboptions_ == NULL) {
    suboptions_ = new ::channeldpb::ChannelSubscriptionOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.subOptions)
  return suboptions_;
}
inline void CreateChannelMessage::set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete suboptions_;
  }
  if (suboptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      suboptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.subOptions)
}

// .google.protobuf.Any data = 4;
inline bool CreateChannelMessage::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& CreateChannelMessage::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* CreateChannelMessage::release_data() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* CreateChannelMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.data)
  return data_;
}
inline void CreateChannelMessage::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.data)
}

// .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
inline bool CreateChannelMessage::has_mergeoptions() const {
  return this != internal_default_instance() && mergeoptions_ != NULL;
}
inline void CreateChannelMessage::clear_mergeoptions() {
  if (GetArenaNoVirtual() == NULL && mergeoptions_ != NULL) {
    delete mergeoptions_;
  }
  mergeoptions_ = NULL;
}
inline const ::channeldpb::ChannelDataMergeOptions& CreateChannelMessage::mergeoptions() const {
  const ::channeldpb::ChannelDataMergeOptions* p = mergeoptions_;
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.mergeOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeldpb::ChannelDataMergeOptions*>(
      &::channeldpb::_ChannelDataMergeOptions_default_instance_);
}
inline ::channeldpb::ChannelDataMergeOptions* CreateChannelMessage::release_mergeoptions() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.mergeOptions)
  
  ::channeldpb::ChannelDataMergeOptions* temp = mergeoptions_;
  mergeoptions_ = NULL;
  return temp;
}
inline ::channeldpb::ChannelDataMergeOptions* CreateChannelMessage::mutable_mergeoptions() {
  
  if (mergeoptions_ == NULL) {
    mergeoptions_ = new ::channeldpb::ChannelDataMergeOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.mergeOptions)
  return mergeoptions_;
}
inline void CreateChannelMessage::set_allocated_mergeoptions(::channeldpb::ChannelDataMergeOptions* mergeoptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mergeoptions_;
  }
  if (mergeoptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mergeoptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mergeoptions, submessage_arena);
    }
    
  } else {
    
  }
  mergeoptions_ = mergeoptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.mergeOptions)
}

// -------------------------------------------------------------------

// CreateChannelResultMessage

// .channeldpb.ChannelType channelType = 1;
inline void CreateChannelResultMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeldpb::ChannelType CreateChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.channelType)
  return static_cast< ::channeldpb::ChannelType >(channeltype_);
}
inline void CreateChannelResultMessage::set_channeltype(::channeldpb::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.channelType)
}

// string metadata = 2;
inline void CreateChannelResultMessage::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChannelResultMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.metadata)
  return metadata_.GetNoArena();
}
inline void CreateChannelResultMessage::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.metadata)
}
#if LANG_CXX11
inline void CreateChannelResultMessage::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.CreateChannelResultMessage.metadata)
}
#endif
inline void CreateChannelResultMessage::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.CreateChannelResultMessage.metadata)
}
inline void CreateChannelResultMessage::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.CreateChannelResultMessage.metadata)
}
inline ::std::string* CreateChannelResultMessage::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelResultMessage.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChannelResultMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelResultMessage.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChannelResultMessage::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelResultMessage.metadata)
}

// uint32 ownerConnId = 3;
inline void CreateChannelResultMessage::clear_ownerconnid() {
  ownerconnid_ = 0u;
}
inline ::google::protobuf::uint32 CreateChannelResultMessage::ownerconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.ownerConnId)
  return ownerconnid_;
}
inline void CreateChannelResultMessage::set_ownerconnid(::google::protobuf::uint32 value) {
  
  ownerconnid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.ownerConnId)
}

// uint32 channelId = 4;
inline void CreateChannelResultMessage::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 CreateChannelResultMessage::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.channelId)
  return channelid_;
}
inline void CreateChannelResultMessage::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.channelId)
}

// -------------------------------------------------------------------

// RemoveChannelMessage

// uint32 channelId = 1;
inline void RemoveChannelMessage::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 RemoveChannelMessage::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.RemoveChannelMessage.channelId)
  return channelid_;
}
inline void RemoveChannelMessage::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.RemoveChannelMessage.channelId)
}

// -------------------------------------------------------------------

// ListChannelMessage

// .channeldpb.ChannelType typeFilter = 1;
inline void ListChannelMessage::clear_typefilter() {
  typefilter_ = 0;
}
inline ::channeldpb::ChannelType ListChannelMessage::typefilter() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelMessage.typeFilter)
  return static_cast< ::channeldpb::ChannelType >(typefilter_);
}
inline void ListChannelMessage::set_typefilter(::channeldpb::ChannelType value) {
  
  typefilter_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelMessage.typeFilter)
}

// repeated string metadataFilters = 2;
inline int ListChannelMessage::metadatafilters_size() const {
  return metadatafilters_.size();
}
inline void ListChannelMessage::clear_metadatafilters() {
  metadatafilters_.Clear();
}
inline const ::std::string& ListChannelMessage::metadatafilters(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelMessage.metadataFilters)
  return metadatafilters_.Get(index);
}
inline ::std::string* ListChannelMessage::mutable_metadatafilters(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.ListChannelMessage.metadataFilters)
  return metadatafilters_.Mutable(index);
}
inline void ListChannelMessage::set_metadatafilters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelMessage.metadataFilters)
  metadatafilters_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListChannelMessage::set_metadatafilters(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelMessage.metadataFilters)
  metadatafilters_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListChannelMessage::set_metadatafilters(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  metadatafilters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::set_metadatafilters(int index, const char* value, size_t size) {
  metadatafilters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channeldpb.ListChannelMessage.metadataFilters)
}
inline ::std::string* ListChannelMessage::add_metadatafilters() {
  // @@protoc_insertion_point(field_add_mutable:channeldpb.ListChannelMessage.metadataFilters)
  return metadatafilters_.Add();
}
inline void ListChannelMessage::add_metadatafilters(const ::std::string& value) {
  metadatafilters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channeldpb.ListChannelMessage.metadataFilters)
}
#if LANG_CXX11
inline void ListChannelMessage::add_metadatafilters(::std::string&& value) {
  metadatafilters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:channeldpb.ListChannelMessage.metadataFilters)
}
#endif
inline void ListChannelMessage::add_metadatafilters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  metadatafilters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::add_metadatafilters(const char* value, size_t size) {
  metadatafilters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channeldpb.ListChannelMessage.metadataFilters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListChannelMessage::metadatafilters() const {
  // @@protoc_insertion_point(field_list:channeldpb.ListChannelMessage.metadataFilters)
  return metadatafilters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListChannelMessage::mutable_metadatafilters() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.ListChannelMessage.metadataFilters)
  return &metadatafilters_;
}

// -------------------------------------------------------------------

// ListChannelResultMessage_ChannelInfo

// uint32 channelId = 1;
inline void ListChannelResultMessage_ChannelInfo::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 ListChannelResultMessage_ChannelInfo::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.ChannelInfo.channelId)
  return channelid_;
}
inline void ListChannelResultMessage_ChannelInfo::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelResultMessage.ChannelInfo.channelId)
}

// .channeldpb.ChannelType channelType = 2;
inline void ListChannelResultMessage_ChannelInfo::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeldpb::ChannelType ListChannelResultMessage_ChannelInfo::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.ChannelInfo.channelType)
  return static_cast< ::channeldpb::ChannelType >(channeltype_);
}
inline void ListChannelResultMessage_ChannelInfo::set_channeltype(::channeldpb::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelResultMessage.ChannelInfo.channelType)
}

// string metadata = 3;
inline void ListChannelResultMessage_ChannelInfo::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListChannelResultMessage_ChannelInfo::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
  return metadata_.GetNoArena();
}
inline void ListChannelResultMessage_ChannelInfo::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}
#if LANG_CXX11
inline void ListChannelResultMessage_ChannelInfo::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}
#endif
inline void ListChannelResultMessage_ChannelInfo::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}
inline void ListChannelResultMessage_ChannelInfo::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}
inline ::std::string* ListChannelResultMessage_ChannelInfo::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListChannelResultMessage_ChannelInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListChannelResultMessage_ChannelInfo::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}

// -------------------------------------------------------------------

// ListChannelResultMessage

// repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
inline int ListChannelResultMessage::channels_size() const {
  return channels_.size();
}
inline void ListChannelResultMessage::clear_channels() {
  channels_.Clear();
}
inline const ::channeldpb::ListChannelResultMessage_ChannelInfo& ListChannelResultMessage::channels(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.channels)
  return channels_.Get(index);
}
inline ::channeldpb::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.ListChannelResultMessage.channels)
  return channels_.Mutable(index);
}
inline ::channeldpb::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::add_channels() {
  // @@protoc_insertion_point(field_add:channeldpb.ListChannelResultMessage.channels)
  return channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >*
ListChannelResultMessage::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.ListChannelResultMessage.channels)
  return &channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >&
ListChannelResultMessage::channels() const {
  // @@protoc_insertion_point(field_list:channeldpb.ListChannelResultMessage.channels)
  return channels_;
}

// -------------------------------------------------------------------

// SubscribedToChannelMessage

// uint32 connId = 1;
inline void SubscribedToChannelMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 SubscribedToChannelMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelMessage.connId)
  return connid_;
}
inline void SubscribedToChannelMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelMessage.connId)
}

// .channeldpb.ChannelSubscriptionOptions subOptions = 2;
inline bool SubscribedToChannelMessage::has_suboptions() const {
  return this != internal_default_instance() && suboptions_ != NULL;
}
inline void SubscribedToChannelMessage::clear_suboptions() {
  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
}
inline const ::channeldpb::ChannelSubscriptionOptions& SubscribedToChannelMessage::suboptions() const {
  const ::channeldpb::ChannelSubscriptionOptions* p = suboptions_;
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelMessage.subOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeldpb::ChannelSubscriptionOptions*>(
      &::channeldpb::_ChannelSubscriptionOptions_default_instance_);
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelMessage::release_suboptions() {
  // @@protoc_insertion_point(field_release:channeldpb.SubscribedToChannelMessage.subOptions)
  
  ::channeldpb::ChannelSubscriptionOptions* temp = suboptions_;
  suboptions_ = NULL;
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelMessage::mutable_suboptions() {
  
  if (suboptions_ == NULL) {
    suboptions_ = new ::channeldpb::ChannelSubscriptionOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.SubscribedToChannelMessage.subOptions)
  return suboptions_;
}
inline void SubscribedToChannelMessage::set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete suboptions_;
  }
  if (suboptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      suboptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SubscribedToChannelMessage.subOptions)
}

// -------------------------------------------------------------------

// SubscribedToChannelResultMessage

// uint32 connId = 1;
inline void SubscribedToChannelResultMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 SubscribedToChannelResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.connId)
  return connid_;
}
inline void SubscribedToChannelResultMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelResultMessage.connId)
}

// .channeldpb.ChannelSubscriptionOptions subOptions = 2;
inline bool SubscribedToChannelResultMessage::has_suboptions() const {
  return this != internal_default_instance() && suboptions_ != NULL;
}
inline void SubscribedToChannelResultMessage::clear_suboptions() {
  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
}
inline const ::channeldpb::ChannelSubscriptionOptions& SubscribedToChannelResultMessage::suboptions() const {
  const ::channeldpb::ChannelSubscriptionOptions* p = suboptions_;
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.subOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeldpb::ChannelSubscriptionOptions*>(
      &::channeldpb::_ChannelSubscriptionOptions_default_instance_);
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelResultMessage::release_suboptions() {
  // @@protoc_insertion_point(field_release:channeldpb.SubscribedToChannelResultMessage.subOptions)
  
  ::channeldpb::ChannelSubscriptionOptions* temp = suboptions_;
  suboptions_ = NULL;
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelResultMessage::mutable_suboptions() {
  
  if (suboptions_ == NULL) {
    suboptions_ = new ::channeldpb::ChannelSubscriptionOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.SubscribedToChannelResultMessage.subOptions)
  return suboptions_;
}
inline void SubscribedToChannelResultMessage::set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete suboptions_;
  }
  if (suboptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      suboptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SubscribedToChannelResultMessage.subOptions)
}

// .channeldpb.ConnectionType connType = 3;
inline void SubscribedToChannelResultMessage::clear_conntype() {
  conntype_ = 0;
}
inline ::channeldpb::ConnectionType SubscribedToChannelResultMessage::conntype() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.connType)
  return static_cast< ::channeldpb::ConnectionType >(conntype_);
}
inline void SubscribedToChannelResultMessage::set_conntype(::channeldpb::ConnectionType value) {
  
  conntype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelResultMessage.connType)
}

// .channeldpb.ChannelType channelType = 4;
inline void SubscribedToChannelResultMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeldpb::ChannelType SubscribedToChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.channelType)
  return static_cast< ::channeldpb::ChannelType >(channeltype_);
}
inline void SubscribedToChannelResultMessage::set_channeltype(::channeldpb::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelResultMessage.channelType)
}

// -------------------------------------------------------------------

// UnsubscribedFromChannelMessage

// uint32 connId = 1;
inline void UnsubscribedFromChannelMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 UnsubscribedFromChannelMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelMessage.connId)
  return connid_;
}
inline void UnsubscribedFromChannelMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelMessage.connId)
}

// -------------------------------------------------------------------

// UnsubscribedFromChannelResultMessage

// uint32 connId = 1;
inline void UnsubscribedFromChannelResultMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 UnsubscribedFromChannelResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelResultMessage.connId)
  return connid_;
}
inline void UnsubscribedFromChannelResultMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelResultMessage.connId)
}

// .channeldpb.ConnectionType connType = 2;
inline void UnsubscribedFromChannelResultMessage::clear_conntype() {
  conntype_ = 0;
}
inline ::channeldpb::ConnectionType UnsubscribedFromChannelResultMessage::conntype() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelResultMessage.connType)
  return static_cast< ::channeldpb::ConnectionType >(conntype_);
}
inline void UnsubscribedFromChannelResultMessage::set_conntype(::channeldpb::ConnectionType value) {
  
  conntype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelResultMessage.connType)
}

// .channeldpb.ChannelType channelType = 3;
inline void UnsubscribedFromChannelResultMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeldpb::ChannelType UnsubscribedFromChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelResultMessage.channelType)
  return static_cast< ::channeldpb::ChannelType >(channeltype_);
}
inline void UnsubscribedFromChannelResultMessage::set_channeltype(::channeldpb::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelResultMessage.channelType)
}

// -------------------------------------------------------------------

// ChannelDataUpdateMessage

// .google.protobuf.Any data = 1;
inline bool ChannelDataUpdateMessage::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& ChannelDataUpdateMessage::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataUpdateMessage.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* ChannelDataUpdateMessage::release_data() {
  // @@protoc_insertion_point(field_release:channeldpb.ChannelDataUpdateMessage.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* ChannelDataUpdateMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.ChannelDataUpdateMessage.data)
  return data_;
}
inline void ChannelDataUpdateMessage::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ChannelDataUpdateMessage.data)
}

// uint32 contextConnId = 2;
inline void ChannelDataUpdateMessage::clear_contextconnid() {
  contextconnid_ = 0u;
}
inline ::google::protobuf::uint32 ChannelDataUpdateMessage::contextconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataUpdateMessage.contextConnId)
  return contextconnid_;
}
inline void ChannelDataUpdateMessage::set_contextconnid(::google::protobuf::uint32 value) {
  
  contextconnid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataUpdateMessage.contextConnId)
}

// -------------------------------------------------------------------

// DisconnectMessage

// uint32 connId = 1;
inline void DisconnectMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 DisconnectMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.DisconnectMessage.connId)
  return connid_;
}
inline void DisconnectMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.DisconnectMessage.connId)
}

// -------------------------------------------------------------------

// SpatialInfo

// double x = 1;
inline void SpatialInfo::clear_x() {
  x_ = 0;
}
inline double SpatialInfo::x() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInfo.x)
  return x_;
}
inline void SpatialInfo::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInfo.x)
}

// double y = 2;
inline void SpatialInfo::clear_y() {
  y_ = 0;
}
inline double SpatialInfo::y() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInfo.y)
  return y_;
}
inline void SpatialInfo::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInfo.y)
}

// double z = 3;
inline void SpatialInfo::clear_z() {
  z_ = 0;
}
inline double SpatialInfo::z() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInfo.z)
  return z_;
}
inline void SpatialInfo::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInfo.z)
}

// -------------------------------------------------------------------

// CreateSpatialChannelsResultMessage

// repeated uint32 spatialChannelId = 1;
inline int CreateSpatialChannelsResultMessage::spatialchannelid_size() const {
  return spatialchannelid_.size();
}
inline void CreateSpatialChannelsResultMessage::clear_spatialchannelid() {
  spatialchannelid_.Clear();
}
inline ::google::protobuf::uint32 CreateSpatialChannelsResultMessage::spatialchannelid(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
  return spatialchannelid_.Get(index);
}
inline void CreateSpatialChannelsResultMessage::set_spatialchannelid(int index, ::google::protobuf::uint32 value) {
  spatialchannelid_.Set(index, value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
}
inline void CreateSpatialChannelsResultMessage::add_spatialchannelid(::google::protobuf::uint32 value) {
  spatialchannelid_.Add(value);
  // @@protoc_insertion_point(field_add:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CreateSpatialChannelsResultMessage::spatialchannelid() const {
  // @@protoc_insertion_point(field_list:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
  return spatialchannelid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CreateSpatialChannelsResultMessage::mutable_spatialchannelid() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
  return &spatialchannelid_;
}

// string metadata = 2;
inline void CreateSpatialChannelsResultMessage::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateSpatialChannelsResultMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateSpatialChannelsResultMessage.metadata)
  return metadata_.GetNoArena();
}
inline void CreateSpatialChannelsResultMessage::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}
#if LANG_CXX11
inline void CreateSpatialChannelsResultMessage::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}
#endif
inline void CreateSpatialChannelsResultMessage::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}
inline void CreateSpatialChannelsResultMessage::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}
inline ::std::string* CreateSpatialChannelsResultMessage::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateSpatialChannelsResultMessage.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateSpatialChannelsResultMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateSpatialChannelsResultMessage.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSpatialChannelsResultMessage::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}

// uint32 ownerConnId = 3;
inline void CreateSpatialChannelsResultMessage::clear_ownerconnid() {
  ownerconnid_ = 0u;
}
inline ::google::protobuf::uint32 CreateSpatialChannelsResultMessage::ownerconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateSpatialChannelsResultMessage.ownerConnId)
  return ownerconnid_;
}
inline void CreateSpatialChannelsResultMessage::set_ownerconnid(::google::protobuf::uint32 value) {
  
  ownerconnid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.CreateSpatialChannelsResultMessage.ownerConnId)
}

// -------------------------------------------------------------------

// QuerySpatialChannelMessage

// repeated .channeldpb.SpatialInfo spatialInfo = 1;
inline int QuerySpatialChannelMessage::spatialinfo_size() const {
  return spatialinfo_.size();
}
inline void QuerySpatialChannelMessage::clear_spatialinfo() {
  spatialinfo_.Clear();
}
inline const ::channeldpb::SpatialInfo& QuerySpatialChannelMessage::spatialinfo(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return spatialinfo_.Get(index);
}
inline ::channeldpb::SpatialInfo* QuerySpatialChannelMessage::mutable_spatialinfo(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return spatialinfo_.Mutable(index);
}
inline ::channeldpb::SpatialInfo* QuerySpatialChannelMessage::add_spatialinfo() {
  // @@protoc_insertion_point(field_add:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return spatialinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialInfo >*
QuerySpatialChannelMessage::mutable_spatialinfo() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return &spatialinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialInfo >&
QuerySpatialChannelMessage::spatialinfo() const {
  // @@protoc_insertion_point(field_list:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return spatialinfo_;
}

// -------------------------------------------------------------------

// QuerySpatialChannelResultMessage

// repeated uint32 channelId = 1;
inline int QuerySpatialChannelResultMessage::channelid_size() const {
  return channelid_.size();
}
inline void QuerySpatialChannelResultMessage::clear_channelid() {
  channelid_.Clear();
}
inline ::google::protobuf::uint32 QuerySpatialChannelResultMessage::channelid(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.QuerySpatialChannelResultMessage.channelId)
  return channelid_.Get(index);
}
inline void QuerySpatialChannelResultMessage::set_channelid(int index, ::google::protobuf::uint32 value) {
  channelid_.Set(index, value);
  // @@protoc_insertion_point(field_set:channeldpb.QuerySpatialChannelResultMessage.channelId)
}
inline void QuerySpatialChannelResultMessage::add_channelid(::google::protobuf::uint32 value) {
  channelid_.Add(value);
  // @@protoc_insertion_point(field_add:channeldpb.QuerySpatialChannelResultMessage.channelId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuerySpatialChannelResultMessage::channelid() const {
  // @@protoc_insertion_point(field_list:channeldpb.QuerySpatialChannelResultMessage.channelId)
  return channelid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuerySpatialChannelResultMessage::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.QuerySpatialChannelResultMessage.channelId)
  return &channelid_;
}

// -------------------------------------------------------------------

// ChannelDataHandoverMessage

// uint32 srcChannelId = 1;
inline void ChannelDataHandoverMessage::clear_srcchannelid() {
  srcchannelid_ = 0u;
}
inline ::google::protobuf::uint32 ChannelDataHandoverMessage::srcchannelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.srcChannelId)
  return srcchannelid_;
}
inline void ChannelDataHandoverMessage::set_srcchannelid(::google::protobuf::uint32 value) {
  
  srcchannelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataHandoverMessage.srcChannelId)
}

// uint32 dstChannelId = 2;
inline void ChannelDataHandoverMessage::clear_dstchannelid() {
  dstchannelid_ = 0u;
}
inline ::google::protobuf::uint32 ChannelDataHandoverMessage::dstchannelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.dstChannelId)
  return dstchannelid_;
}
inline void ChannelDataHandoverMessage::set_dstchannelid(::google::protobuf::uint32 value) {
  
  dstchannelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataHandoverMessage.dstChannelId)
}

// uint32 contextConnId = 3;
inline void ChannelDataHandoverMessage::clear_contextconnid() {
  contextconnid_ = 0u;
}
inline ::google::protobuf::uint32 ChannelDataHandoverMessage::contextconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.contextConnId)
  return contextconnid_;
}
inline void ChannelDataHandoverMessage::set_contextconnid(::google::protobuf::uint32 value) {
  
  contextconnid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataHandoverMessage.contextConnId)
}

// .google.protobuf.Any data = 4;
inline bool ChannelDataHandoverMessage::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& ChannelDataHandoverMessage::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* ChannelDataHandoverMessage::release_data() {
  // @@protoc_insertion_point(field_release:channeldpb.ChannelDataHandoverMessage.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* ChannelDataHandoverMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.ChannelDataHandoverMessage.data)
  return data_;
}
inline void ChannelDataHandoverMessage::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ChannelDataHandoverMessage.data)
}

// -------------------------------------------------------------------

// SpatialRegion

// .channeldpb.SpatialInfo min = 1;
inline bool SpatialRegion::has_min() const {
  return this != internal_default_instance() && min_ != NULL;
}
inline void SpatialRegion::clear_min() {
  if (GetArenaNoVirtual() == NULL && min_ != NULL) {
    delete min_;
  }
  min_ = NULL;
}
inline const ::channeldpb::SpatialInfo& SpatialRegion::min() const {
  const ::channeldpb::SpatialInfo* p = min_;
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.min)
  return p != NULL ? *p : *reinterpret_cast<const ::channeldpb::SpatialInfo*>(
      &::channeldpb::_SpatialInfo_default_instance_);
}
inline ::channeldpb::SpatialInfo* SpatialRegion::release_min() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialRegion.min)
  
  ::channeldpb::SpatialInfo* temp = min_;
  min_ = NULL;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::mutable_min() {
  
  if (min_ == NULL) {
    min_ = new ::channeldpb::SpatialInfo;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialRegion.min)
  return min_;
}
inline void SpatialRegion::set_allocated_min(::channeldpb::SpatialInfo* min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_;
  }
  if (min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialRegion.min)
}

// .channeldpb.SpatialInfo max = 2;
inline bool SpatialRegion::has_max() const {
  return this != internal_default_instance() && max_ != NULL;
}
inline void SpatialRegion::clear_max() {
  if (GetArenaNoVirtual() == NULL && max_ != NULL) {
    delete max_;
  }
  max_ = NULL;
}
inline const ::channeldpb::SpatialInfo& SpatialRegion::max() const {
  const ::channeldpb::SpatialInfo* p = max_;
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.max)
  return p != NULL ? *p : *reinterpret_cast<const ::channeldpb::SpatialInfo*>(
      &::channeldpb::_SpatialInfo_default_instance_);
}
inline ::channeldpb::SpatialInfo* SpatialRegion::release_max() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialRegion.max)
  
  ::channeldpb::SpatialInfo* temp = max_;
  max_ = NULL;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::mutable_max() {
  
  if (max_ == NULL) {
    max_ = new ::channeldpb::SpatialInfo;
  }
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialRegion.max)
  return max_;
}
inline void SpatialRegion::set_allocated_max(::channeldpb::SpatialInfo* max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_;
  }
  if (max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialRegion.max)
}

// uint32 channelId = 3;
inline void SpatialRegion::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 SpatialRegion::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.channelId)
  return channelid_;
}
inline void SpatialRegion::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SpatialRegion.channelId)
}

// uint32 serverIndex = 4;
inline void SpatialRegion::clear_serverindex() {
  serverindex_ = 0u;
}
inline ::google::protobuf::uint32 SpatialRegion::serverindex() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.serverIndex)
  return serverindex_;
}
inline void SpatialRegion::set_serverindex(::google::protobuf::uint32 value) {
  
  serverindex_ = value;
  // @@protoc_insertion_point(field_set:channeldpb.SpatialRegion.serverIndex)
}

// -------------------------------------------------------------------

// SpatialRegionsUpdateMessage

// repeated .channeldpb.SpatialRegion regions = 1;
inline int SpatialRegionsUpdateMessage::regions_size() const {
  return regions_.size();
}
inline void SpatialRegionsUpdateMessage::clear_regions() {
  regions_.Clear();
}
inline const ::channeldpb::SpatialRegion& SpatialRegionsUpdateMessage::regions(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegionsUpdateMessage.regions)
  return regions_.Get(index);
}
inline ::channeldpb::SpatialRegion* SpatialRegionsUpdateMessage::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialRegionsUpdateMessage.regions)
  return regions_.Mutable(index);
}
inline ::channeldpb::SpatialRegion* SpatialRegionsUpdateMessage::add_regions() {
  // @@protoc_insertion_point(field_add:channeldpb.SpatialRegionsUpdateMessage.regions)
  return regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialRegion >*
SpatialRegionsUpdateMessage::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.SpatialRegionsUpdateMessage.regions)
  return &regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channeldpb::SpatialRegion >&
SpatialRegionsUpdateMessage::regions() const {
  // @@protoc_insertion_point(field_list:channeldpb.SpatialRegionsUpdateMessage.regions)
  return regions_;
}

// -------------------------------------------------------------------

// DebugGetSpatialRegionsMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channeldpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::channeldpb::AuthResultMessage_AuthResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::AuthResultMessage_AuthResult>() {
  return ::channeldpb::AuthResultMessage_AuthResult_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::BroadcastType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::BroadcastType>() {
  return ::channeldpb::BroadcastType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::ConnectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::ConnectionType>() {
  return ::channeldpb::ConnectionType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::ChannelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::ChannelType>() {
  return ::channeldpb::ChannelType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::MessageType>() {
  return ::channeldpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::CompressionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::CompressionType>() {
  return ::channeldpb::CompressionType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::ChannelDataAccess> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::ChannelDataAccess>() {
  return ::channeldpb::ChannelDataAccess_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channeld_2eproto__INCLUDED

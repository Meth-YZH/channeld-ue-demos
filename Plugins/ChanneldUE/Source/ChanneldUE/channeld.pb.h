// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channeld.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_channeld_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_channeld_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_channeld_2eproto CHANNELDUE_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct CHANNELDUE_API TableStruct_channeld_2eproto {
  static const uint32_t offsets[];
};
CHANNELDUE_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_channeld_2eproto;
namespace channeldpb {
class AuthMessage;
struct AuthMessageDefaultTypeInternal;
CHANNELDUE_API extern AuthMessageDefaultTypeInternal _AuthMessage_default_instance_;
class AuthResultMessage;
struct AuthResultMessageDefaultTypeInternal;
CHANNELDUE_API extern AuthResultMessageDefaultTypeInternal _AuthResultMessage_default_instance_;
class ChannelDataHandoverMessage;
struct ChannelDataHandoverMessageDefaultTypeInternal;
CHANNELDUE_API extern ChannelDataHandoverMessageDefaultTypeInternal _ChannelDataHandoverMessage_default_instance_;
class ChannelDataMergeOptions;
struct ChannelDataMergeOptionsDefaultTypeInternal;
CHANNELDUE_API extern ChannelDataMergeOptionsDefaultTypeInternal _ChannelDataMergeOptions_default_instance_;
class ChannelDataUpdateMessage;
struct ChannelDataUpdateMessageDefaultTypeInternal;
CHANNELDUE_API extern ChannelDataUpdateMessageDefaultTypeInternal _ChannelDataUpdateMessage_default_instance_;
class ChannelSubscriptionOptions;
struct ChannelSubscriptionOptionsDefaultTypeInternal;
CHANNELDUE_API extern ChannelSubscriptionOptionsDefaultTypeInternal _ChannelSubscriptionOptions_default_instance_;
class CreateChannelMessage;
struct CreateChannelMessageDefaultTypeInternal;
CHANNELDUE_API extern CreateChannelMessageDefaultTypeInternal _CreateChannelMessage_default_instance_;
class CreateChannelResultMessage;
struct CreateChannelResultMessageDefaultTypeInternal;
CHANNELDUE_API extern CreateChannelResultMessageDefaultTypeInternal _CreateChannelResultMessage_default_instance_;
class CreateSpatialChannelsResultMessage;
struct CreateSpatialChannelsResultMessageDefaultTypeInternal;
CHANNELDUE_API extern CreateSpatialChannelsResultMessageDefaultTypeInternal _CreateSpatialChannelsResultMessage_default_instance_;
class DebugGetSpatialRegionsMessage;
struct DebugGetSpatialRegionsMessageDefaultTypeInternal;
CHANNELDUE_API extern DebugGetSpatialRegionsMessageDefaultTypeInternal _DebugGetSpatialRegionsMessage_default_instance_;
class DisconnectMessage;
struct DisconnectMessageDefaultTypeInternal;
CHANNELDUE_API extern DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
class ListChannelMessage;
struct ListChannelMessageDefaultTypeInternal;
CHANNELDUE_API extern ListChannelMessageDefaultTypeInternal _ListChannelMessage_default_instance_;
class ListChannelResultMessage;
struct ListChannelResultMessageDefaultTypeInternal;
CHANNELDUE_API extern ListChannelResultMessageDefaultTypeInternal _ListChannelResultMessage_default_instance_;
class ListChannelResultMessage_ChannelInfo;
struct ListChannelResultMessage_ChannelInfoDefaultTypeInternal;
CHANNELDUE_API extern ListChannelResultMessage_ChannelInfoDefaultTypeInternal _ListChannelResultMessage_ChannelInfo_default_instance_;
class MessagePack;
struct MessagePackDefaultTypeInternal;
CHANNELDUE_API extern MessagePackDefaultTypeInternal _MessagePack_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
CHANNELDUE_API extern PacketDefaultTypeInternal _Packet_default_instance_;
class QuerySpatialChannelMessage;
struct QuerySpatialChannelMessageDefaultTypeInternal;
CHANNELDUE_API extern QuerySpatialChannelMessageDefaultTypeInternal _QuerySpatialChannelMessage_default_instance_;
class QuerySpatialChannelResultMessage;
struct QuerySpatialChannelResultMessageDefaultTypeInternal;
CHANNELDUE_API extern QuerySpatialChannelResultMessageDefaultTypeInternal _QuerySpatialChannelResultMessage_default_instance_;
class RemoveChannelMessage;
struct RemoveChannelMessageDefaultTypeInternal;
CHANNELDUE_API extern RemoveChannelMessageDefaultTypeInternal _RemoveChannelMessage_default_instance_;
class ServerForwardMessage;
struct ServerForwardMessageDefaultTypeInternal;
CHANNELDUE_API extern ServerForwardMessageDefaultTypeInternal _ServerForwardMessage_default_instance_;
class SpatialInfo;
struct SpatialInfoDefaultTypeInternal;
CHANNELDUE_API extern SpatialInfoDefaultTypeInternal _SpatialInfo_default_instance_;
class SpatialInterestQuery;
struct SpatialInterestQueryDefaultTypeInternal;
CHANNELDUE_API extern SpatialInterestQueryDefaultTypeInternal _SpatialInterestQuery_default_instance_;
class SpatialInterestQuery_BoxAOI;
struct SpatialInterestQuery_BoxAOIDefaultTypeInternal;
CHANNELDUE_API extern SpatialInterestQuery_BoxAOIDefaultTypeInternal _SpatialInterestQuery_BoxAOI_default_instance_;
class SpatialInterestQuery_ConeAOI;
struct SpatialInterestQuery_ConeAOIDefaultTypeInternal;
CHANNELDUE_API extern SpatialInterestQuery_ConeAOIDefaultTypeInternal _SpatialInterestQuery_ConeAOI_default_instance_;
class SpatialInterestQuery_SphereAOI;
struct SpatialInterestQuery_SphereAOIDefaultTypeInternal;
CHANNELDUE_API extern SpatialInterestQuery_SphereAOIDefaultTypeInternal _SpatialInterestQuery_SphereAOI_default_instance_;
class SpatialInterestQuery_SpotsAOI;
struct SpatialInterestQuery_SpotsAOIDefaultTypeInternal;
CHANNELDUE_API extern SpatialInterestQuery_SpotsAOIDefaultTypeInternal _SpatialInterestQuery_SpotsAOI_default_instance_;
class SpatialRegion;
struct SpatialRegionDefaultTypeInternal;
CHANNELDUE_API extern SpatialRegionDefaultTypeInternal _SpatialRegion_default_instance_;
class SpatialRegionsUpdateMessage;
struct SpatialRegionsUpdateMessageDefaultTypeInternal;
CHANNELDUE_API extern SpatialRegionsUpdateMessageDefaultTypeInternal _SpatialRegionsUpdateMessage_default_instance_;
class SubscribedToChannelMessage;
struct SubscribedToChannelMessageDefaultTypeInternal;
CHANNELDUE_API extern SubscribedToChannelMessageDefaultTypeInternal _SubscribedToChannelMessage_default_instance_;
class SubscribedToChannelResultMessage;
struct SubscribedToChannelResultMessageDefaultTypeInternal;
CHANNELDUE_API extern SubscribedToChannelResultMessageDefaultTypeInternal _SubscribedToChannelResultMessage_default_instance_;
class UnsubscribedFromChannelMessage;
struct UnsubscribedFromChannelMessageDefaultTypeInternal;
CHANNELDUE_API extern UnsubscribedFromChannelMessageDefaultTypeInternal _UnsubscribedFromChannelMessage_default_instance_;
class UnsubscribedFromChannelResultMessage;
struct UnsubscribedFromChannelResultMessageDefaultTypeInternal;
CHANNELDUE_API extern UnsubscribedFromChannelResultMessageDefaultTypeInternal _UnsubscribedFromChannelResultMessage_default_instance_;
class UpdateSpatialInterestMessage;
struct UpdateSpatialInterestMessageDefaultTypeInternal;
CHANNELDUE_API extern UpdateSpatialInterestMessageDefaultTypeInternal _UpdateSpatialInterestMessage_default_instance_;
}  // namespace channeldpb
PROTOBUF_NAMESPACE_OPEN
template<> CHANNELDUE_API ::channeldpb::AuthMessage* Arena::CreateMaybeMessage<::channeldpb::AuthMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::AuthResultMessage* Arena::CreateMaybeMessage<::channeldpb::AuthResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ChannelDataHandoverMessage* Arena::CreateMaybeMessage<::channeldpb::ChannelDataHandoverMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ChannelDataMergeOptions* Arena::CreateMaybeMessage<::channeldpb::ChannelDataMergeOptions>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ChannelDataUpdateMessage* Arena::CreateMaybeMessage<::channeldpb::ChannelDataUpdateMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ChannelSubscriptionOptions* Arena::CreateMaybeMessage<::channeldpb::ChannelSubscriptionOptions>(Arena*);
template<> CHANNELDUE_API ::channeldpb::CreateChannelMessage* Arena::CreateMaybeMessage<::channeldpb::CreateChannelMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::CreateChannelResultMessage* Arena::CreateMaybeMessage<::channeldpb::CreateChannelResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::CreateSpatialChannelsResultMessage* Arena::CreateMaybeMessage<::channeldpb::CreateSpatialChannelsResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::DebugGetSpatialRegionsMessage* Arena::CreateMaybeMessage<::channeldpb::DebugGetSpatialRegionsMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::DisconnectMessage* Arena::CreateMaybeMessage<::channeldpb::DisconnectMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ListChannelMessage* Arena::CreateMaybeMessage<::channeldpb::ListChannelMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ListChannelResultMessage* Arena::CreateMaybeMessage<::channeldpb::ListChannelResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ListChannelResultMessage_ChannelInfo* Arena::CreateMaybeMessage<::channeldpb::ListChannelResultMessage_ChannelInfo>(Arena*);
template<> CHANNELDUE_API ::channeldpb::MessagePack* Arena::CreateMaybeMessage<::channeldpb::MessagePack>(Arena*);
template<> CHANNELDUE_API ::channeldpb::Packet* Arena::CreateMaybeMessage<::channeldpb::Packet>(Arena*);
template<> CHANNELDUE_API ::channeldpb::QuerySpatialChannelMessage* Arena::CreateMaybeMessage<::channeldpb::QuerySpatialChannelMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::QuerySpatialChannelResultMessage* Arena::CreateMaybeMessage<::channeldpb::QuerySpatialChannelResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::RemoveChannelMessage* Arena::CreateMaybeMessage<::channeldpb::RemoveChannelMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::ServerForwardMessage* Arena::CreateMaybeMessage<::channeldpb::ServerForwardMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialInfo* Arena::CreateMaybeMessage<::channeldpb::SpatialInfo>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialInterestQuery* Arena::CreateMaybeMessage<::channeldpb::SpatialInterestQuery>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialInterestQuery_BoxAOI* Arena::CreateMaybeMessage<::channeldpb::SpatialInterestQuery_BoxAOI>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialInterestQuery_ConeAOI* Arena::CreateMaybeMessage<::channeldpb::SpatialInterestQuery_ConeAOI>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialInterestQuery_SphereAOI* Arena::CreateMaybeMessage<::channeldpb::SpatialInterestQuery_SphereAOI>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialInterestQuery_SpotsAOI* Arena::CreateMaybeMessage<::channeldpb::SpatialInterestQuery_SpotsAOI>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialRegion* Arena::CreateMaybeMessage<::channeldpb::SpatialRegion>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SpatialRegionsUpdateMessage* Arena::CreateMaybeMessage<::channeldpb::SpatialRegionsUpdateMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SubscribedToChannelMessage* Arena::CreateMaybeMessage<::channeldpb::SubscribedToChannelMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SubscribedToChannelResultMessage* Arena::CreateMaybeMessage<::channeldpb::SubscribedToChannelResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::UnsubscribedFromChannelMessage* Arena::CreateMaybeMessage<::channeldpb::UnsubscribedFromChannelMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::UnsubscribedFromChannelResultMessage* Arena::CreateMaybeMessage<::channeldpb::UnsubscribedFromChannelResultMessage>(Arena*);
template<> CHANNELDUE_API ::channeldpb::UpdateSpatialInterestMessage* Arena::CreateMaybeMessage<::channeldpb::UpdateSpatialInterestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace channeldpb {

enum AuthResultMessage_AuthResult : int {
  AuthResultMessage_AuthResult_SUCCESSFUL = 0,
  AuthResultMessage_AuthResult_INVALID_PIT = 1,
  AuthResultMessage_AuthResult_INVALID_LT = 2,
  AuthResultMessage_AuthResult_AuthResultMessage_AuthResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AuthResultMessage_AuthResult_AuthResultMessage_AuthResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool AuthResultMessage_AuthResult_IsValid(int value);
constexpr AuthResultMessage_AuthResult AuthResultMessage_AuthResult_AuthResult_MIN = AuthResultMessage_AuthResult_SUCCESSFUL;
constexpr AuthResultMessage_AuthResult AuthResultMessage_AuthResult_AuthResult_MAX = AuthResultMessage_AuthResult_INVALID_LT;
constexpr int AuthResultMessage_AuthResult_AuthResult_ARRAYSIZE = AuthResultMessage_AuthResult_AuthResult_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthResultMessage_AuthResult_descriptor();
template<typename T>
inline const std::string& AuthResultMessage_AuthResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthResultMessage_AuthResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthResultMessage_AuthResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthResultMessage_AuthResult_descriptor(), enum_t_value);
}
inline bool AuthResultMessage_AuthResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthResultMessage_AuthResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthResultMessage_AuthResult>(
    AuthResultMessage_AuthResult_descriptor(), name, value);
}
enum BroadcastType : int {
  NO_BROADCAST = 0,
  SINGLE_CONNECTION = 1,
  ALL = 2,
  ALL_BUT_SENDER = 4,
  ALL_BUT_OWNER = 8,
  ALL_BUT_CLIENT = 16,
  ALL_BUT_SERVER = 32,
  ADJACENT_CHANNELS = 64,
  BroadcastType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BroadcastType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool BroadcastType_IsValid(int value);
constexpr BroadcastType BroadcastType_MIN = NO_BROADCAST;
constexpr BroadcastType BroadcastType_MAX = ADJACENT_CHANNELS;
constexpr int BroadcastType_ARRAYSIZE = BroadcastType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastType_descriptor();
template<typename T>
inline const std::string& BroadcastType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BroadcastType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BroadcastType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BroadcastType_descriptor(), enum_t_value);
}
inline bool BroadcastType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BroadcastType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastType>(
    BroadcastType_descriptor(), name, value);
}
enum ConnectionType : int {
  NO_CONNECTION = 0,
  SERVER = 1,
  CLIENT = 2,
  ConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool ConnectionType_IsValid(int value);
constexpr ConnectionType ConnectionType_MIN = NO_CONNECTION;
constexpr ConnectionType ConnectionType_MAX = CLIENT;
constexpr int ConnectionType_ARRAYSIZE = ConnectionType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionType_descriptor();
template<typename T>
inline const std::string& ConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionType_descriptor(), enum_t_value);
}
inline bool ConnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionType>(
    ConnectionType_descriptor(), name, value);
}
enum ChannelType : int {
  UNKNOWN = 0,
  GLOBAL = 1,
  PRIVATE = 2,
  SUBWORLD = 3,
  SPATIAL = 4,
  TEST = 100,
  TEST1 = 101,
  TEST2 = 102,
  TEST3 = 103,
  TEST4 = 104,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool ChannelType_IsValid(int value);
constexpr ChannelType ChannelType_MIN = UNKNOWN;
constexpr ChannelType ChannelType_MAX = TEST4;
constexpr int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor();
template<typename T>
inline const std::string& ChannelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelType_descriptor(), enum_t_value);
}
inline bool ChannelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
enum MessageType : int {
  INVALID = 0,
  AUTH = 1,
  CREATE_CHANNEL = 3,
  REMOVE_CHANNEL = 4,
  LIST_CHANNEL = 5,
  SUB_TO_CHANNEL = 6,
  UNSUB_FROM_CHANNEL = 7,
  CHANNEL_DATA_UPDATE = 8,
  DISCONNECT = 9,
  CREATE_SPATIAL_CHANNEL = 10,
  QUERY_SPATIAL_CHANNEL = 11,
  CHANNEL_DATA_HANDOVER = 12,
  SPATIAL_REGIONS_UPDATE = 13,
  UPDATE_SPATIAL_INTEREST = 14,
  DEBUG_GET_SPATIAL_REGIONS = 99,
  USER_SPACE_START = 100,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = INVALID;
constexpr MessageType MessageType_MAX = USER_SPACE_START;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum CompressionType : int {
  NO_COMPRESSION = 0,
  SNAPPY = 1,
  CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool CompressionType_IsValid(int value);
constexpr CompressionType CompressionType_MIN = NO_COMPRESSION;
constexpr CompressionType CompressionType_MAX = SNAPPY;
constexpr int CompressionType_ARRAYSIZE = CompressionType_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor();
template<typename T>
inline const std::string& CompressionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompressionType_descriptor(), enum_t_value);
}
inline bool CompressionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompressionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompressionType>(
    CompressionType_descriptor(), name, value);
}
enum ChannelDataAccess : int {
  NO_ACCESS = 0,
  READ_ACCESS = 1,
  WRITE_ACCESS = 2,
  ChannelDataAccess_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChannelDataAccess_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
CHANNELDUE_API bool ChannelDataAccess_IsValid(int value);
constexpr ChannelDataAccess ChannelDataAccess_MIN = NO_ACCESS;
constexpr ChannelDataAccess ChannelDataAccess_MAX = WRITE_ACCESS;
constexpr int ChannelDataAccess_ARRAYSIZE = ChannelDataAccess_MAX + 1;

CHANNELDUE_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelDataAccess_descriptor();
template<typename T>
inline const std::string& ChannelDataAccess_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelDataAccess>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelDataAccess_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelDataAccess_descriptor(), enum_t_value);
}
inline bool ChannelDataAccess_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelDataAccess* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelDataAccess>(
    ChannelDataAccess_descriptor(), name, value);
}
// ===================================================================

class CHANNELDUE_API Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .channeldpb.MessagePack messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::channeldpb::MessagePack* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::MessagePack >*
      mutable_messages();
  private:
  const ::channeldpb::MessagePack& _internal_messages(int index) const;
  ::channeldpb::MessagePack* _internal_add_messages();
  public:
  const ::channeldpb::MessagePack& messages(int index) const;
  ::channeldpb::MessagePack* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::MessagePack >&
      messages() const;

  // @@protoc_insertion_point(class_scope:channeldpb.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::MessagePack > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API MessagePack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.MessagePack) */ {
 public:
  inline MessagePack() : MessagePack(nullptr) {}
  ~MessagePack() override;
  explicit PROTOBUF_CONSTEXPR MessagePack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessagePack(const MessagePack& from);
  MessagePack(MessagePack&& from) noexcept
    : MessagePack() {
    *this = ::std::move(from);
  }

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagePack& operator=(MessagePack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessagePack& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessagePack* internal_default_instance() {
    return reinterpret_cast<const MessagePack*>(
               &_MessagePack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessagePack& a, MessagePack& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagePack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagePack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessagePack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessagePack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessagePack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessagePack& from) {
    MessagePack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagePack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.MessagePack";
  }
  protected:
  explicit MessagePack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 5,
    kChannelIdFieldNumber = 1,
    kBroadcastFieldNumber = 2,
    kStubIdFieldNumber = 3,
    kMsgTypeFieldNumber = 4,
  };
  // bytes msgBody = 5;
  void clear_msgbody();
  const std::string& msgbody() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgbody(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgbody();
  PROTOBUF_NODISCARD std::string* release_msgbody();
  void set_allocated_msgbody(std::string* msgbody);
  private:
  const std::string& _internal_msgbody() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgbody(const std::string& value);
  std::string* _internal_mutable_msgbody();
  public:

  // uint32 channelId = 1;
  void clear_channelid();
  uint32_t channelid() const;
  void set_channelid(uint32_t value);
  private:
  uint32_t _internal_channelid() const;
  void _internal_set_channelid(uint32_t value);
  public:

  // uint32 broadcast = 2;
  void clear_broadcast();
  uint32_t broadcast() const;
  void set_broadcast(uint32_t value);
  private:
  uint32_t _internal_broadcast() const;
  void _internal_set_broadcast(uint32_t value);
  public:

  // uint32 stubId = 3;
  void clear_stubid();
  uint32_t stubid() const;
  void set_stubid(uint32_t value);
  private:
  uint32_t _internal_stubid() const;
  void _internal_set_stubid(uint32_t value);
  public:

  // uint32 msgType = 4;
  void clear_msgtype();
  uint32_t msgtype() const;
  void set_msgtype(uint32_t value);
  private:
  uint32_t _internal_msgtype() const;
  void _internal_set_msgtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.MessagePack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgbody_;
    uint32_t channelid_;
    uint32_t broadcast_;
    uint32_t stubid_;
    uint32_t msgtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ServerForwardMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ServerForwardMessage) */ {
 public:
  inline ServerForwardMessage() : ServerForwardMessage(nullptr) {}
  ~ServerForwardMessage() override;
  explicit PROTOBUF_CONSTEXPR ServerForwardMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerForwardMessage(const ServerForwardMessage& from);
  ServerForwardMessage(ServerForwardMessage&& from) noexcept
    : ServerForwardMessage() {
    *this = ::std::move(from);
  }

  inline ServerForwardMessage& operator=(const ServerForwardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerForwardMessage& operator=(ServerForwardMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerForwardMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerForwardMessage* internal_default_instance() {
    return reinterpret_cast<const ServerForwardMessage*>(
               &_ServerForwardMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerForwardMessage& a, ServerForwardMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerForwardMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerForwardMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerForwardMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerForwardMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerForwardMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerForwardMessage& from) {
    ServerForwardMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerForwardMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ServerForwardMessage";
  }
  protected:
  explicit ServerForwardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kClientConnIdFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 clientConnId = 1;
  void clear_clientconnid();
  uint32_t clientconnid() const;
  void set_clientconnid(uint32_t value);
  private:
  uint32_t _internal_clientconnid() const;
  void _internal_set_clientconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ServerForwardMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    uint32_t clientconnid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API AuthMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.AuthMessage) */ {
 public:
  inline AuthMessage() : AuthMessage(nullptr) {}
  ~AuthMessage() override;
  explicit PROTOBUF_CONSTEXPR AuthMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthMessage(const AuthMessage& from);
  AuthMessage(AuthMessage&& from) noexcept
    : AuthMessage() {
    *this = ::std::move(from);
  }

  inline AuthMessage& operator=(const AuthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthMessage& operator=(AuthMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthMessage* internal_default_instance() {
    return reinterpret_cast<const AuthMessage*>(
               &_AuthMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthMessage& a, AuthMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthMessage& from) {
    AuthMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.AuthMessage";
  }
  protected:
  explicit AuthMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdentifierTokenFieldNumber = 1,
    kLoginTokenFieldNumber = 2,
  };
  // string playerIdentifierToken = 1;
  void clear_playeridentifiertoken();
  const std::string& playeridentifiertoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playeridentifiertoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playeridentifiertoken();
  PROTOBUF_NODISCARD std::string* release_playeridentifiertoken();
  void set_allocated_playeridentifiertoken(std::string* playeridentifiertoken);
  private:
  const std::string& _internal_playeridentifiertoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playeridentifiertoken(const std::string& value);
  std::string* _internal_mutable_playeridentifiertoken();
  public:

  // string loginToken = 2;
  void clear_logintoken();
  const std::string& logintoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logintoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logintoken();
  PROTOBUF_NODISCARD std::string* release_logintoken();
  void set_allocated_logintoken(std::string* logintoken);
  private:
  const std::string& _internal_logintoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logintoken(const std::string& value);
  std::string* _internal_mutable_logintoken();
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.AuthMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playeridentifiertoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logintoken_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API AuthResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.AuthResultMessage) */ {
 public:
  inline AuthResultMessage() : AuthResultMessage(nullptr) {}
  ~AuthResultMessage() override;
  explicit PROTOBUF_CONSTEXPR AuthResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthResultMessage(const AuthResultMessage& from);
  AuthResultMessage(AuthResultMessage&& from) noexcept
    : AuthResultMessage() {
    *this = ::std::move(from);
  }

  inline AuthResultMessage& operator=(const AuthResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResultMessage& operator=(AuthResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthResultMessage* internal_default_instance() {
    return reinterpret_cast<const AuthResultMessage*>(
               &_AuthResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthResultMessage& a, AuthResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthResultMessage& from) {
    AuthResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.AuthResultMessage";
  }
  protected:
  explicit AuthResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthResultMessage_AuthResult AuthResult;
  static constexpr AuthResult SUCCESSFUL =
    AuthResultMessage_AuthResult_SUCCESSFUL;
  static constexpr AuthResult INVALID_PIT =
    AuthResultMessage_AuthResult_INVALID_PIT;
  static constexpr AuthResult INVALID_LT =
    AuthResultMessage_AuthResult_INVALID_LT;
  static inline bool AuthResult_IsValid(int value) {
    return AuthResultMessage_AuthResult_IsValid(value);
  }
  static constexpr AuthResult AuthResult_MIN =
    AuthResultMessage_AuthResult_AuthResult_MIN;
  static constexpr AuthResult AuthResult_MAX =
    AuthResultMessage_AuthResult_AuthResult_MAX;
  static constexpr int AuthResult_ARRAYSIZE =
    AuthResultMessage_AuthResult_AuthResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuthResult_descriptor() {
    return AuthResultMessage_AuthResult_descriptor();
  }
  template<typename T>
  static inline const std::string& AuthResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuthResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuthResult_Name.");
    return AuthResultMessage_AuthResult_Name(enum_t_value);
  }
  static inline bool AuthResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AuthResult* value) {
    return AuthResultMessage_AuthResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kConnIdFieldNumber = 2,
    kCompressionTypeFieldNumber = 3,
  };
  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  void clear_result();
  ::channeldpb::AuthResultMessage_AuthResult result() const;
  void set_result(::channeldpb::AuthResultMessage_AuthResult value);
  private:
  ::channeldpb::AuthResultMessage_AuthResult _internal_result() const;
  void _internal_set_result(::channeldpb::AuthResultMessage_AuthResult value);
  public:

  // uint32 connId = 2;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // .channeldpb.CompressionType compressionType = 3;
  void clear_compressiontype();
  ::channeldpb::CompressionType compressiontype() const;
  void set_compressiontype(::channeldpb::CompressionType value);
  private:
  ::channeldpb::CompressionType _internal_compressiontype() const;
  void _internal_set_compressiontype(::channeldpb::CompressionType value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.AuthResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    uint32_t connid_;
    int compressiontype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ChannelSubscriptionOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelSubscriptionOptions) */ {
 public:
  inline ChannelSubscriptionOptions() : ChannelSubscriptionOptions(nullptr) {}
  ~ChannelSubscriptionOptions() override;
  explicit PROTOBUF_CONSTEXPR ChannelSubscriptionOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelSubscriptionOptions(const ChannelSubscriptionOptions& from);
  ChannelSubscriptionOptions(ChannelSubscriptionOptions&& from) noexcept
    : ChannelSubscriptionOptions() {
    *this = ::std::move(from);
  }

  inline ChannelSubscriptionOptions& operator=(const ChannelSubscriptionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelSubscriptionOptions& operator=(ChannelSubscriptionOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelSubscriptionOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelSubscriptionOptions* internal_default_instance() {
    return reinterpret_cast<const ChannelSubscriptionOptions*>(
               &_ChannelSubscriptionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelSubscriptionOptions& a, ChannelSubscriptionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelSubscriptionOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelSubscriptionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelSubscriptionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelSubscriptionOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelSubscriptionOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelSubscriptionOptions& from) {
    ChannelSubscriptionOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelSubscriptionOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ChannelSubscriptionOptions";
  }
  protected:
  explicit ChannelSubscriptionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldMasksFieldNumber = 2,
    kDataAccessFieldNumber = 1,
    kFanOutIntervalMsFieldNumber = 3,
    kFanOutDelayMsFieldNumber = 4,
    kSkipSelfUpdateFanOutFieldNumber = 5,
  };
  // repeated string dataFieldMasks = 2;
  int datafieldmasks_size() const;
  private:
  int _internal_datafieldmasks_size() const;
  public:
  void clear_datafieldmasks();
  const std::string& datafieldmasks(int index) const;
  std::string* mutable_datafieldmasks(int index);
  void set_datafieldmasks(int index, const std::string& value);
  void set_datafieldmasks(int index, std::string&& value);
  void set_datafieldmasks(int index, const char* value);
  void set_datafieldmasks(int index, const char* value, size_t size);
  std::string* add_datafieldmasks();
  void add_datafieldmasks(const std::string& value);
  void add_datafieldmasks(std::string&& value);
  void add_datafieldmasks(const char* value);
  void add_datafieldmasks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datafieldmasks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datafieldmasks();
  private:
  const std::string& _internal_datafieldmasks(int index) const;
  std::string* _internal_add_datafieldmasks();
  public:

  // optional .channeldpb.ChannelDataAccess dataAccess = 1;
  bool has_dataaccess() const;
  private:
  bool _internal_has_dataaccess() const;
  public:
  void clear_dataaccess();
  ::channeldpb::ChannelDataAccess dataaccess() const;
  void set_dataaccess(::channeldpb::ChannelDataAccess value);
  private:
  ::channeldpb::ChannelDataAccess _internal_dataaccess() const;
  void _internal_set_dataaccess(::channeldpb::ChannelDataAccess value);
  public:

  // optional uint32 fanOutIntervalMs = 3;
  bool has_fanoutintervalms() const;
  private:
  bool _internal_has_fanoutintervalms() const;
  public:
  void clear_fanoutintervalms();
  uint32_t fanoutintervalms() const;
  void set_fanoutintervalms(uint32_t value);
  private:
  uint32_t _internal_fanoutintervalms() const;
  void _internal_set_fanoutintervalms(uint32_t value);
  public:

  // optional int32 fanOutDelayMs = 4;
  bool has_fanoutdelayms() const;
  private:
  bool _internal_has_fanoutdelayms() const;
  public:
  void clear_fanoutdelayms();
  int32_t fanoutdelayms() const;
  void set_fanoutdelayms(int32_t value);
  private:
  int32_t _internal_fanoutdelayms() const;
  void _internal_set_fanoutdelayms(int32_t value);
  public:

  // optional bool skipSelfUpdateFanOut = 5;
  bool has_skipselfupdatefanout() const;
  private:
  bool _internal_has_skipselfupdatefanout() const;
  public:
  void clear_skipselfupdatefanout();
  bool skipselfupdatefanout() const;
  void set_skipselfupdatefanout(bool value);
  private:
  bool _internal_skipselfupdatefanout() const;
  void _internal_set_skipselfupdatefanout(bool value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelSubscriptionOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datafieldmasks_;
    int dataaccess_;
    uint32_t fanoutintervalms_;
    int32_t fanoutdelayms_;
    bool skipselfupdatefanout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ChannelDataMergeOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelDataMergeOptions) */ {
 public:
  inline ChannelDataMergeOptions() : ChannelDataMergeOptions(nullptr) {}
  ~ChannelDataMergeOptions() override;
  explicit PROTOBUF_CONSTEXPR ChannelDataMergeOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelDataMergeOptions(const ChannelDataMergeOptions& from);
  ChannelDataMergeOptions(ChannelDataMergeOptions&& from) noexcept
    : ChannelDataMergeOptions() {
    *this = ::std::move(from);
  }

  inline ChannelDataMergeOptions& operator=(const ChannelDataMergeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelDataMergeOptions& operator=(ChannelDataMergeOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelDataMergeOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelDataMergeOptions* internal_default_instance() {
    return reinterpret_cast<const ChannelDataMergeOptions*>(
               &_ChannelDataMergeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChannelDataMergeOptions& a, ChannelDataMergeOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelDataMergeOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelDataMergeOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelDataMergeOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelDataMergeOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelDataMergeOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelDataMergeOptions& from) {
    ChannelDataMergeOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelDataMergeOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ChannelDataMergeOptions";
  }
  protected:
  explicit ChannelDataMergeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListSizeLimitFieldNumber = 2,
    kShouldReplaceListFieldNumber = 1,
    kTruncateTopFieldNumber = 3,
    kShouldCheckRemovableMapFieldFieldNumber = 4,
  };
  // uint32 listSizeLimit = 2;
  void clear_listsizelimit();
  uint32_t listsizelimit() const;
  void set_listsizelimit(uint32_t value);
  private:
  uint32_t _internal_listsizelimit() const;
  void _internal_set_listsizelimit(uint32_t value);
  public:

  // bool shouldReplaceList = 1;
  void clear_shouldreplacelist();
  bool shouldreplacelist() const;
  void set_shouldreplacelist(bool value);
  private:
  bool _internal_shouldreplacelist() const;
  void _internal_set_shouldreplacelist(bool value);
  public:

  // bool truncateTop = 3;
  void clear_truncatetop();
  bool truncatetop() const;
  void set_truncatetop(bool value);
  private:
  bool _internal_truncatetop() const;
  void _internal_set_truncatetop(bool value);
  public:

  // bool shouldCheckRemovableMapField = 4;
  void clear_shouldcheckremovablemapfield();
  bool shouldcheckremovablemapfield() const;
  void set_shouldcheckremovablemapfield(bool value);
  private:
  bool _internal_shouldcheckremovablemapfield() const;
  void _internal_set_shouldcheckremovablemapfield(bool value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelDataMergeOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t listsizelimit_;
    bool shouldreplacelist_;
    bool truncatetop_;
    bool shouldcheckremovablemapfield_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API CreateChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.CreateChannelMessage) */ {
 public:
  inline CreateChannelMessage() : CreateChannelMessage(nullptr) {}
  ~CreateChannelMessage() override;
  explicit PROTOBUF_CONSTEXPR CreateChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelMessage(const CreateChannelMessage& from);
  CreateChannelMessage(CreateChannelMessage&& from) noexcept
    : CreateChannelMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelMessage& operator=(const CreateChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelMessage& operator=(CreateChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelMessage*>(
               &_CreateChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateChannelMessage& a, CreateChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateChannelMessage& from) {
    CreateChannelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.CreateChannelMessage";
  }
  protected:
  explicit CreateChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kSubOptionsFieldNumber = 3,
    kDataFieldNumber = 4,
    kMergeOptionsFieldNumber = 5,
    kChannelTypeFieldNumber = 1,
  };
  // string metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  bool has_suboptions() const;
  private:
  bool _internal_has_suboptions() const;
  public:
  void clear_suboptions();
  const ::channeldpb::ChannelSubscriptionOptions& suboptions() const;
  PROTOBUF_NODISCARD ::channeldpb::ChannelSubscriptionOptions* release_suboptions();
  ::channeldpb::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions);
  private:
  const ::channeldpb::ChannelSubscriptionOptions& _internal_suboptions() const;
  ::channeldpb::ChannelSubscriptionOptions* _internal_mutable_suboptions();
  public:
  void unsafe_arena_set_allocated_suboptions(
      ::channeldpb::ChannelSubscriptionOptions* suboptions);
  ::channeldpb::ChannelSubscriptionOptions* unsafe_arena_release_suboptions();

  // .google.protobuf.Any data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  bool has_mergeoptions() const;
  private:
  bool _internal_has_mergeoptions() const;
  public:
  void clear_mergeoptions();
  const ::channeldpb::ChannelDataMergeOptions& mergeoptions() const;
  PROTOBUF_NODISCARD ::channeldpb::ChannelDataMergeOptions* release_mergeoptions();
  ::channeldpb::ChannelDataMergeOptions* mutable_mergeoptions();
  void set_allocated_mergeoptions(::channeldpb::ChannelDataMergeOptions* mergeoptions);
  private:
  const ::channeldpb::ChannelDataMergeOptions& _internal_mergeoptions() const;
  ::channeldpb::ChannelDataMergeOptions* _internal_mutable_mergeoptions();
  public:
  void unsafe_arena_set_allocated_mergeoptions(
      ::channeldpb::ChannelDataMergeOptions* mergeoptions);
  ::channeldpb::ChannelDataMergeOptions* unsafe_arena_release_mergeoptions();

  // .channeldpb.ChannelType channelType = 1;
  void clear_channeltype();
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);
  private:
  ::channeldpb::ChannelType _internal_channeltype() const;
  void _internal_set_channeltype(::channeldpb::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.CreateChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::channeldpb::ChannelSubscriptionOptions* suboptions_;
    ::PROTOBUF_NAMESPACE_ID::Any* data_;
    ::channeldpb::ChannelDataMergeOptions* mergeoptions_;
    int channeltype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API CreateChannelResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.CreateChannelResultMessage) */ {
 public:
  inline CreateChannelResultMessage() : CreateChannelResultMessage(nullptr) {}
  ~CreateChannelResultMessage() override;
  explicit PROTOBUF_CONSTEXPR CreateChannelResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateChannelResultMessage(const CreateChannelResultMessage& from);
  CreateChannelResultMessage(CreateChannelResultMessage&& from) noexcept
    : CreateChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelResultMessage& operator=(const CreateChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelResultMessage& operator=(CreateChannelResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChannelResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResultMessage*>(
               &_CreateChannelResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateChannelResultMessage& a, CreateChannelResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChannelResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChannelResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateChannelResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateChannelResultMessage& from) {
    CreateChannelResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.CreateChannelResultMessage";
  }
  protected:
  explicit CreateChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kChannelTypeFieldNumber = 1,
    kOwnerConnIdFieldNumber = 3,
    kChannelIdFieldNumber = 4,
  };
  // string metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .channeldpb.ChannelType channelType = 1;
  void clear_channeltype();
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);
  private:
  ::channeldpb::ChannelType _internal_channeltype() const;
  void _internal_set_channeltype(::channeldpb::ChannelType value);
  public:

  // uint32 ownerConnId = 3;
  void clear_ownerconnid();
  uint32_t ownerconnid() const;
  void set_ownerconnid(uint32_t value);
  private:
  uint32_t _internal_ownerconnid() const;
  void _internal_set_ownerconnid(uint32_t value);
  public:

  // uint32 channelId = 4;
  void clear_channelid();
  uint32_t channelid() const;
  void set_channelid(uint32_t value);
  private:
  uint32_t _internal_channelid() const;
  void _internal_set_channelid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.CreateChannelResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    int channeltype_;
    uint32_t ownerconnid_;
    uint32_t channelid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API RemoveChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.RemoveChannelMessage) */ {
 public:
  inline RemoveChannelMessage() : RemoveChannelMessage(nullptr) {}
  ~RemoveChannelMessage() override;
  explicit PROTOBUF_CONSTEXPR RemoveChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveChannelMessage(const RemoveChannelMessage& from);
  RemoveChannelMessage(RemoveChannelMessage&& from) noexcept
    : RemoveChannelMessage() {
    *this = ::std::move(from);
  }

  inline RemoveChannelMessage& operator=(const RemoveChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveChannelMessage& operator=(RemoveChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveChannelMessage* internal_default_instance() {
    return reinterpret_cast<const RemoveChannelMessage*>(
               &_RemoveChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoveChannelMessage& a, RemoveChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveChannelMessage& from) {
    RemoveChannelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.RemoveChannelMessage";
  }
  protected:
  explicit RemoveChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint32 channelId = 1;
  void clear_channelid();
  uint32_t channelid() const;
  void set_channelid(uint32_t value);
  private:
  uint32_t _internal_channelid() const;
  void _internal_set_channelid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.RemoveChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t channelid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ListChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ListChannelMessage) */ {
 public:
  inline ListChannelMessage() : ListChannelMessage(nullptr) {}
  ~ListChannelMessage() override;
  explicit PROTOBUF_CONSTEXPR ListChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListChannelMessage(const ListChannelMessage& from);
  ListChannelMessage(ListChannelMessage&& from) noexcept
    : ListChannelMessage() {
    *this = ::std::move(from);
  }

  inline ListChannelMessage& operator=(const ListChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelMessage& operator=(ListChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ListChannelMessage*>(
               &_ListChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListChannelMessage& a, ListChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListChannelMessage& from) {
    ListChannelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ListChannelMessage";
  }
  protected:
  explicit ListChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFiltersFieldNumber = 2,
    kTypeFilterFieldNumber = 1,
  };
  // repeated string metadataFilters = 2;
  int metadatafilters_size() const;
  private:
  int _internal_metadatafilters_size() const;
  public:
  void clear_metadatafilters();
  const std::string& metadatafilters(int index) const;
  std::string* mutable_metadatafilters(int index);
  void set_metadatafilters(int index, const std::string& value);
  void set_metadatafilters(int index, std::string&& value);
  void set_metadatafilters(int index, const char* value);
  void set_metadatafilters(int index, const char* value, size_t size);
  std::string* add_metadatafilters();
  void add_metadatafilters(const std::string& value);
  void add_metadatafilters(std::string&& value);
  void add_metadatafilters(const char* value);
  void add_metadatafilters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadatafilters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadatafilters();
  private:
  const std::string& _internal_metadatafilters(int index) const;
  std::string* _internal_add_metadatafilters();
  public:

  // .channeldpb.ChannelType typeFilter = 1;
  void clear_typefilter();
  ::channeldpb::ChannelType typefilter() const;
  void set_typefilter(::channeldpb::ChannelType value);
  private:
  ::channeldpb::ChannelType _internal_typefilter() const;
  void _internal_set_typefilter(::channeldpb::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ListChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadatafilters_;
    int typefilter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ListChannelResultMessage_ChannelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ListChannelResultMessage.ChannelInfo) */ {
 public:
  inline ListChannelResultMessage_ChannelInfo() : ListChannelResultMessage_ChannelInfo(nullptr) {}
  ~ListChannelResultMessage_ChannelInfo() override;
  explicit PROTOBUF_CONSTEXPR ListChannelResultMessage_ChannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListChannelResultMessage_ChannelInfo(const ListChannelResultMessage_ChannelInfo& from);
  ListChannelResultMessage_ChannelInfo(ListChannelResultMessage_ChannelInfo&& from) noexcept
    : ListChannelResultMessage_ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ListChannelResultMessage_ChannelInfo& operator=(const ListChannelResultMessage_ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelResultMessage_ChannelInfo& operator=(ListChannelResultMessage_ChannelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListChannelResultMessage_ChannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListChannelResultMessage_ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ListChannelResultMessage_ChannelInfo*>(
               &_ListChannelResultMessage_ChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListChannelResultMessage_ChannelInfo& a, ListChannelResultMessage_ChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelResultMessage_ChannelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListChannelResultMessage_ChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListChannelResultMessage_ChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListChannelResultMessage_ChannelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListChannelResultMessage_ChannelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListChannelResultMessage_ChannelInfo& from) {
    ListChannelResultMessage_ChannelInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelResultMessage_ChannelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ListChannelResultMessage.ChannelInfo";
  }
  protected:
  explicit ListChannelResultMessage_ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kChannelIdFieldNumber = 1,
    kChannelTypeFieldNumber = 2,
  };
  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // uint32 channelId = 1;
  void clear_channelid();
  uint32_t channelid() const;
  void set_channelid(uint32_t value);
  private:
  uint32_t _internal_channelid() const;
  void _internal_set_channelid(uint32_t value);
  public:

  // .channeldpb.ChannelType channelType = 2;
  void clear_channeltype();
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);
  private:
  ::channeldpb::ChannelType _internal_channeltype() const;
  void _internal_set_channeltype(::channeldpb::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ListChannelResultMessage.ChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    uint32_t channelid_;
    int channeltype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ListChannelResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ListChannelResultMessage) */ {
 public:
  inline ListChannelResultMessage() : ListChannelResultMessage(nullptr) {}
  ~ListChannelResultMessage() override;
  explicit PROTOBUF_CONSTEXPR ListChannelResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListChannelResultMessage(const ListChannelResultMessage& from);
  ListChannelResultMessage(ListChannelResultMessage&& from) noexcept
    : ListChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline ListChannelResultMessage& operator=(const ListChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelResultMessage& operator=(ListChannelResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListChannelResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const ListChannelResultMessage*>(
               &_ListChannelResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListChannelResultMessage& a, ListChannelResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListChannelResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListChannelResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListChannelResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListChannelResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListChannelResultMessage& from) {
    ListChannelResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ListChannelResultMessage";
  }
  protected:
  explicit ListChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListChannelResultMessage_ChannelInfo ChannelInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::channeldpb::ListChannelResultMessage_ChannelInfo* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >*
      mutable_channels();
  private:
  const ::channeldpb::ListChannelResultMessage_ChannelInfo& _internal_channels(int index) const;
  ::channeldpb::ListChannelResultMessage_ChannelInfo* _internal_add_channels();
  public:
  const ::channeldpb::ListChannelResultMessage_ChannelInfo& channels(int index) const;
  ::channeldpb::ListChannelResultMessage_ChannelInfo* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >&
      channels() const;

  // @@protoc_insertion_point(class_scope:channeldpb.ListChannelResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo > channels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SubscribedToChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SubscribedToChannelMessage) */ {
 public:
  inline SubscribedToChannelMessage() : SubscribedToChannelMessage(nullptr) {}
  ~SubscribedToChannelMessage() override;
  explicit PROTOBUF_CONSTEXPR SubscribedToChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribedToChannelMessage(const SubscribedToChannelMessage& from);
  SubscribedToChannelMessage(SubscribedToChannelMessage&& from) noexcept
    : SubscribedToChannelMessage() {
    *this = ::std::move(from);
  }

  inline SubscribedToChannelMessage& operator=(const SubscribedToChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribedToChannelMessage& operator=(SubscribedToChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribedToChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribedToChannelMessage* internal_default_instance() {
    return reinterpret_cast<const SubscribedToChannelMessage*>(
               &_SubscribedToChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubscribedToChannelMessage& a, SubscribedToChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribedToChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribedToChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribedToChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribedToChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribedToChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribedToChannelMessage& from) {
    SubscribedToChannelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribedToChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SubscribedToChannelMessage";
  }
  protected:
  explicit SubscribedToChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubOptionsFieldNumber = 2,
    kConnIdFieldNumber = 1,
  };
  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  bool has_suboptions() const;
  private:
  bool _internal_has_suboptions() const;
  public:
  void clear_suboptions();
  const ::channeldpb::ChannelSubscriptionOptions& suboptions() const;
  PROTOBUF_NODISCARD ::channeldpb::ChannelSubscriptionOptions* release_suboptions();
  ::channeldpb::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions);
  private:
  const ::channeldpb::ChannelSubscriptionOptions& _internal_suboptions() const;
  ::channeldpb::ChannelSubscriptionOptions* _internal_mutable_suboptions();
  public:
  void unsafe_arena_set_allocated_suboptions(
      ::channeldpb::ChannelSubscriptionOptions* suboptions);
  ::channeldpb::ChannelSubscriptionOptions* unsafe_arena_release_suboptions();

  // uint32 connId = 1;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SubscribedToChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::ChannelSubscriptionOptions* suboptions_;
    uint32_t connid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SubscribedToChannelResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SubscribedToChannelResultMessage) */ {
 public:
  inline SubscribedToChannelResultMessage() : SubscribedToChannelResultMessage(nullptr) {}
  ~SubscribedToChannelResultMessage() override;
  explicit PROTOBUF_CONSTEXPR SubscribedToChannelResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribedToChannelResultMessage(const SubscribedToChannelResultMessage& from);
  SubscribedToChannelResultMessage(SubscribedToChannelResultMessage&& from) noexcept
    : SubscribedToChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline SubscribedToChannelResultMessage& operator=(const SubscribedToChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribedToChannelResultMessage& operator=(SubscribedToChannelResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribedToChannelResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribedToChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const SubscribedToChannelResultMessage*>(
               &_SubscribedToChannelResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubscribedToChannelResultMessage& a, SubscribedToChannelResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribedToChannelResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribedToChannelResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribedToChannelResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribedToChannelResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribedToChannelResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubscribedToChannelResultMessage& from) {
    SubscribedToChannelResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribedToChannelResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SubscribedToChannelResultMessage";
  }
  protected:
  explicit SubscribedToChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubOptionsFieldNumber = 2,
    kConnIdFieldNumber = 1,
    kConnTypeFieldNumber = 3,
    kChannelTypeFieldNumber = 4,
  };
  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  bool has_suboptions() const;
  private:
  bool _internal_has_suboptions() const;
  public:
  void clear_suboptions();
  const ::channeldpb::ChannelSubscriptionOptions& suboptions() const;
  PROTOBUF_NODISCARD ::channeldpb::ChannelSubscriptionOptions* release_suboptions();
  ::channeldpb::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions);
  private:
  const ::channeldpb::ChannelSubscriptionOptions& _internal_suboptions() const;
  ::channeldpb::ChannelSubscriptionOptions* _internal_mutable_suboptions();
  public:
  void unsafe_arena_set_allocated_suboptions(
      ::channeldpb::ChannelSubscriptionOptions* suboptions);
  ::channeldpb::ChannelSubscriptionOptions* unsafe_arena_release_suboptions();

  // uint32 connId = 1;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // .channeldpb.ConnectionType connType = 3;
  void clear_conntype();
  ::channeldpb::ConnectionType conntype() const;
  void set_conntype(::channeldpb::ConnectionType value);
  private:
  ::channeldpb::ConnectionType _internal_conntype() const;
  void _internal_set_conntype(::channeldpb::ConnectionType value);
  public:

  // .channeldpb.ChannelType channelType = 4;
  void clear_channeltype();
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);
  private:
  ::channeldpb::ChannelType _internal_channeltype() const;
  void _internal_set_channeltype(::channeldpb::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SubscribedToChannelResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::ChannelSubscriptionOptions* suboptions_;
    uint32_t connid_;
    int conntype_;
    int channeltype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnsubscribedFromChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.UnsubscribedFromChannelMessage) */ {
 public:
  inline UnsubscribedFromChannelMessage() : UnsubscribedFromChannelMessage(nullptr) {}
  ~UnsubscribedFromChannelMessage() override;
  explicit PROTOBUF_CONSTEXPR UnsubscribedFromChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnsubscribedFromChannelMessage(const UnsubscribedFromChannelMessage& from);
  UnsubscribedFromChannelMessage(UnsubscribedFromChannelMessage&& from) noexcept
    : UnsubscribedFromChannelMessage() {
    *this = ::std::move(from);
  }

  inline UnsubscribedFromChannelMessage& operator=(const UnsubscribedFromChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribedFromChannelMessage& operator=(UnsubscribedFromChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsubscribedFromChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsubscribedFromChannelMessage* internal_default_instance() {
    return reinterpret_cast<const UnsubscribedFromChannelMessage*>(
               &_UnsubscribedFromChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UnsubscribedFromChannelMessage& a, UnsubscribedFromChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribedFromChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribedFromChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsubscribedFromChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsubscribedFromChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnsubscribedFromChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnsubscribedFromChannelMessage& from) {
    UnsubscribedFromChannelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribedFromChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.UnsubscribedFromChannelMessage";
  }
  protected:
  explicit UnsubscribedFromChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnIdFieldNumber = 1,
  };
  // uint32 connId = 1;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.UnsubscribedFromChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t connid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UnsubscribedFromChannelResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.UnsubscribedFromChannelResultMessage) */ {
 public:
  inline UnsubscribedFromChannelResultMessage() : UnsubscribedFromChannelResultMessage(nullptr) {}
  ~UnsubscribedFromChannelResultMessage() override;
  explicit PROTOBUF_CONSTEXPR UnsubscribedFromChannelResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnsubscribedFromChannelResultMessage(const UnsubscribedFromChannelResultMessage& from);
  UnsubscribedFromChannelResultMessage(UnsubscribedFromChannelResultMessage&& from) noexcept
    : UnsubscribedFromChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline UnsubscribedFromChannelResultMessage& operator=(const UnsubscribedFromChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribedFromChannelResultMessage& operator=(UnsubscribedFromChannelResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsubscribedFromChannelResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsubscribedFromChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const UnsubscribedFromChannelResultMessage*>(
               &_UnsubscribedFromChannelResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UnsubscribedFromChannelResultMessage& a, UnsubscribedFromChannelResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribedFromChannelResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribedFromChannelResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsubscribedFromChannelResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnsubscribedFromChannelResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnsubscribedFromChannelResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnsubscribedFromChannelResultMessage& from) {
    UnsubscribedFromChannelResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribedFromChannelResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.UnsubscribedFromChannelResultMessage";
  }
  protected:
  explicit UnsubscribedFromChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnIdFieldNumber = 1,
    kConnTypeFieldNumber = 2,
    kChannelTypeFieldNumber = 3,
  };
  // uint32 connId = 1;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // .channeldpb.ConnectionType connType = 2;
  void clear_conntype();
  ::channeldpb::ConnectionType conntype() const;
  void set_conntype(::channeldpb::ConnectionType value);
  private:
  ::channeldpb::ConnectionType _internal_conntype() const;
  void _internal_set_conntype(::channeldpb::ConnectionType value);
  public:

  // .channeldpb.ChannelType channelType = 3;
  void clear_channeltype();
  ::channeldpb::ChannelType channeltype() const;
  void set_channeltype(::channeldpb::ChannelType value);
  private:
  ::channeldpb::ChannelType _internal_channeltype() const;
  void _internal_set_channeltype(::channeldpb::ChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.UnsubscribedFromChannelResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t connid_;
    int conntype_;
    int channeltype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ChannelDataUpdateMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelDataUpdateMessage) */ {
 public:
  inline ChannelDataUpdateMessage() : ChannelDataUpdateMessage(nullptr) {}
  ~ChannelDataUpdateMessage() override;
  explicit PROTOBUF_CONSTEXPR ChannelDataUpdateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelDataUpdateMessage(const ChannelDataUpdateMessage& from);
  ChannelDataUpdateMessage(ChannelDataUpdateMessage&& from) noexcept
    : ChannelDataUpdateMessage() {
    *this = ::std::move(from);
  }

  inline ChannelDataUpdateMessage& operator=(const ChannelDataUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelDataUpdateMessage& operator=(ChannelDataUpdateMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelDataUpdateMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelDataUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelDataUpdateMessage*>(
               &_ChannelDataUpdateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ChannelDataUpdateMessage& a, ChannelDataUpdateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelDataUpdateMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelDataUpdateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelDataUpdateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelDataUpdateMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelDataUpdateMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelDataUpdateMessage& from) {
    ChannelDataUpdateMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelDataUpdateMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ChannelDataUpdateMessage";
  }
  protected:
  explicit ChannelDataUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kContextConnIdFieldNumber = 2,
  };
  // .google.protobuf.Any data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // uint32 contextConnId = 2;
  void clear_contextconnid();
  uint32_t contextconnid() const;
  void set_contextconnid(uint32_t value);
  private:
  uint32_t _internal_contextconnid() const;
  void _internal_set_contextconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelDataUpdateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* data_;
    uint32_t contextconnid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API DisconnectMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.DisconnectMessage) */ {
 public:
  inline DisconnectMessage() : DisconnectMessage(nullptr) {}
  ~DisconnectMessage() override;
  explicit PROTOBUF_CONSTEXPR DisconnectMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectMessage(const DisconnectMessage& from);
  DisconnectMessage(DisconnectMessage&& from) noexcept
    : DisconnectMessage() {
    *this = ::std::move(from);
  }

  inline DisconnectMessage& operator=(const DisconnectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectMessage& operator=(DisconnectMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisconnectMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectMessage* internal_default_instance() {
    return reinterpret_cast<const DisconnectMessage*>(
               &_DisconnectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DisconnectMessage& a, DisconnectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisconnectMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisconnectMessage& from) {
    DisconnectMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.DisconnectMessage";
  }
  protected:
  explicit DisconnectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnIdFieldNumber = 1,
  };
  // uint32 connId = 1;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.DisconnectMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t connid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInfo) */ {
 public:
  inline SpatialInfo() : SpatialInfo(nullptr) {}
  ~SpatialInfo() override;
  explicit PROTOBUF_CONSTEXPR SpatialInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialInfo(const SpatialInfo& from);
  SpatialInfo(SpatialInfo&& from) noexcept
    : SpatialInfo() {
    *this = ::std::move(from);
  }

  inline SpatialInfo& operator=(const SpatialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialInfo& operator=(SpatialInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialInfo* internal_default_instance() {
    return reinterpret_cast<const SpatialInfo*>(
               &_SpatialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SpatialInfo& a, SpatialInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialInfo& from) {
    SpatialInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialInfo";
  }
  protected:
  explicit SpatialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API CreateSpatialChannelsResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.CreateSpatialChannelsResultMessage) */ {
 public:
  inline CreateSpatialChannelsResultMessage() : CreateSpatialChannelsResultMessage(nullptr) {}
  ~CreateSpatialChannelsResultMessage() override;
  explicit PROTOBUF_CONSTEXPR CreateSpatialChannelsResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSpatialChannelsResultMessage(const CreateSpatialChannelsResultMessage& from);
  CreateSpatialChannelsResultMessage(CreateSpatialChannelsResultMessage&& from) noexcept
    : CreateSpatialChannelsResultMessage() {
    *this = ::std::move(from);
  }

  inline CreateSpatialChannelsResultMessage& operator=(const CreateSpatialChannelsResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSpatialChannelsResultMessage& operator=(CreateSpatialChannelsResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSpatialChannelsResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSpatialChannelsResultMessage* internal_default_instance() {
    return reinterpret_cast<const CreateSpatialChannelsResultMessage*>(
               &_CreateSpatialChannelsResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateSpatialChannelsResultMessage& a, CreateSpatialChannelsResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSpatialChannelsResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSpatialChannelsResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSpatialChannelsResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSpatialChannelsResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSpatialChannelsResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSpatialChannelsResultMessage& from) {
    CreateSpatialChannelsResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSpatialChannelsResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.CreateSpatialChannelsResultMessage";
  }
  protected:
  explicit CreateSpatialChannelsResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialChannelIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kOwnerConnIdFieldNumber = 3,
  };
  // repeated uint32 spatialChannelId = 1;
  int spatialchannelid_size() const;
  private:
  int _internal_spatialchannelid_size() const;
  public:
  void clear_spatialchannelid();
  private:
  uint32_t _internal_spatialchannelid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_spatialchannelid() const;
  void _internal_add_spatialchannelid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_spatialchannelid();
  public:
  uint32_t spatialchannelid(int index) const;
  void set_spatialchannelid(int index, uint32_t value);
  void add_spatialchannelid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      spatialchannelid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_spatialchannelid();

  // string metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // uint32 ownerConnId = 3;
  void clear_ownerconnid();
  uint32_t ownerconnid() const;
  void set_ownerconnid(uint32_t value);
  private:
  uint32_t _internal_ownerconnid() const;
  void _internal_set_ownerconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.CreateSpatialChannelsResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > spatialchannelid_;
    mutable std::atomic<int> _spatialchannelid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    uint32_t ownerconnid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API QuerySpatialChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.QuerySpatialChannelMessage) */ {
 public:
  inline QuerySpatialChannelMessage() : QuerySpatialChannelMessage(nullptr) {}
  ~QuerySpatialChannelMessage() override;
  explicit PROTOBUF_CONSTEXPR QuerySpatialChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySpatialChannelMessage(const QuerySpatialChannelMessage& from);
  QuerySpatialChannelMessage(QuerySpatialChannelMessage&& from) noexcept
    : QuerySpatialChannelMessage() {
    *this = ::std::move(from);
  }

  inline QuerySpatialChannelMessage& operator=(const QuerySpatialChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpatialChannelMessage& operator=(QuerySpatialChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySpatialChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySpatialChannelMessage* internal_default_instance() {
    return reinterpret_cast<const QuerySpatialChannelMessage*>(
               &_QuerySpatialChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QuerySpatialChannelMessage& a, QuerySpatialChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpatialChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySpatialChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySpatialChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySpatialChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySpatialChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySpatialChannelMessage& from) {
    QuerySpatialChannelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpatialChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.QuerySpatialChannelMessage";
  }
  protected:
  explicit QuerySpatialChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialInfoFieldNumber = 1,
  };
  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  int spatialinfo_size() const;
  private:
  int _internal_spatialinfo_size() const;
  public:
  void clear_spatialinfo();
  ::channeldpb::SpatialInfo* mutable_spatialinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >*
      mutable_spatialinfo();
  private:
  const ::channeldpb::SpatialInfo& _internal_spatialinfo(int index) const;
  ::channeldpb::SpatialInfo* _internal_add_spatialinfo();
  public:
  const ::channeldpb::SpatialInfo& spatialinfo(int index) const;
  ::channeldpb::SpatialInfo* add_spatialinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >&
      spatialinfo() const;

  // @@protoc_insertion_point(class_scope:channeldpb.QuerySpatialChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo > spatialinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API QuerySpatialChannelResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.QuerySpatialChannelResultMessage) */ {
 public:
  inline QuerySpatialChannelResultMessage() : QuerySpatialChannelResultMessage(nullptr) {}
  ~QuerySpatialChannelResultMessage() override;
  explicit PROTOBUF_CONSTEXPR QuerySpatialChannelResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySpatialChannelResultMessage(const QuerySpatialChannelResultMessage& from);
  QuerySpatialChannelResultMessage(QuerySpatialChannelResultMessage&& from) noexcept
    : QuerySpatialChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline QuerySpatialChannelResultMessage& operator=(const QuerySpatialChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpatialChannelResultMessage& operator=(QuerySpatialChannelResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySpatialChannelResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySpatialChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const QuerySpatialChannelResultMessage*>(
               &_QuerySpatialChannelResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QuerySpatialChannelResultMessage& a, QuerySpatialChannelResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpatialChannelResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySpatialChannelResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySpatialChannelResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySpatialChannelResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySpatialChannelResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySpatialChannelResultMessage& from) {
    QuerySpatialChannelResultMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpatialChannelResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.QuerySpatialChannelResultMessage";
  }
  protected:
  explicit QuerySpatialChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // repeated uint32 channelId = 1;
  int channelid_size() const;
  private:
  int _internal_channelid_size() const;
  public:
  void clear_channelid();
  private:
  uint32_t _internal_channelid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_channelid() const;
  void _internal_add_channelid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_channelid();
  public:
  uint32_t channelid(int index) const;
  void set_channelid(int index, uint32_t value);
  void add_channelid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      channelid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_channelid();

  // @@protoc_insertion_point(class_scope:channeldpb.QuerySpatialChannelResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > channelid_;
    mutable std::atomic<int> _channelid_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API ChannelDataHandoverMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.ChannelDataHandoverMessage) */ {
 public:
  inline ChannelDataHandoverMessage() : ChannelDataHandoverMessage(nullptr) {}
  ~ChannelDataHandoverMessage() override;
  explicit PROTOBUF_CONSTEXPR ChannelDataHandoverMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelDataHandoverMessage(const ChannelDataHandoverMessage& from);
  ChannelDataHandoverMessage(ChannelDataHandoverMessage&& from) noexcept
    : ChannelDataHandoverMessage() {
    *this = ::std::move(from);
  }

  inline ChannelDataHandoverMessage& operator=(const ChannelDataHandoverMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelDataHandoverMessage& operator=(ChannelDataHandoverMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelDataHandoverMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelDataHandoverMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelDataHandoverMessage*>(
               &_ChannelDataHandoverMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ChannelDataHandoverMessage& a, ChannelDataHandoverMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelDataHandoverMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelDataHandoverMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelDataHandoverMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelDataHandoverMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelDataHandoverMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelDataHandoverMessage& from) {
    ChannelDataHandoverMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelDataHandoverMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.ChannelDataHandoverMessage";
  }
  protected:
  explicit ChannelDataHandoverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kSrcChannelIdFieldNumber = 1,
    kDstChannelIdFieldNumber = 2,
    kContextConnIdFieldNumber = 3,
  };
  // .google.protobuf.Any data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // uint32 srcChannelId = 1;
  void clear_srcchannelid();
  uint32_t srcchannelid() const;
  void set_srcchannelid(uint32_t value);
  private:
  uint32_t _internal_srcchannelid() const;
  void _internal_set_srcchannelid(uint32_t value);
  public:

  // uint32 dstChannelId = 2;
  void clear_dstchannelid();
  uint32_t dstchannelid() const;
  void set_dstchannelid(uint32_t value);
  private:
  uint32_t _internal_dstchannelid() const;
  void _internal_set_dstchannelid(uint32_t value);
  public:

  // uint32 contextConnId = 3;
  void clear_contextconnid();
  uint32_t contextconnid() const;
  void set_contextconnid(uint32_t value);
  private:
  uint32_t _internal_contextconnid() const;
  void _internal_set_contextconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.ChannelDataHandoverMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* data_;
    uint32_t srcchannelid_;
    uint32_t dstchannelid_;
    uint32_t contextconnid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialRegion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialRegion) */ {
 public:
  inline SpatialRegion() : SpatialRegion(nullptr) {}
  ~SpatialRegion() override;
  explicit PROTOBUF_CONSTEXPR SpatialRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialRegion(const SpatialRegion& from);
  SpatialRegion(SpatialRegion&& from) noexcept
    : SpatialRegion() {
    *this = ::std::move(from);
  }

  inline SpatialRegion& operator=(const SpatialRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialRegion& operator=(SpatialRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialRegion* internal_default_instance() {
    return reinterpret_cast<const SpatialRegion*>(
               &_SpatialRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SpatialRegion& a, SpatialRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialRegion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialRegion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialRegion& from) {
    SpatialRegion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialRegion";
  }
  protected:
  explicit SpatialRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kServerIndexFieldNumber = 4,
  };
  // .channeldpb.SpatialInfo min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::channeldpb::SpatialInfo& min() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_min();
  ::channeldpb::SpatialInfo* mutable_min();
  void set_allocated_min(::channeldpb::SpatialInfo* min);
  private:
  const ::channeldpb::SpatialInfo& _internal_min() const;
  ::channeldpb::SpatialInfo* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::channeldpb::SpatialInfo* min);
  ::channeldpb::SpatialInfo* unsafe_arena_release_min();

  // .channeldpb.SpatialInfo max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::channeldpb::SpatialInfo& max() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_max();
  ::channeldpb::SpatialInfo* mutable_max();
  void set_allocated_max(::channeldpb::SpatialInfo* max);
  private:
  const ::channeldpb::SpatialInfo& _internal_max() const;
  ::channeldpb::SpatialInfo* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::channeldpb::SpatialInfo* max);
  ::channeldpb::SpatialInfo* unsafe_arena_release_max();

  // uint32 channelId = 3;
  void clear_channelid();
  uint32_t channelid() const;
  void set_channelid(uint32_t value);
  private:
  uint32_t _internal_channelid() const;
  void _internal_set_channelid(uint32_t value);
  public:

  // uint32 serverIndex = 4;
  void clear_serverindex();
  uint32_t serverindex() const;
  void set_serverindex(uint32_t value);
  private:
  uint32_t _internal_serverindex() const;
  void _internal_set_serverindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::SpatialInfo* min_;
    ::channeldpb::SpatialInfo* max_;
    uint32_t channelid_;
    uint32_t serverindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialRegionsUpdateMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialRegionsUpdateMessage) */ {
 public:
  inline SpatialRegionsUpdateMessage() : SpatialRegionsUpdateMessage(nullptr) {}
  ~SpatialRegionsUpdateMessage() override;
  explicit PROTOBUF_CONSTEXPR SpatialRegionsUpdateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialRegionsUpdateMessage(const SpatialRegionsUpdateMessage& from);
  SpatialRegionsUpdateMessage(SpatialRegionsUpdateMessage&& from) noexcept
    : SpatialRegionsUpdateMessage() {
    *this = ::std::move(from);
  }

  inline SpatialRegionsUpdateMessage& operator=(const SpatialRegionsUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialRegionsUpdateMessage& operator=(SpatialRegionsUpdateMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialRegionsUpdateMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialRegionsUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const SpatialRegionsUpdateMessage*>(
               &_SpatialRegionsUpdateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SpatialRegionsUpdateMessage& a, SpatialRegionsUpdateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialRegionsUpdateMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialRegionsUpdateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialRegionsUpdateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialRegionsUpdateMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialRegionsUpdateMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialRegionsUpdateMessage& from) {
    SpatialRegionsUpdateMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialRegionsUpdateMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialRegionsUpdateMessage";
  }
  protected:
  explicit SpatialRegionsUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionsFieldNumber = 1,
  };
  // repeated .channeldpb.SpatialRegion regions = 1;
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  ::channeldpb::SpatialRegion* mutable_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialRegion >*
      mutable_regions();
  private:
  const ::channeldpb::SpatialRegion& _internal_regions(int index) const;
  ::channeldpb::SpatialRegion* _internal_add_regions();
  public:
  const ::channeldpb::SpatialRegion& regions(int index) const;
  ::channeldpb::SpatialRegion* add_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialRegion >&
      regions() const;

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialRegionsUpdateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialRegion > regions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialInterestQuery_SpotsAOI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInterestQuery.SpotsAOI) */ {
 public:
  inline SpatialInterestQuery_SpotsAOI() : SpatialInterestQuery_SpotsAOI(nullptr) {}
  ~SpatialInterestQuery_SpotsAOI() override;
  explicit PROTOBUF_CONSTEXPR SpatialInterestQuery_SpotsAOI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialInterestQuery_SpotsAOI(const SpatialInterestQuery_SpotsAOI& from);
  SpatialInterestQuery_SpotsAOI(SpatialInterestQuery_SpotsAOI&& from) noexcept
    : SpatialInterestQuery_SpotsAOI() {
    *this = ::std::move(from);
  }

  inline SpatialInterestQuery_SpotsAOI& operator=(const SpatialInterestQuery_SpotsAOI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialInterestQuery_SpotsAOI& operator=(SpatialInterestQuery_SpotsAOI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialInterestQuery_SpotsAOI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialInterestQuery_SpotsAOI* internal_default_instance() {
    return reinterpret_cast<const SpatialInterestQuery_SpotsAOI*>(
               &_SpatialInterestQuery_SpotsAOI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SpatialInterestQuery_SpotsAOI& a, SpatialInterestQuery_SpotsAOI& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialInterestQuery_SpotsAOI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialInterestQuery_SpotsAOI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialInterestQuery_SpotsAOI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialInterestQuery_SpotsAOI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialInterestQuery_SpotsAOI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialInterestQuery_SpotsAOI& from) {
    SpatialInterestQuery_SpotsAOI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialInterestQuery_SpotsAOI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialInterestQuery.SpotsAOI";
  }
  protected:
  explicit SpatialInterestQuery_SpotsAOI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpotsFieldNumber = 2,
    kCenterFieldNumber = 1,
  };
  // repeated .channeldpb.SpatialInfo spots = 2;
  int spots_size() const;
  private:
  int _internal_spots_size() const;
  public:
  void clear_spots();
  ::channeldpb::SpatialInfo* mutable_spots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >*
      mutable_spots();
  private:
  const ::channeldpb::SpatialInfo& _internal_spots(int index) const;
  ::channeldpb::SpatialInfo* _internal_add_spots();
  public:
  const ::channeldpb::SpatialInfo& spots(int index) const;
  ::channeldpb::SpatialInfo* add_spots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >&
      spots() const;

  // .channeldpb.SpatialInfo center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::channeldpb::SpatialInfo& center() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_center();
  ::channeldpb::SpatialInfo* mutable_center();
  void set_allocated_center(::channeldpb::SpatialInfo* center);
  private:
  const ::channeldpb::SpatialInfo& _internal_center() const;
  ::channeldpb::SpatialInfo* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::channeldpb::SpatialInfo* center);
  ::channeldpb::SpatialInfo* unsafe_arena_release_center();

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInterestQuery.SpotsAOI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo > spots_;
    ::channeldpb::SpatialInfo* center_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialInterestQuery_BoxAOI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInterestQuery.BoxAOI) */ {
 public:
  inline SpatialInterestQuery_BoxAOI() : SpatialInterestQuery_BoxAOI(nullptr) {}
  ~SpatialInterestQuery_BoxAOI() override;
  explicit PROTOBUF_CONSTEXPR SpatialInterestQuery_BoxAOI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialInterestQuery_BoxAOI(const SpatialInterestQuery_BoxAOI& from);
  SpatialInterestQuery_BoxAOI(SpatialInterestQuery_BoxAOI&& from) noexcept
    : SpatialInterestQuery_BoxAOI() {
    *this = ::std::move(from);
  }

  inline SpatialInterestQuery_BoxAOI& operator=(const SpatialInterestQuery_BoxAOI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialInterestQuery_BoxAOI& operator=(SpatialInterestQuery_BoxAOI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialInterestQuery_BoxAOI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialInterestQuery_BoxAOI* internal_default_instance() {
    return reinterpret_cast<const SpatialInterestQuery_BoxAOI*>(
               &_SpatialInterestQuery_BoxAOI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SpatialInterestQuery_BoxAOI& a, SpatialInterestQuery_BoxAOI& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialInterestQuery_BoxAOI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialInterestQuery_BoxAOI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialInterestQuery_BoxAOI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialInterestQuery_BoxAOI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialInterestQuery_BoxAOI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialInterestQuery_BoxAOI& from) {
    SpatialInterestQuery_BoxAOI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialInterestQuery_BoxAOI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialInterestQuery.BoxAOI";
  }
  protected:
  explicit SpatialInterestQuery_BoxAOI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // .channeldpb.SpatialInfo min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::channeldpb::SpatialInfo& min() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_min();
  ::channeldpb::SpatialInfo* mutable_min();
  void set_allocated_min(::channeldpb::SpatialInfo* min);
  private:
  const ::channeldpb::SpatialInfo& _internal_min() const;
  ::channeldpb::SpatialInfo* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::channeldpb::SpatialInfo* min);
  ::channeldpb::SpatialInfo* unsafe_arena_release_min();

  // .channeldpb.SpatialInfo max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::channeldpb::SpatialInfo& max() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_max();
  ::channeldpb::SpatialInfo* mutable_max();
  void set_allocated_max(::channeldpb::SpatialInfo* max);
  private:
  const ::channeldpb::SpatialInfo& _internal_max() const;
  ::channeldpb::SpatialInfo* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::channeldpb::SpatialInfo* max);
  ::channeldpb::SpatialInfo* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInterestQuery.BoxAOI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::SpatialInfo* min_;
    ::channeldpb::SpatialInfo* max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialInterestQuery_SphereAOI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInterestQuery.SphereAOI) */ {
 public:
  inline SpatialInterestQuery_SphereAOI() : SpatialInterestQuery_SphereAOI(nullptr) {}
  ~SpatialInterestQuery_SphereAOI() override;
  explicit PROTOBUF_CONSTEXPR SpatialInterestQuery_SphereAOI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialInterestQuery_SphereAOI(const SpatialInterestQuery_SphereAOI& from);
  SpatialInterestQuery_SphereAOI(SpatialInterestQuery_SphereAOI&& from) noexcept
    : SpatialInterestQuery_SphereAOI() {
    *this = ::std::move(from);
  }

  inline SpatialInterestQuery_SphereAOI& operator=(const SpatialInterestQuery_SphereAOI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialInterestQuery_SphereAOI& operator=(SpatialInterestQuery_SphereAOI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialInterestQuery_SphereAOI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialInterestQuery_SphereAOI* internal_default_instance() {
    return reinterpret_cast<const SpatialInterestQuery_SphereAOI*>(
               &_SpatialInterestQuery_SphereAOI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SpatialInterestQuery_SphereAOI& a, SpatialInterestQuery_SphereAOI& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialInterestQuery_SphereAOI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialInterestQuery_SphereAOI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialInterestQuery_SphereAOI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialInterestQuery_SphereAOI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialInterestQuery_SphereAOI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialInterestQuery_SphereAOI& from) {
    SpatialInterestQuery_SphereAOI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialInterestQuery_SphereAOI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialInterestQuery.SphereAOI";
  }
  protected:
  explicit SpatialInterestQuery_SphereAOI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .channeldpb.SpatialInfo center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::channeldpb::SpatialInfo& center() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_center();
  ::channeldpb::SpatialInfo* mutable_center();
  void set_allocated_center(::channeldpb::SpatialInfo* center);
  private:
  const ::channeldpb::SpatialInfo& _internal_center() const;
  ::channeldpb::SpatialInfo* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::channeldpb::SpatialInfo* center);
  ::channeldpb::SpatialInfo* unsafe_arena_release_center();

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInterestQuery.SphereAOI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::SpatialInfo* center_;
    double radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialInterestQuery_ConeAOI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInterestQuery.ConeAOI) */ {
 public:
  inline SpatialInterestQuery_ConeAOI() : SpatialInterestQuery_ConeAOI(nullptr) {}
  ~SpatialInterestQuery_ConeAOI() override;
  explicit PROTOBUF_CONSTEXPR SpatialInterestQuery_ConeAOI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialInterestQuery_ConeAOI(const SpatialInterestQuery_ConeAOI& from);
  SpatialInterestQuery_ConeAOI(SpatialInterestQuery_ConeAOI&& from) noexcept
    : SpatialInterestQuery_ConeAOI() {
    *this = ::std::move(from);
  }

  inline SpatialInterestQuery_ConeAOI& operator=(const SpatialInterestQuery_ConeAOI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialInterestQuery_ConeAOI& operator=(SpatialInterestQuery_ConeAOI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialInterestQuery_ConeAOI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialInterestQuery_ConeAOI* internal_default_instance() {
    return reinterpret_cast<const SpatialInterestQuery_ConeAOI*>(
               &_SpatialInterestQuery_ConeAOI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SpatialInterestQuery_ConeAOI& a, SpatialInterestQuery_ConeAOI& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialInterestQuery_ConeAOI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialInterestQuery_ConeAOI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialInterestQuery_ConeAOI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialInterestQuery_ConeAOI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialInterestQuery_ConeAOI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialInterestQuery_ConeAOI& from) {
    SpatialInterestQuery_ConeAOI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialInterestQuery_ConeAOI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialInterestQuery.ConeAOI";
  }
  protected:
  explicit SpatialInterestQuery_ConeAOI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kAngleFieldNumber = 3,
    kRadiusFieldNumber = 4,
  };
  // .channeldpb.SpatialInfo center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::channeldpb::SpatialInfo& center() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_center();
  ::channeldpb::SpatialInfo* mutable_center();
  void set_allocated_center(::channeldpb::SpatialInfo* center);
  private:
  const ::channeldpb::SpatialInfo& _internal_center() const;
  ::channeldpb::SpatialInfo* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::channeldpb::SpatialInfo* center);
  ::channeldpb::SpatialInfo* unsafe_arena_release_center();

  // .channeldpb.SpatialInfo direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::channeldpb::SpatialInfo& direction() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInfo* release_direction();
  ::channeldpb::SpatialInfo* mutable_direction();
  void set_allocated_direction(::channeldpb::SpatialInfo* direction);
  private:
  const ::channeldpb::SpatialInfo& _internal_direction() const;
  ::channeldpb::SpatialInfo* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::channeldpb::SpatialInfo* direction);
  ::channeldpb::SpatialInfo* unsafe_arena_release_direction();

  // double angle = 3;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // double radius = 4;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInterestQuery.ConeAOI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::SpatialInfo* center_;
    ::channeldpb::SpatialInfo* direction_;
    double angle_;
    double radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SpatialInterestQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SpatialInterestQuery) */ {
 public:
  inline SpatialInterestQuery() : SpatialInterestQuery(nullptr) {}
  ~SpatialInterestQuery() override;
  explicit PROTOBUF_CONSTEXPR SpatialInterestQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialInterestQuery(const SpatialInterestQuery& from);
  SpatialInterestQuery(SpatialInterestQuery&& from) noexcept
    : SpatialInterestQuery() {
    *this = ::std::move(from);
  }

  inline SpatialInterestQuery& operator=(const SpatialInterestQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialInterestQuery& operator=(SpatialInterestQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpatialInterestQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialInterestQuery* internal_default_instance() {
    return reinterpret_cast<const SpatialInterestQuery*>(
               &_SpatialInterestQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SpatialInterestQuery& a, SpatialInterestQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialInterestQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialInterestQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpatialInterestQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpatialInterestQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpatialInterestQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpatialInterestQuery& from) {
    SpatialInterestQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialInterestQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SpatialInterestQuery";
  }
  protected:
  explicit SpatialInterestQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpatialInterestQuery_SpotsAOI SpotsAOI;
  typedef SpatialInterestQuery_BoxAOI BoxAOI;
  typedef SpatialInterestQuery_SphereAOI SphereAOI;
  typedef SpatialInterestQuery_ConeAOI ConeAOI;

  // accessors -------------------------------------------------------

  enum : int {
    kSpotsAOIFieldNumber = 1,
    kBoxAOIFieldNumber = 2,
    kSphereAOIFieldNumber = 3,
    kConeAOIFieldNumber = 4,
  };
  // optional .channeldpb.SpatialInterestQuery.SpotsAOI spotsAOI = 1;
  bool has_spotsaoi() const;
  private:
  bool _internal_has_spotsaoi() const;
  public:
  void clear_spotsaoi();
  const ::channeldpb::SpatialInterestQuery_SpotsAOI& spotsaoi() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInterestQuery_SpotsAOI* release_spotsaoi();
  ::channeldpb::SpatialInterestQuery_SpotsAOI* mutable_spotsaoi();
  void set_allocated_spotsaoi(::channeldpb::SpatialInterestQuery_SpotsAOI* spotsaoi);
  private:
  const ::channeldpb::SpatialInterestQuery_SpotsAOI& _internal_spotsaoi() const;
  ::channeldpb::SpatialInterestQuery_SpotsAOI* _internal_mutable_spotsaoi();
  public:
  void unsafe_arena_set_allocated_spotsaoi(
      ::channeldpb::SpatialInterestQuery_SpotsAOI* spotsaoi);
  ::channeldpb::SpatialInterestQuery_SpotsAOI* unsafe_arena_release_spotsaoi();

  // optional .channeldpb.SpatialInterestQuery.BoxAOI boxAOI = 2;
  bool has_boxaoi() const;
  private:
  bool _internal_has_boxaoi() const;
  public:
  void clear_boxaoi();
  const ::channeldpb::SpatialInterestQuery_BoxAOI& boxaoi() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInterestQuery_BoxAOI* release_boxaoi();
  ::channeldpb::SpatialInterestQuery_BoxAOI* mutable_boxaoi();
  void set_allocated_boxaoi(::channeldpb::SpatialInterestQuery_BoxAOI* boxaoi);
  private:
  const ::channeldpb::SpatialInterestQuery_BoxAOI& _internal_boxaoi() const;
  ::channeldpb::SpatialInterestQuery_BoxAOI* _internal_mutable_boxaoi();
  public:
  void unsafe_arena_set_allocated_boxaoi(
      ::channeldpb::SpatialInterestQuery_BoxAOI* boxaoi);
  ::channeldpb::SpatialInterestQuery_BoxAOI* unsafe_arena_release_boxaoi();

  // optional .channeldpb.SpatialInterestQuery.SphereAOI sphereAOI = 3;
  bool has_sphereaoi() const;
  private:
  bool _internal_has_sphereaoi() const;
  public:
  void clear_sphereaoi();
  const ::channeldpb::SpatialInterestQuery_SphereAOI& sphereaoi() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInterestQuery_SphereAOI* release_sphereaoi();
  ::channeldpb::SpatialInterestQuery_SphereAOI* mutable_sphereaoi();
  void set_allocated_sphereaoi(::channeldpb::SpatialInterestQuery_SphereAOI* sphereaoi);
  private:
  const ::channeldpb::SpatialInterestQuery_SphereAOI& _internal_sphereaoi() const;
  ::channeldpb::SpatialInterestQuery_SphereAOI* _internal_mutable_sphereaoi();
  public:
  void unsafe_arena_set_allocated_sphereaoi(
      ::channeldpb::SpatialInterestQuery_SphereAOI* sphereaoi);
  ::channeldpb::SpatialInterestQuery_SphereAOI* unsafe_arena_release_sphereaoi();

  // optional .channeldpb.SpatialInterestQuery.ConeAOI coneAOI = 4;
  bool has_coneaoi() const;
  private:
  bool _internal_has_coneaoi() const;
  public:
  void clear_coneaoi();
  const ::channeldpb::SpatialInterestQuery_ConeAOI& coneaoi() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInterestQuery_ConeAOI* release_coneaoi();
  ::channeldpb::SpatialInterestQuery_ConeAOI* mutable_coneaoi();
  void set_allocated_coneaoi(::channeldpb::SpatialInterestQuery_ConeAOI* coneaoi);
  private:
  const ::channeldpb::SpatialInterestQuery_ConeAOI& _internal_coneaoi() const;
  ::channeldpb::SpatialInterestQuery_ConeAOI* _internal_mutable_coneaoi();
  public:
  void unsafe_arena_set_allocated_coneaoi(
      ::channeldpb::SpatialInterestQuery_ConeAOI* coneaoi);
  ::channeldpb::SpatialInterestQuery_ConeAOI* unsafe_arena_release_coneaoi();

  // @@protoc_insertion_point(class_scope:channeldpb.SpatialInterestQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::channeldpb::SpatialInterestQuery_SpotsAOI* spotsaoi_;
    ::channeldpb::SpatialInterestQuery_BoxAOI* boxaoi_;
    ::channeldpb::SpatialInterestQuery_SphereAOI* sphereaoi_;
    ::channeldpb::SpatialInterestQuery_ConeAOI* coneaoi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API UpdateSpatialInterestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.UpdateSpatialInterestMessage) */ {
 public:
  inline UpdateSpatialInterestMessage() : UpdateSpatialInterestMessage(nullptr) {}
  ~UpdateSpatialInterestMessage() override;
  explicit PROTOBUF_CONSTEXPR UpdateSpatialInterestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSpatialInterestMessage(const UpdateSpatialInterestMessage& from);
  UpdateSpatialInterestMessage(UpdateSpatialInterestMessage&& from) noexcept
    : UpdateSpatialInterestMessage() {
    *this = ::std::move(from);
  }

  inline UpdateSpatialInterestMessage& operator=(const UpdateSpatialInterestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSpatialInterestMessage& operator=(UpdateSpatialInterestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSpatialInterestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSpatialInterestMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateSpatialInterestMessage*>(
               &_UpdateSpatialInterestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateSpatialInterestMessage& a, UpdateSpatialInterestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSpatialInterestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSpatialInterestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSpatialInterestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSpatialInterestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSpatialInterestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSpatialInterestMessage& from) {
    UpdateSpatialInterestMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSpatialInterestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.UpdateSpatialInterestMessage";
  }
  protected:
  explicit UpdateSpatialInterestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 2,
    kConnIdFieldNumber = 1,
  };
  // .channeldpb.SpatialInterestQuery query = 2;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::channeldpb::SpatialInterestQuery& query() const;
  PROTOBUF_NODISCARD ::channeldpb::SpatialInterestQuery* release_query();
  ::channeldpb::SpatialInterestQuery* mutable_query();
  void set_allocated_query(::channeldpb::SpatialInterestQuery* query);
  private:
  const ::channeldpb::SpatialInterestQuery& _internal_query() const;
  ::channeldpb::SpatialInterestQuery* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::channeldpb::SpatialInterestQuery* query);
  ::channeldpb::SpatialInterestQuery* unsafe_arena_release_query();

  // uint32 connId = 1;
  void clear_connid();
  uint32_t connid() const;
  void set_connid(uint32_t value);
  private:
  uint32_t _internal_connid() const;
  void _internal_set_connid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.UpdateSpatialInterestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::channeldpb::SpatialInterestQuery* query_;
    uint32_t connid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_channeld_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API DebugGetSpatialRegionsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:channeldpb.DebugGetSpatialRegionsMessage) */ {
 public:
  inline DebugGetSpatialRegionsMessage() : DebugGetSpatialRegionsMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DebugGetSpatialRegionsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugGetSpatialRegionsMessage(const DebugGetSpatialRegionsMessage& from);
  DebugGetSpatialRegionsMessage(DebugGetSpatialRegionsMessage&& from) noexcept
    : DebugGetSpatialRegionsMessage() {
    *this = ::std::move(from);
  }

  inline DebugGetSpatialRegionsMessage& operator=(const DebugGetSpatialRegionsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugGetSpatialRegionsMessage& operator=(DebugGetSpatialRegionsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugGetSpatialRegionsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugGetSpatialRegionsMessage* internal_default_instance() {
    return reinterpret_cast<const DebugGetSpatialRegionsMessage*>(
               &_DebugGetSpatialRegionsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DebugGetSpatialRegionsMessage& a, DebugGetSpatialRegionsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugGetSpatialRegionsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugGetSpatialRegionsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugGetSpatialRegionsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugGetSpatialRegionsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DebugGetSpatialRegionsMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DebugGetSpatialRegionsMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.DebugGetSpatialRegionsMessage";
  }
  protected:
  explicit DebugGetSpatialRegionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:channeldpb.DebugGetSpatialRegionsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_channeld_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// repeated .channeldpb.MessagePack messages = 1;
inline int Packet::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int Packet::messages_size() const {
  return _internal_messages_size();
}
inline void Packet::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::channeldpb::MessagePack* Packet::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.Packet.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::MessagePack >*
Packet::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.Packet.messages)
  return &_impl_.messages_;
}
inline const ::channeldpb::MessagePack& Packet::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::channeldpb::MessagePack& Packet::messages(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.Packet.messages)
  return _internal_messages(index);
}
inline ::channeldpb::MessagePack* Packet::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::channeldpb::MessagePack* Packet::add_messages() {
  ::channeldpb::MessagePack* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:channeldpb.Packet.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::MessagePack >&
Packet::messages() const {
  // @@protoc_insertion_point(field_list:channeldpb.Packet.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// MessagePack

// uint32 channelId = 1;
inline void MessagePack::clear_channelid() {
  _impl_.channelid_ = 0u;
}
inline uint32_t MessagePack::_internal_channelid() const {
  return _impl_.channelid_;
}
inline uint32_t MessagePack::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.channelId)
  return _internal_channelid();
}
inline void MessagePack::_internal_set_channelid(uint32_t value) {
  
  _impl_.channelid_ = value;
}
inline void MessagePack::set_channelid(uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.channelId)
}

// uint32 broadcast = 2;
inline void MessagePack::clear_broadcast() {
  _impl_.broadcast_ = 0u;
}
inline uint32_t MessagePack::_internal_broadcast() const {
  return _impl_.broadcast_;
}
inline uint32_t MessagePack::broadcast() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.broadcast)
  return _internal_broadcast();
}
inline void MessagePack::_internal_set_broadcast(uint32_t value) {
  
  _impl_.broadcast_ = value;
}
inline void MessagePack::set_broadcast(uint32_t value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.broadcast)
}

// uint32 stubId = 3;
inline void MessagePack::clear_stubid() {
  _impl_.stubid_ = 0u;
}
inline uint32_t MessagePack::_internal_stubid() const {
  return _impl_.stubid_;
}
inline uint32_t MessagePack::stubid() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.stubId)
  return _internal_stubid();
}
inline void MessagePack::_internal_set_stubid(uint32_t value) {
  
  _impl_.stubid_ = value;
}
inline void MessagePack::set_stubid(uint32_t value) {
  _internal_set_stubid(value);
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.stubId)
}

// uint32 msgType = 4;
inline void MessagePack::clear_msgtype() {
  _impl_.msgtype_ = 0u;
}
inline uint32_t MessagePack::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline uint32_t MessagePack::msgtype() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.msgType)
  return _internal_msgtype();
}
inline void MessagePack::_internal_set_msgtype(uint32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void MessagePack::set_msgtype(uint32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.msgType)
}

// bytes msgBody = 5;
inline void MessagePack::clear_msgbody() {
  _impl_.msgbody_.ClearToEmpty();
}
inline const std::string& MessagePack::msgbody() const {
  // @@protoc_insertion_point(field_get:channeldpb.MessagePack.msgBody)
  return _internal_msgbody();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessagePack::set_msgbody(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgbody_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.MessagePack.msgBody)
}
inline std::string* MessagePack::mutable_msgbody() {
  std::string* _s = _internal_mutable_msgbody();
  // @@protoc_insertion_point(field_mutable:channeldpb.MessagePack.msgBody)
  return _s;
}
inline const std::string& MessagePack::_internal_msgbody() const {
  return _impl_.msgbody_.Get();
}
inline void MessagePack::_internal_set_msgbody(const std::string& value) {
  
  _impl_.msgbody_.Set(value, GetArenaForAllocation());
}
inline std::string* MessagePack::_internal_mutable_msgbody() {
  
  return _impl_.msgbody_.Mutable(GetArenaForAllocation());
}
inline std::string* MessagePack::release_msgbody() {
  // @@protoc_insertion_point(field_release:channeldpb.MessagePack.msgBody)
  return _impl_.msgbody_.Release();
}
inline void MessagePack::set_allocated_msgbody(std::string* msgbody) {
  if (msgbody != nullptr) {
    
  } else {
    
  }
  _impl_.msgbody_.SetAllocated(msgbody, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgbody_.IsDefault()) {
    _impl_.msgbody_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.MessagePack.msgBody)
}

// -------------------------------------------------------------------

// ServerForwardMessage

// uint32 clientConnId = 1;
inline void ServerForwardMessage::clear_clientconnid() {
  _impl_.clientconnid_ = 0u;
}
inline uint32_t ServerForwardMessage::_internal_clientconnid() const {
  return _impl_.clientconnid_;
}
inline uint32_t ServerForwardMessage::clientconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ServerForwardMessage.clientConnId)
  return _internal_clientconnid();
}
inline void ServerForwardMessage::_internal_set_clientconnid(uint32_t value) {
  
  _impl_.clientconnid_ = value;
}
inline void ServerForwardMessage::set_clientconnid(uint32_t value) {
  _internal_set_clientconnid(value);
  // @@protoc_insertion_point(field_set:channeldpb.ServerForwardMessage.clientConnId)
}

// bytes payload = 2;
inline void ServerForwardMessage::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& ServerForwardMessage::payload() const {
  // @@protoc_insertion_point(field_get:channeldpb.ServerForwardMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerForwardMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.ServerForwardMessage.payload)
}
inline std::string* ServerForwardMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:channeldpb.ServerForwardMessage.payload)
  return _s;
}
inline const std::string& ServerForwardMessage::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void ServerForwardMessage::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerForwardMessage::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerForwardMessage::release_payload() {
  // @@protoc_insertion_point(field_release:channeldpb.ServerForwardMessage.payload)
  return _impl_.payload_.Release();
}
inline void ServerForwardMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ServerForwardMessage.payload)
}

// -------------------------------------------------------------------

// AuthMessage

// string playerIdentifierToken = 1;
inline void AuthMessage::clear_playeridentifiertoken() {
  _impl_.playeridentifiertoken_.ClearToEmpty();
}
inline const std::string& AuthMessage::playeridentifiertoken() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthMessage.playerIdentifierToken)
  return _internal_playeridentifiertoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthMessage::set_playeridentifiertoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playeridentifiertoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.AuthMessage.playerIdentifierToken)
}
inline std::string* AuthMessage::mutable_playeridentifiertoken() {
  std::string* _s = _internal_mutable_playeridentifiertoken();
  // @@protoc_insertion_point(field_mutable:channeldpb.AuthMessage.playerIdentifierToken)
  return _s;
}
inline const std::string& AuthMessage::_internal_playeridentifiertoken() const {
  return _impl_.playeridentifiertoken_.Get();
}
inline void AuthMessage::_internal_set_playeridentifiertoken(const std::string& value) {
  
  _impl_.playeridentifiertoken_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthMessage::_internal_mutable_playeridentifiertoken() {
  
  return _impl_.playeridentifiertoken_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthMessage::release_playeridentifiertoken() {
  // @@protoc_insertion_point(field_release:channeldpb.AuthMessage.playerIdentifierToken)
  return _impl_.playeridentifiertoken_.Release();
}
inline void AuthMessage::set_allocated_playeridentifiertoken(std::string* playeridentifiertoken) {
  if (playeridentifiertoken != nullptr) {
    
  } else {
    
  }
  _impl_.playeridentifiertoken_.SetAllocated(playeridentifiertoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playeridentifiertoken_.IsDefault()) {
    _impl_.playeridentifiertoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.AuthMessage.playerIdentifierToken)
}

// string loginToken = 2;
inline void AuthMessage::clear_logintoken() {
  _impl_.logintoken_.ClearToEmpty();
}
inline const std::string& AuthMessage::logintoken() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthMessage.loginToken)
  return _internal_logintoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthMessage::set_logintoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logintoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.AuthMessage.loginToken)
}
inline std::string* AuthMessage::mutable_logintoken() {
  std::string* _s = _internal_mutable_logintoken();
  // @@protoc_insertion_point(field_mutable:channeldpb.AuthMessage.loginToken)
  return _s;
}
inline const std::string& AuthMessage::_internal_logintoken() const {
  return _impl_.logintoken_.Get();
}
inline void AuthMessage::_internal_set_logintoken(const std::string& value) {
  
  _impl_.logintoken_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthMessage::_internal_mutable_logintoken() {
  
  return _impl_.logintoken_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthMessage::release_logintoken() {
  // @@protoc_insertion_point(field_release:channeldpb.AuthMessage.loginToken)
  return _impl_.logintoken_.Release();
}
inline void AuthMessage::set_allocated_logintoken(std::string* logintoken) {
  if (logintoken != nullptr) {
    
  } else {
    
  }
  _impl_.logintoken_.SetAllocated(logintoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logintoken_.IsDefault()) {
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.AuthMessage.loginToken)
}

// -------------------------------------------------------------------

// AuthResultMessage

// .channeldpb.AuthResultMessage.AuthResult result = 1;
inline void AuthResultMessage::clear_result() {
  _impl_.result_ = 0;
}
inline ::channeldpb::AuthResultMessage_AuthResult AuthResultMessage::_internal_result() const {
  return static_cast< ::channeldpb::AuthResultMessage_AuthResult >(_impl_.result_);
}
inline ::channeldpb::AuthResultMessage_AuthResult AuthResultMessage::result() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthResultMessage.result)
  return _internal_result();
}
inline void AuthResultMessage::_internal_set_result(::channeldpb::AuthResultMessage_AuthResult value) {
  
  _impl_.result_ = value;
}
inline void AuthResultMessage::set_result(::channeldpb::AuthResultMessage_AuthResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:channeldpb.AuthResultMessage.result)
}

// uint32 connId = 2;
inline void AuthResultMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t AuthResultMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t AuthResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthResultMessage.connId)
  return _internal_connid();
}
inline void AuthResultMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void AuthResultMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.AuthResultMessage.connId)
}

// .channeldpb.CompressionType compressionType = 3;
inline void AuthResultMessage::clear_compressiontype() {
  _impl_.compressiontype_ = 0;
}
inline ::channeldpb::CompressionType AuthResultMessage::_internal_compressiontype() const {
  return static_cast< ::channeldpb::CompressionType >(_impl_.compressiontype_);
}
inline ::channeldpb::CompressionType AuthResultMessage::compressiontype() const {
  // @@protoc_insertion_point(field_get:channeldpb.AuthResultMessage.compressionType)
  return _internal_compressiontype();
}
inline void AuthResultMessage::_internal_set_compressiontype(::channeldpb::CompressionType value) {
  
  _impl_.compressiontype_ = value;
}
inline void AuthResultMessage::set_compressiontype(::channeldpb::CompressionType value) {
  _internal_set_compressiontype(value);
  // @@protoc_insertion_point(field_set:channeldpb.AuthResultMessage.compressionType)
}

// -------------------------------------------------------------------

// ChannelSubscriptionOptions

// optional .channeldpb.ChannelDataAccess dataAccess = 1;
inline bool ChannelSubscriptionOptions::_internal_has_dataaccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelSubscriptionOptions::has_dataaccess() const {
  return _internal_has_dataaccess();
}
inline void ChannelSubscriptionOptions::clear_dataaccess() {
  _impl_.dataaccess_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::channeldpb::ChannelDataAccess ChannelSubscriptionOptions::_internal_dataaccess() const {
  return static_cast< ::channeldpb::ChannelDataAccess >(_impl_.dataaccess_);
}
inline ::channeldpb::ChannelDataAccess ChannelSubscriptionOptions::dataaccess() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.dataAccess)
  return _internal_dataaccess();
}
inline void ChannelSubscriptionOptions::_internal_set_dataaccess(::channeldpb::ChannelDataAccess value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dataaccess_ = value;
}
inline void ChannelSubscriptionOptions::set_dataaccess(::channeldpb::ChannelDataAccess value) {
  _internal_set_dataaccess(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.dataAccess)
}

// repeated string dataFieldMasks = 2;
inline int ChannelSubscriptionOptions::_internal_datafieldmasks_size() const {
  return _impl_.datafieldmasks_.size();
}
inline int ChannelSubscriptionOptions::datafieldmasks_size() const {
  return _internal_datafieldmasks_size();
}
inline void ChannelSubscriptionOptions::clear_datafieldmasks() {
  _impl_.datafieldmasks_.Clear();
}
inline std::string* ChannelSubscriptionOptions::add_datafieldmasks() {
  std::string* _s = _internal_add_datafieldmasks();
  // @@protoc_insertion_point(field_add_mutable:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return _s;
}
inline const std::string& ChannelSubscriptionOptions::_internal_datafieldmasks(int index) const {
  return _impl_.datafieldmasks_.Get(index);
}
inline const std::string& ChannelSubscriptionOptions::datafieldmasks(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return _internal_datafieldmasks(index);
}
inline std::string* ChannelSubscriptionOptions::mutable_datafieldmasks(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return _impl_.datafieldmasks_.Mutable(index);
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const std::string& value) {
  _impl_.datafieldmasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, std::string&& value) {
  _impl_.datafieldmasks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datafieldmasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const char* value, size_t size) {
  _impl_.datafieldmasks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline std::string* ChannelSubscriptionOptions::_internal_add_datafieldmasks() {
  return _impl_.datafieldmasks_.Add();
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const std::string& value) {
  _impl_.datafieldmasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(std::string&& value) {
  _impl_.datafieldmasks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datafieldmasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const char* value, size_t size) {
  _impl_.datafieldmasks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChannelSubscriptionOptions::datafieldmasks() const {
  // @@protoc_insertion_point(field_list:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return _impl_.datafieldmasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChannelSubscriptionOptions::mutable_datafieldmasks() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.ChannelSubscriptionOptions.dataFieldMasks)
  return &_impl_.datafieldmasks_;
}

// optional uint32 fanOutIntervalMs = 3;
inline bool ChannelSubscriptionOptions::_internal_has_fanoutintervalms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelSubscriptionOptions::has_fanoutintervalms() const {
  return _internal_has_fanoutintervalms();
}
inline void ChannelSubscriptionOptions::clear_fanoutintervalms() {
  _impl_.fanoutintervalms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChannelSubscriptionOptions::_internal_fanoutintervalms() const {
  return _impl_.fanoutintervalms_;
}
inline uint32_t ChannelSubscriptionOptions::fanoutintervalms() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.fanOutIntervalMs)
  return _internal_fanoutintervalms();
}
inline void ChannelSubscriptionOptions::_internal_set_fanoutintervalms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fanoutintervalms_ = value;
}
inline void ChannelSubscriptionOptions::set_fanoutintervalms(uint32_t value) {
  _internal_set_fanoutintervalms(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.fanOutIntervalMs)
}

// optional int32 fanOutDelayMs = 4;
inline bool ChannelSubscriptionOptions::_internal_has_fanoutdelayms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelSubscriptionOptions::has_fanoutdelayms() const {
  return _internal_has_fanoutdelayms();
}
inline void ChannelSubscriptionOptions::clear_fanoutdelayms() {
  _impl_.fanoutdelayms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ChannelSubscriptionOptions::_internal_fanoutdelayms() const {
  return _impl_.fanoutdelayms_;
}
inline int32_t ChannelSubscriptionOptions::fanoutdelayms() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.fanOutDelayMs)
  return _internal_fanoutdelayms();
}
inline void ChannelSubscriptionOptions::_internal_set_fanoutdelayms(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fanoutdelayms_ = value;
}
inline void ChannelSubscriptionOptions::set_fanoutdelayms(int32_t value) {
  _internal_set_fanoutdelayms(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.fanOutDelayMs)
}

// optional bool skipSelfUpdateFanOut = 5;
inline bool ChannelSubscriptionOptions::_internal_has_skipselfupdatefanout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChannelSubscriptionOptions::has_skipselfupdatefanout() const {
  return _internal_has_skipselfupdatefanout();
}
inline void ChannelSubscriptionOptions::clear_skipselfupdatefanout() {
  _impl_.skipselfupdatefanout_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ChannelSubscriptionOptions::_internal_skipselfupdatefanout() const {
  return _impl_.skipselfupdatefanout_;
}
inline bool ChannelSubscriptionOptions::skipselfupdatefanout() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelSubscriptionOptions.skipSelfUpdateFanOut)
  return _internal_skipselfupdatefanout();
}
inline void ChannelSubscriptionOptions::_internal_set_skipselfupdatefanout(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skipselfupdatefanout_ = value;
}
inline void ChannelSubscriptionOptions::set_skipselfupdatefanout(bool value) {
  _internal_set_skipselfupdatefanout(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelSubscriptionOptions.skipSelfUpdateFanOut)
}

// -------------------------------------------------------------------

// ChannelDataMergeOptions

// bool shouldReplaceList = 1;
inline void ChannelDataMergeOptions::clear_shouldreplacelist() {
  _impl_.shouldreplacelist_ = false;
}
inline bool ChannelDataMergeOptions::_internal_shouldreplacelist() const {
  return _impl_.shouldreplacelist_;
}
inline bool ChannelDataMergeOptions::shouldreplacelist() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.shouldReplaceList)
  return _internal_shouldreplacelist();
}
inline void ChannelDataMergeOptions::_internal_set_shouldreplacelist(bool value) {
  
  _impl_.shouldreplacelist_ = value;
}
inline void ChannelDataMergeOptions::set_shouldreplacelist(bool value) {
  _internal_set_shouldreplacelist(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.shouldReplaceList)
}

// uint32 listSizeLimit = 2;
inline void ChannelDataMergeOptions::clear_listsizelimit() {
  _impl_.listsizelimit_ = 0u;
}
inline uint32_t ChannelDataMergeOptions::_internal_listsizelimit() const {
  return _impl_.listsizelimit_;
}
inline uint32_t ChannelDataMergeOptions::listsizelimit() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.listSizeLimit)
  return _internal_listsizelimit();
}
inline void ChannelDataMergeOptions::_internal_set_listsizelimit(uint32_t value) {
  
  _impl_.listsizelimit_ = value;
}
inline void ChannelDataMergeOptions::set_listsizelimit(uint32_t value) {
  _internal_set_listsizelimit(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.listSizeLimit)
}

// bool truncateTop = 3;
inline void ChannelDataMergeOptions::clear_truncatetop() {
  _impl_.truncatetop_ = false;
}
inline bool ChannelDataMergeOptions::_internal_truncatetop() const {
  return _impl_.truncatetop_;
}
inline bool ChannelDataMergeOptions::truncatetop() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.truncateTop)
  return _internal_truncatetop();
}
inline void ChannelDataMergeOptions::_internal_set_truncatetop(bool value) {
  
  _impl_.truncatetop_ = value;
}
inline void ChannelDataMergeOptions::set_truncatetop(bool value) {
  _internal_set_truncatetop(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.truncateTop)
}

// bool shouldCheckRemovableMapField = 4;
inline void ChannelDataMergeOptions::clear_shouldcheckremovablemapfield() {
  _impl_.shouldcheckremovablemapfield_ = false;
}
inline bool ChannelDataMergeOptions::_internal_shouldcheckremovablemapfield() const {
  return _impl_.shouldcheckremovablemapfield_;
}
inline bool ChannelDataMergeOptions::shouldcheckremovablemapfield() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataMergeOptions.shouldCheckRemovableMapField)
  return _internal_shouldcheckremovablemapfield();
}
inline void ChannelDataMergeOptions::_internal_set_shouldcheckremovablemapfield(bool value) {
  
  _impl_.shouldcheckremovablemapfield_ = value;
}
inline void ChannelDataMergeOptions::set_shouldcheckremovablemapfield(bool value) {
  _internal_set_shouldcheckremovablemapfield(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataMergeOptions.shouldCheckRemovableMapField)
}

// -------------------------------------------------------------------

// CreateChannelMessage

// .channeldpb.ChannelType channelType = 1;
inline void CreateChannelMessage::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::channeldpb::ChannelType CreateChannelMessage::_internal_channeltype() const {
  return static_cast< ::channeldpb::ChannelType >(_impl_.channeltype_);
}
inline ::channeldpb::ChannelType CreateChannelMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.channelType)
  return _internal_channeltype();
}
inline void CreateChannelMessage::_internal_set_channeltype(::channeldpb::ChannelType value) {
  
  _impl_.channeltype_ = value;
}
inline void CreateChannelMessage::set_channeltype(::channeldpb::ChannelType value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelMessage.channelType)
}

// string metadata = 2;
inline void CreateChannelMessage::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& CreateChannelMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelMessage::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelMessage.metadata)
}
inline std::string* CreateChannelMessage::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.metadata)
  return _s;
}
inline const std::string& CreateChannelMessage::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void CreateChannelMessage::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateChannelMessage::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateChannelMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.metadata)
  return _impl_.metadata_.Release();
}
inline void CreateChannelMessage::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.metadata)
}

// .channeldpb.ChannelSubscriptionOptions subOptions = 3;
inline bool CreateChannelMessage::_internal_has_suboptions() const {
  return this != internal_default_instance() && _impl_.suboptions_ != nullptr;
}
inline bool CreateChannelMessage::has_suboptions() const {
  return _internal_has_suboptions();
}
inline void CreateChannelMessage::clear_suboptions() {
  if (GetArenaForAllocation() == nullptr && _impl_.suboptions_ != nullptr) {
    delete _impl_.suboptions_;
  }
  _impl_.suboptions_ = nullptr;
}
inline const ::channeldpb::ChannelSubscriptionOptions& CreateChannelMessage::_internal_suboptions() const {
  const ::channeldpb::ChannelSubscriptionOptions* p = _impl_.suboptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::ChannelSubscriptionOptions&>(
      ::channeldpb::_ChannelSubscriptionOptions_default_instance_);
}
inline const ::channeldpb::ChannelSubscriptionOptions& CreateChannelMessage::suboptions() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.subOptions)
  return _internal_suboptions();
}
inline void CreateChannelMessage::unsafe_arena_set_allocated_suboptions(
    ::channeldpb::ChannelSubscriptionOptions* suboptions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.suboptions_);
  }
  _impl_.suboptions_ = suboptions;
  if (suboptions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.CreateChannelMessage.subOptions)
}
inline ::channeldpb::ChannelSubscriptionOptions* CreateChannelMessage::release_suboptions() {
  
  ::channeldpb::ChannelSubscriptionOptions* temp = _impl_.suboptions_;
  _impl_.suboptions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* CreateChannelMessage::unsafe_arena_release_suboptions() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.subOptions)
  
  ::channeldpb::ChannelSubscriptionOptions* temp = _impl_.suboptions_;
  _impl_.suboptions_ = nullptr;
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* CreateChannelMessage::_internal_mutable_suboptions() {
  
  if (_impl_.suboptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::ChannelSubscriptionOptions>(GetArenaForAllocation());
    _impl_.suboptions_ = p;
  }
  return _impl_.suboptions_;
}
inline ::channeldpb::ChannelSubscriptionOptions* CreateChannelMessage::mutable_suboptions() {
  ::channeldpb::ChannelSubscriptionOptions* _msg = _internal_mutable_suboptions();
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.subOptions)
  return _msg;
}
inline void CreateChannelMessage::set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.suboptions_;
  }
  if (suboptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(suboptions);
    if (message_arena != submessage_arena) {
      suboptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.subOptions)
}

// .google.protobuf.Any data = 4;
inline bool CreateChannelMessage::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool CreateChannelMessage::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CreateChannelMessage::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CreateChannelMessage::data() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.data)
  return _internal_data();
}
inline void CreateChannelMessage::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.CreateChannelMessage.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CreateChannelMessage::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CreateChannelMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CreateChannelMessage::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CreateChannelMessage::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.data)
  return _msg;
}
inline void CreateChannelMessage::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.data)
}

// .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
inline bool CreateChannelMessage::_internal_has_mergeoptions() const {
  return this != internal_default_instance() && _impl_.mergeoptions_ != nullptr;
}
inline bool CreateChannelMessage::has_mergeoptions() const {
  return _internal_has_mergeoptions();
}
inline void CreateChannelMessage::clear_mergeoptions() {
  if (GetArenaForAllocation() == nullptr && _impl_.mergeoptions_ != nullptr) {
    delete _impl_.mergeoptions_;
  }
  _impl_.mergeoptions_ = nullptr;
}
inline const ::channeldpb::ChannelDataMergeOptions& CreateChannelMessage::_internal_mergeoptions() const {
  const ::channeldpb::ChannelDataMergeOptions* p = _impl_.mergeoptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::ChannelDataMergeOptions&>(
      ::channeldpb::_ChannelDataMergeOptions_default_instance_);
}
inline const ::channeldpb::ChannelDataMergeOptions& CreateChannelMessage::mergeoptions() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelMessage.mergeOptions)
  return _internal_mergeoptions();
}
inline void CreateChannelMessage::unsafe_arena_set_allocated_mergeoptions(
    ::channeldpb::ChannelDataMergeOptions* mergeoptions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mergeoptions_);
  }
  _impl_.mergeoptions_ = mergeoptions;
  if (mergeoptions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.CreateChannelMessage.mergeOptions)
}
inline ::channeldpb::ChannelDataMergeOptions* CreateChannelMessage::release_mergeoptions() {
  
  ::channeldpb::ChannelDataMergeOptions* temp = _impl_.mergeoptions_;
  _impl_.mergeoptions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::ChannelDataMergeOptions* CreateChannelMessage::unsafe_arena_release_mergeoptions() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelMessage.mergeOptions)
  
  ::channeldpb::ChannelDataMergeOptions* temp = _impl_.mergeoptions_;
  _impl_.mergeoptions_ = nullptr;
  return temp;
}
inline ::channeldpb::ChannelDataMergeOptions* CreateChannelMessage::_internal_mutable_mergeoptions() {
  
  if (_impl_.mergeoptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::ChannelDataMergeOptions>(GetArenaForAllocation());
    _impl_.mergeoptions_ = p;
  }
  return _impl_.mergeoptions_;
}
inline ::channeldpb::ChannelDataMergeOptions* CreateChannelMessage::mutable_mergeoptions() {
  ::channeldpb::ChannelDataMergeOptions* _msg = _internal_mutable_mergeoptions();
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelMessage.mergeOptions)
  return _msg;
}
inline void CreateChannelMessage::set_allocated_mergeoptions(::channeldpb::ChannelDataMergeOptions* mergeoptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mergeoptions_;
  }
  if (mergeoptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mergeoptions);
    if (message_arena != submessage_arena) {
      mergeoptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mergeoptions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mergeoptions_ = mergeoptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelMessage.mergeOptions)
}

// -------------------------------------------------------------------

// CreateChannelResultMessage

// .channeldpb.ChannelType channelType = 1;
inline void CreateChannelResultMessage::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::channeldpb::ChannelType CreateChannelResultMessage::_internal_channeltype() const {
  return static_cast< ::channeldpb::ChannelType >(_impl_.channeltype_);
}
inline ::channeldpb::ChannelType CreateChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.channelType)
  return _internal_channeltype();
}
inline void CreateChannelResultMessage::_internal_set_channeltype(::channeldpb::ChannelType value) {
  
  _impl_.channeltype_ = value;
}
inline void CreateChannelResultMessage::set_channeltype(::channeldpb::ChannelType value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.channelType)
}

// string metadata = 2;
inline void CreateChannelResultMessage::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& CreateChannelResultMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateChannelResultMessage::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.metadata)
}
inline std::string* CreateChannelResultMessage::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateChannelResultMessage.metadata)
  return _s;
}
inline const std::string& CreateChannelResultMessage::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void CreateChannelResultMessage::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateChannelResultMessage::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateChannelResultMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateChannelResultMessage.metadata)
  return _impl_.metadata_.Release();
}
inline void CreateChannelResultMessage::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateChannelResultMessage.metadata)
}

// uint32 ownerConnId = 3;
inline void CreateChannelResultMessage::clear_ownerconnid() {
  _impl_.ownerconnid_ = 0u;
}
inline uint32_t CreateChannelResultMessage::_internal_ownerconnid() const {
  return _impl_.ownerconnid_;
}
inline uint32_t CreateChannelResultMessage::ownerconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.ownerConnId)
  return _internal_ownerconnid();
}
inline void CreateChannelResultMessage::_internal_set_ownerconnid(uint32_t value) {
  
  _impl_.ownerconnid_ = value;
}
inline void CreateChannelResultMessage::set_ownerconnid(uint32_t value) {
  _internal_set_ownerconnid(value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.ownerConnId)
}

// uint32 channelId = 4;
inline void CreateChannelResultMessage::clear_channelid() {
  _impl_.channelid_ = 0u;
}
inline uint32_t CreateChannelResultMessage::_internal_channelid() const {
  return _impl_.channelid_;
}
inline uint32_t CreateChannelResultMessage::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateChannelResultMessage.channelId)
  return _internal_channelid();
}
inline void CreateChannelResultMessage::_internal_set_channelid(uint32_t value) {
  
  _impl_.channelid_ = value;
}
inline void CreateChannelResultMessage::set_channelid(uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateChannelResultMessage.channelId)
}

// -------------------------------------------------------------------

// RemoveChannelMessage

// uint32 channelId = 1;
inline void RemoveChannelMessage::clear_channelid() {
  _impl_.channelid_ = 0u;
}
inline uint32_t RemoveChannelMessage::_internal_channelid() const {
  return _impl_.channelid_;
}
inline uint32_t RemoveChannelMessage::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.RemoveChannelMessage.channelId)
  return _internal_channelid();
}
inline void RemoveChannelMessage::_internal_set_channelid(uint32_t value) {
  
  _impl_.channelid_ = value;
}
inline void RemoveChannelMessage::set_channelid(uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.RemoveChannelMessage.channelId)
}

// -------------------------------------------------------------------

// ListChannelMessage

// .channeldpb.ChannelType typeFilter = 1;
inline void ListChannelMessage::clear_typefilter() {
  _impl_.typefilter_ = 0;
}
inline ::channeldpb::ChannelType ListChannelMessage::_internal_typefilter() const {
  return static_cast< ::channeldpb::ChannelType >(_impl_.typefilter_);
}
inline ::channeldpb::ChannelType ListChannelMessage::typefilter() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelMessage.typeFilter)
  return _internal_typefilter();
}
inline void ListChannelMessage::_internal_set_typefilter(::channeldpb::ChannelType value) {
  
  _impl_.typefilter_ = value;
}
inline void ListChannelMessage::set_typefilter(::channeldpb::ChannelType value) {
  _internal_set_typefilter(value);
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelMessage.typeFilter)
}

// repeated string metadataFilters = 2;
inline int ListChannelMessage::_internal_metadatafilters_size() const {
  return _impl_.metadatafilters_.size();
}
inline int ListChannelMessage::metadatafilters_size() const {
  return _internal_metadatafilters_size();
}
inline void ListChannelMessage::clear_metadatafilters() {
  _impl_.metadatafilters_.Clear();
}
inline std::string* ListChannelMessage::add_metadatafilters() {
  std::string* _s = _internal_add_metadatafilters();
  // @@protoc_insertion_point(field_add_mutable:channeldpb.ListChannelMessage.metadataFilters)
  return _s;
}
inline const std::string& ListChannelMessage::_internal_metadatafilters(int index) const {
  return _impl_.metadatafilters_.Get(index);
}
inline const std::string& ListChannelMessage::metadatafilters(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelMessage.metadataFilters)
  return _internal_metadatafilters(index);
}
inline std::string* ListChannelMessage::mutable_metadatafilters(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.ListChannelMessage.metadataFilters)
  return _impl_.metadatafilters_.Mutable(index);
}
inline void ListChannelMessage::set_metadatafilters(int index, const std::string& value) {
  _impl_.metadatafilters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::set_metadatafilters(int index, std::string&& value) {
  _impl_.metadatafilters_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::set_metadatafilters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.metadatafilters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::set_metadatafilters(int index, const char* value, size_t size) {
  _impl_.metadatafilters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channeldpb.ListChannelMessage.metadataFilters)
}
inline std::string* ListChannelMessage::_internal_add_metadatafilters() {
  return _impl_.metadatafilters_.Add();
}
inline void ListChannelMessage::add_metadatafilters(const std::string& value) {
  _impl_.metadatafilters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::add_metadatafilters(std::string&& value) {
  _impl_.metadatafilters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::add_metadatafilters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.metadatafilters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channeldpb.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::add_metadatafilters(const char* value, size_t size) {
  _impl_.metadatafilters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channeldpb.ListChannelMessage.metadataFilters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListChannelMessage::metadatafilters() const {
  // @@protoc_insertion_point(field_list:channeldpb.ListChannelMessage.metadataFilters)
  return _impl_.metadatafilters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListChannelMessage::mutable_metadatafilters() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.ListChannelMessage.metadataFilters)
  return &_impl_.metadatafilters_;
}

// -------------------------------------------------------------------

// ListChannelResultMessage_ChannelInfo

// uint32 channelId = 1;
inline void ListChannelResultMessage_ChannelInfo::clear_channelid() {
  _impl_.channelid_ = 0u;
}
inline uint32_t ListChannelResultMessage_ChannelInfo::_internal_channelid() const {
  return _impl_.channelid_;
}
inline uint32_t ListChannelResultMessage_ChannelInfo::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.ChannelInfo.channelId)
  return _internal_channelid();
}
inline void ListChannelResultMessage_ChannelInfo::_internal_set_channelid(uint32_t value) {
  
  _impl_.channelid_ = value;
}
inline void ListChannelResultMessage_ChannelInfo::set_channelid(uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelResultMessage.ChannelInfo.channelId)
}

// .channeldpb.ChannelType channelType = 2;
inline void ListChannelResultMessage_ChannelInfo::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::channeldpb::ChannelType ListChannelResultMessage_ChannelInfo::_internal_channeltype() const {
  return static_cast< ::channeldpb::ChannelType >(_impl_.channeltype_);
}
inline ::channeldpb::ChannelType ListChannelResultMessage_ChannelInfo::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.ChannelInfo.channelType)
  return _internal_channeltype();
}
inline void ListChannelResultMessage_ChannelInfo::_internal_set_channeltype(::channeldpb::ChannelType value) {
  
  _impl_.channeltype_ = value;
}
inline void ListChannelResultMessage_ChannelInfo::set_channeltype(::channeldpb::ChannelType value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelResultMessage.ChannelInfo.channelType)
}

// string metadata = 3;
inline void ListChannelResultMessage_ChannelInfo::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& ListChannelResultMessage_ChannelInfo::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChannelResultMessage_ChannelInfo::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}
inline std::string* ListChannelResultMessage_ChannelInfo::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
  return _s;
}
inline const std::string& ListChannelResultMessage_ChannelInfo::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void ListChannelResultMessage_ChannelInfo::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* ListChannelResultMessage_ChannelInfo::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* ListChannelResultMessage_ChannelInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
  return _impl_.metadata_.Release();
}
inline void ListChannelResultMessage_ChannelInfo::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ListChannelResultMessage.ChannelInfo.metadata)
}

// -------------------------------------------------------------------

// ListChannelResultMessage

// repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
inline int ListChannelResultMessage::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int ListChannelResultMessage::channels_size() const {
  return _internal_channels_size();
}
inline void ListChannelResultMessage::clear_channels() {
  _impl_.channels_.Clear();
}
inline ::channeldpb::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.ListChannelResultMessage.channels)
  return _impl_.channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >*
ListChannelResultMessage::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.ListChannelResultMessage.channels)
  return &_impl_.channels_;
}
inline const ::channeldpb::ListChannelResultMessage_ChannelInfo& ListChannelResultMessage::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline const ::channeldpb::ListChannelResultMessage_ChannelInfo& ListChannelResultMessage::channels(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.ListChannelResultMessage.channels)
  return _internal_channels(index);
}
inline ::channeldpb::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::_internal_add_channels() {
  return _impl_.channels_.Add();
}
inline ::channeldpb::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::add_channels() {
  ::channeldpb::ListChannelResultMessage_ChannelInfo* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:channeldpb.ListChannelResultMessage.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::ListChannelResultMessage_ChannelInfo >&
ListChannelResultMessage::channels() const {
  // @@protoc_insertion_point(field_list:channeldpb.ListChannelResultMessage.channels)
  return _impl_.channels_;
}

// -------------------------------------------------------------------

// SubscribedToChannelMessage

// uint32 connId = 1;
inline void SubscribedToChannelMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t SubscribedToChannelMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t SubscribedToChannelMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelMessage.connId)
  return _internal_connid();
}
inline void SubscribedToChannelMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void SubscribedToChannelMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelMessage.connId)
}

// .channeldpb.ChannelSubscriptionOptions subOptions = 2;
inline bool SubscribedToChannelMessage::_internal_has_suboptions() const {
  return this != internal_default_instance() && _impl_.suboptions_ != nullptr;
}
inline bool SubscribedToChannelMessage::has_suboptions() const {
  return _internal_has_suboptions();
}
inline void SubscribedToChannelMessage::clear_suboptions() {
  if (GetArenaForAllocation() == nullptr && _impl_.suboptions_ != nullptr) {
    delete _impl_.suboptions_;
  }
  _impl_.suboptions_ = nullptr;
}
inline const ::channeldpb::ChannelSubscriptionOptions& SubscribedToChannelMessage::_internal_suboptions() const {
  const ::channeldpb::ChannelSubscriptionOptions* p = _impl_.suboptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::ChannelSubscriptionOptions&>(
      ::channeldpb::_ChannelSubscriptionOptions_default_instance_);
}
inline const ::channeldpb::ChannelSubscriptionOptions& SubscribedToChannelMessage::suboptions() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelMessage.subOptions)
  return _internal_suboptions();
}
inline void SubscribedToChannelMessage::unsafe_arena_set_allocated_suboptions(
    ::channeldpb::ChannelSubscriptionOptions* suboptions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.suboptions_);
  }
  _impl_.suboptions_ = suboptions;
  if (suboptions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SubscribedToChannelMessage.subOptions)
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelMessage::release_suboptions() {
  
  ::channeldpb::ChannelSubscriptionOptions* temp = _impl_.suboptions_;
  _impl_.suboptions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelMessage::unsafe_arena_release_suboptions() {
  // @@protoc_insertion_point(field_release:channeldpb.SubscribedToChannelMessage.subOptions)
  
  ::channeldpb::ChannelSubscriptionOptions* temp = _impl_.suboptions_;
  _impl_.suboptions_ = nullptr;
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelMessage::_internal_mutable_suboptions() {
  
  if (_impl_.suboptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::ChannelSubscriptionOptions>(GetArenaForAllocation());
    _impl_.suboptions_ = p;
  }
  return _impl_.suboptions_;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelMessage::mutable_suboptions() {
  ::channeldpb::ChannelSubscriptionOptions* _msg = _internal_mutable_suboptions();
  // @@protoc_insertion_point(field_mutable:channeldpb.SubscribedToChannelMessage.subOptions)
  return _msg;
}
inline void SubscribedToChannelMessage::set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.suboptions_;
  }
  if (suboptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(suboptions);
    if (message_arena != submessage_arena) {
      suboptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SubscribedToChannelMessage.subOptions)
}

// -------------------------------------------------------------------

// SubscribedToChannelResultMessage

// uint32 connId = 1;
inline void SubscribedToChannelResultMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t SubscribedToChannelResultMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t SubscribedToChannelResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.connId)
  return _internal_connid();
}
inline void SubscribedToChannelResultMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void SubscribedToChannelResultMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelResultMessage.connId)
}

// .channeldpb.ChannelSubscriptionOptions subOptions = 2;
inline bool SubscribedToChannelResultMessage::_internal_has_suboptions() const {
  return this != internal_default_instance() && _impl_.suboptions_ != nullptr;
}
inline bool SubscribedToChannelResultMessage::has_suboptions() const {
  return _internal_has_suboptions();
}
inline void SubscribedToChannelResultMessage::clear_suboptions() {
  if (GetArenaForAllocation() == nullptr && _impl_.suboptions_ != nullptr) {
    delete _impl_.suboptions_;
  }
  _impl_.suboptions_ = nullptr;
}
inline const ::channeldpb::ChannelSubscriptionOptions& SubscribedToChannelResultMessage::_internal_suboptions() const {
  const ::channeldpb::ChannelSubscriptionOptions* p = _impl_.suboptions_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::ChannelSubscriptionOptions&>(
      ::channeldpb::_ChannelSubscriptionOptions_default_instance_);
}
inline const ::channeldpb::ChannelSubscriptionOptions& SubscribedToChannelResultMessage::suboptions() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.subOptions)
  return _internal_suboptions();
}
inline void SubscribedToChannelResultMessage::unsafe_arena_set_allocated_suboptions(
    ::channeldpb::ChannelSubscriptionOptions* suboptions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.suboptions_);
  }
  _impl_.suboptions_ = suboptions;
  if (suboptions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SubscribedToChannelResultMessage.subOptions)
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelResultMessage::release_suboptions() {
  
  ::channeldpb::ChannelSubscriptionOptions* temp = _impl_.suboptions_;
  _impl_.suboptions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelResultMessage::unsafe_arena_release_suboptions() {
  // @@protoc_insertion_point(field_release:channeldpb.SubscribedToChannelResultMessage.subOptions)
  
  ::channeldpb::ChannelSubscriptionOptions* temp = _impl_.suboptions_;
  _impl_.suboptions_ = nullptr;
  return temp;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelResultMessage::_internal_mutable_suboptions() {
  
  if (_impl_.suboptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::ChannelSubscriptionOptions>(GetArenaForAllocation());
    _impl_.suboptions_ = p;
  }
  return _impl_.suboptions_;
}
inline ::channeldpb::ChannelSubscriptionOptions* SubscribedToChannelResultMessage::mutable_suboptions() {
  ::channeldpb::ChannelSubscriptionOptions* _msg = _internal_mutable_suboptions();
  // @@protoc_insertion_point(field_mutable:channeldpb.SubscribedToChannelResultMessage.subOptions)
  return _msg;
}
inline void SubscribedToChannelResultMessage::set_allocated_suboptions(::channeldpb::ChannelSubscriptionOptions* suboptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.suboptions_;
  }
  if (suboptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(suboptions);
    if (message_arena != submessage_arena) {
      suboptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SubscribedToChannelResultMessage.subOptions)
}

// .channeldpb.ConnectionType connType = 3;
inline void SubscribedToChannelResultMessage::clear_conntype() {
  _impl_.conntype_ = 0;
}
inline ::channeldpb::ConnectionType SubscribedToChannelResultMessage::_internal_conntype() const {
  return static_cast< ::channeldpb::ConnectionType >(_impl_.conntype_);
}
inline ::channeldpb::ConnectionType SubscribedToChannelResultMessage::conntype() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.connType)
  return _internal_conntype();
}
inline void SubscribedToChannelResultMessage::_internal_set_conntype(::channeldpb::ConnectionType value) {
  
  _impl_.conntype_ = value;
}
inline void SubscribedToChannelResultMessage::set_conntype(::channeldpb::ConnectionType value) {
  _internal_set_conntype(value);
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelResultMessage.connType)
}

// .channeldpb.ChannelType channelType = 4;
inline void SubscribedToChannelResultMessage::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::channeldpb::ChannelType SubscribedToChannelResultMessage::_internal_channeltype() const {
  return static_cast< ::channeldpb::ChannelType >(_impl_.channeltype_);
}
inline ::channeldpb::ChannelType SubscribedToChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.SubscribedToChannelResultMessage.channelType)
  return _internal_channeltype();
}
inline void SubscribedToChannelResultMessage::_internal_set_channeltype(::channeldpb::ChannelType value) {
  
  _impl_.channeltype_ = value;
}
inline void SubscribedToChannelResultMessage::set_channeltype(::channeldpb::ChannelType value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:channeldpb.SubscribedToChannelResultMessage.channelType)
}

// -------------------------------------------------------------------

// UnsubscribedFromChannelMessage

// uint32 connId = 1;
inline void UnsubscribedFromChannelMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t UnsubscribedFromChannelMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t UnsubscribedFromChannelMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelMessage.connId)
  return _internal_connid();
}
inline void UnsubscribedFromChannelMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void UnsubscribedFromChannelMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelMessage.connId)
}

// -------------------------------------------------------------------

// UnsubscribedFromChannelResultMessage

// uint32 connId = 1;
inline void UnsubscribedFromChannelResultMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t UnsubscribedFromChannelResultMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t UnsubscribedFromChannelResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelResultMessage.connId)
  return _internal_connid();
}
inline void UnsubscribedFromChannelResultMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void UnsubscribedFromChannelResultMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelResultMessage.connId)
}

// .channeldpb.ConnectionType connType = 2;
inline void UnsubscribedFromChannelResultMessage::clear_conntype() {
  _impl_.conntype_ = 0;
}
inline ::channeldpb::ConnectionType UnsubscribedFromChannelResultMessage::_internal_conntype() const {
  return static_cast< ::channeldpb::ConnectionType >(_impl_.conntype_);
}
inline ::channeldpb::ConnectionType UnsubscribedFromChannelResultMessage::conntype() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelResultMessage.connType)
  return _internal_conntype();
}
inline void UnsubscribedFromChannelResultMessage::_internal_set_conntype(::channeldpb::ConnectionType value) {
  
  _impl_.conntype_ = value;
}
inline void UnsubscribedFromChannelResultMessage::set_conntype(::channeldpb::ConnectionType value) {
  _internal_set_conntype(value);
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelResultMessage.connType)
}

// .channeldpb.ChannelType channelType = 3;
inline void UnsubscribedFromChannelResultMessage::clear_channeltype() {
  _impl_.channeltype_ = 0;
}
inline ::channeldpb::ChannelType UnsubscribedFromChannelResultMessage::_internal_channeltype() const {
  return static_cast< ::channeldpb::ChannelType >(_impl_.channeltype_);
}
inline ::channeldpb::ChannelType UnsubscribedFromChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeldpb.UnsubscribedFromChannelResultMessage.channelType)
  return _internal_channeltype();
}
inline void UnsubscribedFromChannelResultMessage::_internal_set_channeltype(::channeldpb::ChannelType value) {
  
  _impl_.channeltype_ = value;
}
inline void UnsubscribedFromChannelResultMessage::set_channeltype(::channeldpb::ChannelType value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:channeldpb.UnsubscribedFromChannelResultMessage.channelType)
}

// -------------------------------------------------------------------

// ChannelDataUpdateMessage

// .google.protobuf.Any data = 1;
inline bool ChannelDataUpdateMessage::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool ChannelDataUpdateMessage::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ChannelDataUpdateMessage::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ChannelDataUpdateMessage::data() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataUpdateMessage.data)
  return _internal_data();
}
inline void ChannelDataUpdateMessage::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.ChannelDataUpdateMessage.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataUpdateMessage::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataUpdateMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:channeldpb.ChannelDataUpdateMessage.data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataUpdateMessage::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataUpdateMessage::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:channeldpb.ChannelDataUpdateMessage.data)
  return _msg;
}
inline void ChannelDataUpdateMessage::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ChannelDataUpdateMessage.data)
}

// uint32 contextConnId = 2;
inline void ChannelDataUpdateMessage::clear_contextconnid() {
  _impl_.contextconnid_ = 0u;
}
inline uint32_t ChannelDataUpdateMessage::_internal_contextconnid() const {
  return _impl_.contextconnid_;
}
inline uint32_t ChannelDataUpdateMessage::contextconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataUpdateMessage.contextConnId)
  return _internal_contextconnid();
}
inline void ChannelDataUpdateMessage::_internal_set_contextconnid(uint32_t value) {
  
  _impl_.contextconnid_ = value;
}
inline void ChannelDataUpdateMessage::set_contextconnid(uint32_t value) {
  _internal_set_contextconnid(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataUpdateMessage.contextConnId)
}

// -------------------------------------------------------------------

// DisconnectMessage

// uint32 connId = 1;
inline void DisconnectMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t DisconnectMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t DisconnectMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.DisconnectMessage.connId)
  return _internal_connid();
}
inline void DisconnectMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void DisconnectMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.DisconnectMessage.connId)
}

// -------------------------------------------------------------------

// SpatialInfo

// double x = 1;
inline void SpatialInfo::clear_x() {
  _impl_.x_ = 0;
}
inline double SpatialInfo::_internal_x() const {
  return _impl_.x_;
}
inline double SpatialInfo::x() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInfo.x)
  return _internal_x();
}
inline void SpatialInfo::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void SpatialInfo::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInfo.x)
}

// double y = 2;
inline void SpatialInfo::clear_y() {
  _impl_.y_ = 0;
}
inline double SpatialInfo::_internal_y() const {
  return _impl_.y_;
}
inline double SpatialInfo::y() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInfo.y)
  return _internal_y();
}
inline void SpatialInfo::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void SpatialInfo::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInfo.y)
}

// double z = 3;
inline void SpatialInfo::clear_z() {
  _impl_.z_ = 0;
}
inline double SpatialInfo::_internal_z() const {
  return _impl_.z_;
}
inline double SpatialInfo::z() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInfo.z)
  return _internal_z();
}
inline void SpatialInfo::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void SpatialInfo::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInfo.z)
}

// -------------------------------------------------------------------

// CreateSpatialChannelsResultMessage

// repeated uint32 spatialChannelId = 1;
inline int CreateSpatialChannelsResultMessage::_internal_spatialchannelid_size() const {
  return _impl_.spatialchannelid_.size();
}
inline int CreateSpatialChannelsResultMessage::spatialchannelid_size() const {
  return _internal_spatialchannelid_size();
}
inline void CreateSpatialChannelsResultMessage::clear_spatialchannelid() {
  _impl_.spatialchannelid_.Clear();
}
inline uint32_t CreateSpatialChannelsResultMessage::_internal_spatialchannelid(int index) const {
  return _impl_.spatialchannelid_.Get(index);
}
inline uint32_t CreateSpatialChannelsResultMessage::spatialchannelid(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
  return _internal_spatialchannelid(index);
}
inline void CreateSpatialChannelsResultMessage::set_spatialchannelid(int index, uint32_t value) {
  _impl_.spatialchannelid_.Set(index, value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
}
inline void CreateSpatialChannelsResultMessage::_internal_add_spatialchannelid(uint32_t value) {
  _impl_.spatialchannelid_.Add(value);
}
inline void CreateSpatialChannelsResultMessage::add_spatialchannelid(uint32_t value) {
  _internal_add_spatialchannelid(value);
  // @@protoc_insertion_point(field_add:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CreateSpatialChannelsResultMessage::_internal_spatialchannelid() const {
  return _impl_.spatialchannelid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CreateSpatialChannelsResultMessage::spatialchannelid() const {
  // @@protoc_insertion_point(field_list:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
  return _internal_spatialchannelid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CreateSpatialChannelsResultMessage::_internal_mutable_spatialchannelid() {
  return &_impl_.spatialchannelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CreateSpatialChannelsResultMessage::mutable_spatialchannelid() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.CreateSpatialChannelsResultMessage.spatialChannelId)
  return _internal_mutable_spatialchannelid();
}

// string metadata = 2;
inline void CreateSpatialChannelsResultMessage::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& CreateSpatialChannelsResultMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateSpatialChannelsResultMessage.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSpatialChannelsResultMessage::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.metadata_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}
inline std::string* CreateSpatialChannelsResultMessage::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:channeldpb.CreateSpatialChannelsResultMessage.metadata)
  return _s;
}
inline const std::string& CreateSpatialChannelsResultMessage::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void CreateSpatialChannelsResultMessage::_internal_set_metadata(const std::string& value) {
  
  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSpatialChannelsResultMessage::_internal_mutable_metadata() {
  
  return _impl_.metadata_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSpatialChannelsResultMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeldpb.CreateSpatialChannelsResultMessage.metadata)
  return _impl_.metadata_.Release();
}
inline void CreateSpatialChannelsResultMessage::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  _impl_.metadata_.SetAllocated(metadata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.CreateSpatialChannelsResultMessage.metadata)
}

// uint32 ownerConnId = 3;
inline void CreateSpatialChannelsResultMessage::clear_ownerconnid() {
  _impl_.ownerconnid_ = 0u;
}
inline uint32_t CreateSpatialChannelsResultMessage::_internal_ownerconnid() const {
  return _impl_.ownerconnid_;
}
inline uint32_t CreateSpatialChannelsResultMessage::ownerconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.CreateSpatialChannelsResultMessage.ownerConnId)
  return _internal_ownerconnid();
}
inline void CreateSpatialChannelsResultMessage::_internal_set_ownerconnid(uint32_t value) {
  
  _impl_.ownerconnid_ = value;
}
inline void CreateSpatialChannelsResultMessage::set_ownerconnid(uint32_t value) {
  _internal_set_ownerconnid(value);
  // @@protoc_insertion_point(field_set:channeldpb.CreateSpatialChannelsResultMessage.ownerConnId)
}

// -------------------------------------------------------------------

// QuerySpatialChannelMessage

// repeated .channeldpb.SpatialInfo spatialInfo = 1;
inline int QuerySpatialChannelMessage::_internal_spatialinfo_size() const {
  return _impl_.spatialinfo_.size();
}
inline int QuerySpatialChannelMessage::spatialinfo_size() const {
  return _internal_spatialinfo_size();
}
inline void QuerySpatialChannelMessage::clear_spatialinfo() {
  _impl_.spatialinfo_.Clear();
}
inline ::channeldpb::SpatialInfo* QuerySpatialChannelMessage::mutable_spatialinfo(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return _impl_.spatialinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >*
QuerySpatialChannelMessage::mutable_spatialinfo() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return &_impl_.spatialinfo_;
}
inline const ::channeldpb::SpatialInfo& QuerySpatialChannelMessage::_internal_spatialinfo(int index) const {
  return _impl_.spatialinfo_.Get(index);
}
inline const ::channeldpb::SpatialInfo& QuerySpatialChannelMessage::spatialinfo(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return _internal_spatialinfo(index);
}
inline ::channeldpb::SpatialInfo* QuerySpatialChannelMessage::_internal_add_spatialinfo() {
  return _impl_.spatialinfo_.Add();
}
inline ::channeldpb::SpatialInfo* QuerySpatialChannelMessage::add_spatialinfo() {
  ::channeldpb::SpatialInfo* _add = _internal_add_spatialinfo();
  // @@protoc_insertion_point(field_add:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >&
QuerySpatialChannelMessage::spatialinfo() const {
  // @@protoc_insertion_point(field_list:channeldpb.QuerySpatialChannelMessage.spatialInfo)
  return _impl_.spatialinfo_;
}

// -------------------------------------------------------------------

// QuerySpatialChannelResultMessage

// repeated uint32 channelId = 1;
inline int QuerySpatialChannelResultMessage::_internal_channelid_size() const {
  return _impl_.channelid_.size();
}
inline int QuerySpatialChannelResultMessage::channelid_size() const {
  return _internal_channelid_size();
}
inline void QuerySpatialChannelResultMessage::clear_channelid() {
  _impl_.channelid_.Clear();
}
inline uint32_t QuerySpatialChannelResultMessage::_internal_channelid(int index) const {
  return _impl_.channelid_.Get(index);
}
inline uint32_t QuerySpatialChannelResultMessage::channelid(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.QuerySpatialChannelResultMessage.channelId)
  return _internal_channelid(index);
}
inline void QuerySpatialChannelResultMessage::set_channelid(int index, uint32_t value) {
  _impl_.channelid_.Set(index, value);
  // @@protoc_insertion_point(field_set:channeldpb.QuerySpatialChannelResultMessage.channelId)
}
inline void QuerySpatialChannelResultMessage::_internal_add_channelid(uint32_t value) {
  _impl_.channelid_.Add(value);
}
inline void QuerySpatialChannelResultMessage::add_channelid(uint32_t value) {
  _internal_add_channelid(value);
  // @@protoc_insertion_point(field_add:channeldpb.QuerySpatialChannelResultMessage.channelId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
QuerySpatialChannelResultMessage::_internal_channelid() const {
  return _impl_.channelid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
QuerySpatialChannelResultMessage::channelid() const {
  // @@protoc_insertion_point(field_list:channeldpb.QuerySpatialChannelResultMessage.channelId)
  return _internal_channelid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
QuerySpatialChannelResultMessage::_internal_mutable_channelid() {
  return &_impl_.channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
QuerySpatialChannelResultMessage::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.QuerySpatialChannelResultMessage.channelId)
  return _internal_mutable_channelid();
}

// -------------------------------------------------------------------

// ChannelDataHandoverMessage

// uint32 srcChannelId = 1;
inline void ChannelDataHandoverMessage::clear_srcchannelid() {
  _impl_.srcchannelid_ = 0u;
}
inline uint32_t ChannelDataHandoverMessage::_internal_srcchannelid() const {
  return _impl_.srcchannelid_;
}
inline uint32_t ChannelDataHandoverMessage::srcchannelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.srcChannelId)
  return _internal_srcchannelid();
}
inline void ChannelDataHandoverMessage::_internal_set_srcchannelid(uint32_t value) {
  
  _impl_.srcchannelid_ = value;
}
inline void ChannelDataHandoverMessage::set_srcchannelid(uint32_t value) {
  _internal_set_srcchannelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataHandoverMessage.srcChannelId)
}

// uint32 dstChannelId = 2;
inline void ChannelDataHandoverMessage::clear_dstchannelid() {
  _impl_.dstchannelid_ = 0u;
}
inline uint32_t ChannelDataHandoverMessage::_internal_dstchannelid() const {
  return _impl_.dstchannelid_;
}
inline uint32_t ChannelDataHandoverMessage::dstchannelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.dstChannelId)
  return _internal_dstchannelid();
}
inline void ChannelDataHandoverMessage::_internal_set_dstchannelid(uint32_t value) {
  
  _impl_.dstchannelid_ = value;
}
inline void ChannelDataHandoverMessage::set_dstchannelid(uint32_t value) {
  _internal_set_dstchannelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataHandoverMessage.dstChannelId)
}

// uint32 contextConnId = 3;
inline void ChannelDataHandoverMessage::clear_contextconnid() {
  _impl_.contextconnid_ = 0u;
}
inline uint32_t ChannelDataHandoverMessage::_internal_contextconnid() const {
  return _impl_.contextconnid_;
}
inline uint32_t ChannelDataHandoverMessage::contextconnid() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.contextConnId)
  return _internal_contextconnid();
}
inline void ChannelDataHandoverMessage::_internal_set_contextconnid(uint32_t value) {
  
  _impl_.contextconnid_ = value;
}
inline void ChannelDataHandoverMessage::set_contextconnid(uint32_t value) {
  _internal_set_contextconnid(value);
  // @@protoc_insertion_point(field_set:channeldpb.ChannelDataHandoverMessage.contextConnId)
}

// .google.protobuf.Any data = 4;
inline bool ChannelDataHandoverMessage::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool ChannelDataHandoverMessage::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ChannelDataHandoverMessage::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ChannelDataHandoverMessage::data() const {
  // @@protoc_insertion_point(field_get:channeldpb.ChannelDataHandoverMessage.data)
  return _internal_data();
}
inline void ChannelDataHandoverMessage::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.ChannelDataHandoverMessage.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataHandoverMessage::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataHandoverMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:channeldpb.ChannelDataHandoverMessage.data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataHandoverMessage::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ChannelDataHandoverMessage::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:channeldpb.ChannelDataHandoverMessage.data)
  return _msg;
}
inline void ChannelDataHandoverMessage::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.ChannelDataHandoverMessage.data)
}

// -------------------------------------------------------------------

// SpatialRegion

// .channeldpb.SpatialInfo min = 1;
inline bool SpatialRegion::_internal_has_min() const {
  return this != internal_default_instance() && _impl_.min_ != nullptr;
}
inline bool SpatialRegion::has_min() const {
  return _internal_has_min();
}
inline void SpatialRegion::clear_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialRegion::_internal_min() const {
  const ::channeldpb::SpatialInfo* p = _impl_.min_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialRegion::min() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.min)
  return _internal_min();
}
inline void SpatialRegion::unsafe_arena_set_allocated_min(
    ::channeldpb::SpatialInfo* min) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_);
  }
  _impl_.min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialRegion.min)
}
inline ::channeldpb::SpatialInfo* SpatialRegion::release_min() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.min_;
  _impl_.min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialRegion.min)
  
  ::channeldpb::SpatialInfo* temp = _impl_.min_;
  _impl_.min_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::_internal_mutable_min() {
  
  if (_impl_.min_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.min_ = p;
  }
  return _impl_.min_;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::mutable_min() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_min();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialRegion.min)
  return _msg;
}
inline void SpatialRegion::set_allocated_min(::channeldpb::SpatialInfo* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_ = min;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialRegion.min)
}

// .channeldpb.SpatialInfo max = 2;
inline bool SpatialRegion::_internal_has_max() const {
  return this != internal_default_instance() && _impl_.max_ != nullptr;
}
inline bool SpatialRegion::has_max() const {
  return _internal_has_max();
}
inline void SpatialRegion::clear_max() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialRegion::_internal_max() const {
  const ::channeldpb::SpatialInfo* p = _impl_.max_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialRegion::max() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.max)
  return _internal_max();
}
inline void SpatialRegion::unsafe_arena_set_allocated_max(
    ::channeldpb::SpatialInfo* max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_);
  }
  _impl_.max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialRegion.max)
}
inline ::channeldpb::SpatialInfo* SpatialRegion::release_max() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.max_;
  _impl_.max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialRegion.max)
  
  ::channeldpb::SpatialInfo* temp = _impl_.max_;
  _impl_.max_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::_internal_mutable_max() {
  
  if (_impl_.max_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.max_ = p;
  }
  return _impl_.max_;
}
inline ::channeldpb::SpatialInfo* SpatialRegion::mutable_max() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_max();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialRegion.max)
  return _msg;
}
inline void SpatialRegion::set_allocated_max(::channeldpb::SpatialInfo* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_ = max;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialRegion.max)
}

// uint32 channelId = 3;
inline void SpatialRegion::clear_channelid() {
  _impl_.channelid_ = 0u;
}
inline uint32_t SpatialRegion::_internal_channelid() const {
  return _impl_.channelid_;
}
inline uint32_t SpatialRegion::channelid() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.channelId)
  return _internal_channelid();
}
inline void SpatialRegion::_internal_set_channelid(uint32_t value) {
  
  _impl_.channelid_ = value;
}
inline void SpatialRegion::set_channelid(uint32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialRegion.channelId)
}

// uint32 serverIndex = 4;
inline void SpatialRegion::clear_serverindex() {
  _impl_.serverindex_ = 0u;
}
inline uint32_t SpatialRegion::_internal_serverindex() const {
  return _impl_.serverindex_;
}
inline uint32_t SpatialRegion::serverindex() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegion.serverIndex)
  return _internal_serverindex();
}
inline void SpatialRegion::_internal_set_serverindex(uint32_t value) {
  
  _impl_.serverindex_ = value;
}
inline void SpatialRegion::set_serverindex(uint32_t value) {
  _internal_set_serverindex(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialRegion.serverIndex)
}

// -------------------------------------------------------------------

// SpatialRegionsUpdateMessage

// repeated .channeldpb.SpatialRegion regions = 1;
inline int SpatialRegionsUpdateMessage::_internal_regions_size() const {
  return _impl_.regions_.size();
}
inline int SpatialRegionsUpdateMessage::regions_size() const {
  return _internal_regions_size();
}
inline void SpatialRegionsUpdateMessage::clear_regions() {
  _impl_.regions_.Clear();
}
inline ::channeldpb::SpatialRegion* SpatialRegionsUpdateMessage::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialRegionsUpdateMessage.regions)
  return _impl_.regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialRegion >*
SpatialRegionsUpdateMessage::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.SpatialRegionsUpdateMessage.regions)
  return &_impl_.regions_;
}
inline const ::channeldpb::SpatialRegion& SpatialRegionsUpdateMessage::_internal_regions(int index) const {
  return _impl_.regions_.Get(index);
}
inline const ::channeldpb::SpatialRegion& SpatialRegionsUpdateMessage::regions(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialRegionsUpdateMessage.regions)
  return _internal_regions(index);
}
inline ::channeldpb::SpatialRegion* SpatialRegionsUpdateMessage::_internal_add_regions() {
  return _impl_.regions_.Add();
}
inline ::channeldpb::SpatialRegion* SpatialRegionsUpdateMessage::add_regions() {
  ::channeldpb::SpatialRegion* _add = _internal_add_regions();
  // @@protoc_insertion_point(field_add:channeldpb.SpatialRegionsUpdateMessage.regions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialRegion >&
SpatialRegionsUpdateMessage::regions() const {
  // @@protoc_insertion_point(field_list:channeldpb.SpatialRegionsUpdateMessage.regions)
  return _impl_.regions_;
}

// -------------------------------------------------------------------

// SpatialInterestQuery_SpotsAOI

// .channeldpb.SpatialInfo center = 1;
inline bool SpatialInterestQuery_SpotsAOI::_internal_has_center() const {
  return this != internal_default_instance() && _impl_.center_ != nullptr;
}
inline bool SpatialInterestQuery_SpotsAOI::has_center() const {
  return _internal_has_center();
}
inline void SpatialInterestQuery_SpotsAOI::clear_center() {
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_SpotsAOI::_internal_center() const {
  const ::channeldpb::SpatialInfo* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_SpotsAOI::center() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.SpotsAOI.center)
  return _internal_center();
}
inline void SpatialInterestQuery_SpotsAOI::unsafe_arena_set_allocated_center(
    ::channeldpb::SpatialInfo* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.SpotsAOI.center)
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::release_center() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.SpotsAOI.center)
  
  ::channeldpb::SpatialInfo* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::_internal_mutable_center() {
  
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::mutable_center() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.SpotsAOI.center)
  return _msg;
}
inline void SpatialInterestQuery_SpotsAOI::set_allocated_center(::channeldpb::SpatialInfo* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.SpotsAOI.center)
}

// repeated .channeldpb.SpatialInfo spots = 2;
inline int SpatialInterestQuery_SpotsAOI::_internal_spots_size() const {
  return _impl_.spots_.size();
}
inline int SpatialInterestQuery_SpotsAOI::spots_size() const {
  return _internal_spots_size();
}
inline void SpatialInterestQuery_SpotsAOI::clear_spots() {
  _impl_.spots_.Clear();
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::mutable_spots(int index) {
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.SpotsAOI.spots)
  return _impl_.spots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >*
SpatialInterestQuery_SpotsAOI::mutable_spots() {
  // @@protoc_insertion_point(field_mutable_list:channeldpb.SpatialInterestQuery.SpotsAOI.spots)
  return &_impl_.spots_;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_SpotsAOI::_internal_spots(int index) const {
  return _impl_.spots_.Get(index);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_SpotsAOI::spots(int index) const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.SpotsAOI.spots)
  return _internal_spots(index);
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::_internal_add_spots() {
  return _impl_.spots_.Add();
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SpotsAOI::add_spots() {
  ::channeldpb::SpatialInfo* _add = _internal_add_spots();
  // @@protoc_insertion_point(field_add:channeldpb.SpatialInterestQuery.SpotsAOI.spots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::channeldpb::SpatialInfo >&
SpatialInterestQuery_SpotsAOI::spots() const {
  // @@protoc_insertion_point(field_list:channeldpb.SpatialInterestQuery.SpotsAOI.spots)
  return _impl_.spots_;
}

// -------------------------------------------------------------------

// SpatialInterestQuery_BoxAOI

// .channeldpb.SpatialInfo min = 1;
inline bool SpatialInterestQuery_BoxAOI::_internal_has_min() const {
  return this != internal_default_instance() && _impl_.min_ != nullptr;
}
inline bool SpatialInterestQuery_BoxAOI::has_min() const {
  return _internal_has_min();
}
inline void SpatialInterestQuery_BoxAOI::clear_min() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_BoxAOI::_internal_min() const {
  const ::channeldpb::SpatialInfo* p = _impl_.min_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_BoxAOI::min() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.BoxAOI.min)
  return _internal_min();
}
inline void SpatialInterestQuery_BoxAOI::unsafe_arena_set_allocated_min(
    ::channeldpb::SpatialInfo* min) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_);
  }
  _impl_.min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.BoxAOI.min)
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::release_min() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.min_;
  _impl_.min_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.BoxAOI.min)
  
  ::channeldpb::SpatialInfo* temp = _impl_.min_;
  _impl_.min_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::_internal_mutable_min() {
  
  if (_impl_.min_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.min_ = p;
  }
  return _impl_.min_;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::mutable_min() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_min();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.BoxAOI.min)
  return _msg;
}
inline void SpatialInterestQuery_BoxAOI::set_allocated_min(::channeldpb::SpatialInfo* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_ = min;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.BoxAOI.min)
}

// .channeldpb.SpatialInfo max = 2;
inline bool SpatialInterestQuery_BoxAOI::_internal_has_max() const {
  return this != internal_default_instance() && _impl_.max_ != nullptr;
}
inline bool SpatialInterestQuery_BoxAOI::has_max() const {
  return _internal_has_max();
}
inline void SpatialInterestQuery_BoxAOI::clear_max() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_BoxAOI::_internal_max() const {
  const ::channeldpb::SpatialInfo* p = _impl_.max_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_BoxAOI::max() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.BoxAOI.max)
  return _internal_max();
}
inline void SpatialInterestQuery_BoxAOI::unsafe_arena_set_allocated_max(
    ::channeldpb::SpatialInfo* max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_);
  }
  _impl_.max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.BoxAOI.max)
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::release_max() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.max_;
  _impl_.max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.BoxAOI.max)
  
  ::channeldpb::SpatialInfo* temp = _impl_.max_;
  _impl_.max_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::_internal_mutable_max() {
  
  if (_impl_.max_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.max_ = p;
  }
  return _impl_.max_;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_BoxAOI::mutable_max() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_max();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.BoxAOI.max)
  return _msg;
}
inline void SpatialInterestQuery_BoxAOI::set_allocated_max(::channeldpb::SpatialInfo* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_ = max;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.BoxAOI.max)
}

// -------------------------------------------------------------------

// SpatialInterestQuery_SphereAOI

// .channeldpb.SpatialInfo center = 1;
inline bool SpatialInterestQuery_SphereAOI::_internal_has_center() const {
  return this != internal_default_instance() && _impl_.center_ != nullptr;
}
inline bool SpatialInterestQuery_SphereAOI::has_center() const {
  return _internal_has_center();
}
inline void SpatialInterestQuery_SphereAOI::clear_center() {
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_SphereAOI::_internal_center() const {
  const ::channeldpb::SpatialInfo* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_SphereAOI::center() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.SphereAOI.center)
  return _internal_center();
}
inline void SpatialInterestQuery_SphereAOI::unsafe_arena_set_allocated_center(
    ::channeldpb::SpatialInfo* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.SphereAOI.center)
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SphereAOI::release_center() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SphereAOI::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.SphereAOI.center)
  
  ::channeldpb::SpatialInfo* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SphereAOI::_internal_mutable_center() {
  
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_SphereAOI::mutable_center() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.SphereAOI.center)
  return _msg;
}
inline void SpatialInterestQuery_SphereAOI::set_allocated_center(::channeldpb::SpatialInfo* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.SphereAOI.center)
}

// double radius = 2;
inline void SpatialInterestQuery_SphereAOI::clear_radius() {
  _impl_.radius_ = 0;
}
inline double SpatialInterestQuery_SphereAOI::_internal_radius() const {
  return _impl_.radius_;
}
inline double SpatialInterestQuery_SphereAOI::radius() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.SphereAOI.radius)
  return _internal_radius();
}
inline void SpatialInterestQuery_SphereAOI::_internal_set_radius(double value) {
  
  _impl_.radius_ = value;
}
inline void SpatialInterestQuery_SphereAOI::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInterestQuery.SphereAOI.radius)
}

// -------------------------------------------------------------------

// SpatialInterestQuery_ConeAOI

// .channeldpb.SpatialInfo center = 1;
inline bool SpatialInterestQuery_ConeAOI::_internal_has_center() const {
  return this != internal_default_instance() && _impl_.center_ != nullptr;
}
inline bool SpatialInterestQuery_ConeAOI::has_center() const {
  return _internal_has_center();
}
inline void SpatialInterestQuery_ConeAOI::clear_center() {
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_ConeAOI::_internal_center() const {
  const ::channeldpb::SpatialInfo* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_ConeAOI::center() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.ConeAOI.center)
  return _internal_center();
}
inline void SpatialInterestQuery_ConeAOI::unsafe_arena_set_allocated_center(
    ::channeldpb::SpatialInfo* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.ConeAOI.center)
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::release_center() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.ConeAOI.center)
  
  ::channeldpb::SpatialInfo* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::_internal_mutable_center() {
  
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::mutable_center() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.ConeAOI.center)
  return _msg;
}
inline void SpatialInterestQuery_ConeAOI::set_allocated_center(::channeldpb::SpatialInfo* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.ConeAOI.center)
}

// .channeldpb.SpatialInfo direction = 2;
inline bool SpatialInterestQuery_ConeAOI::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool SpatialInterestQuery_ConeAOI::has_direction() const {
  return _internal_has_direction();
}
inline void SpatialInterestQuery_ConeAOI::clear_direction() {
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_ConeAOI::_internal_direction() const {
  const ::channeldpb::SpatialInfo* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInfo&>(
      ::channeldpb::_SpatialInfo_default_instance_);
}
inline const ::channeldpb::SpatialInfo& SpatialInterestQuery_ConeAOI::direction() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.ConeAOI.direction)
  return _internal_direction();
}
inline void SpatialInterestQuery_ConeAOI::unsafe_arena_set_allocated_direction(
    ::channeldpb::SpatialInfo* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.ConeAOI.direction)
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::release_direction() {
  
  ::channeldpb::SpatialInfo* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.ConeAOI.direction)
  
  ::channeldpb::SpatialInfo* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInfo>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::channeldpb::SpatialInfo* SpatialInterestQuery_ConeAOI::mutable_direction() {
  ::channeldpb::SpatialInfo* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.ConeAOI.direction)
  return _msg;
}
inline void SpatialInterestQuery_ConeAOI::set_allocated_direction(::channeldpb::SpatialInfo* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.ConeAOI.direction)
}

// double angle = 3;
inline void SpatialInterestQuery_ConeAOI::clear_angle() {
  _impl_.angle_ = 0;
}
inline double SpatialInterestQuery_ConeAOI::_internal_angle() const {
  return _impl_.angle_;
}
inline double SpatialInterestQuery_ConeAOI::angle() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.ConeAOI.angle)
  return _internal_angle();
}
inline void SpatialInterestQuery_ConeAOI::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void SpatialInterestQuery_ConeAOI::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInterestQuery.ConeAOI.angle)
}

// double radius = 4;
inline void SpatialInterestQuery_ConeAOI::clear_radius() {
  _impl_.radius_ = 0;
}
inline double SpatialInterestQuery_ConeAOI::_internal_radius() const {
  return _impl_.radius_;
}
inline double SpatialInterestQuery_ConeAOI::radius() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.ConeAOI.radius)
  return _internal_radius();
}
inline void SpatialInterestQuery_ConeAOI::_internal_set_radius(double value) {
  
  _impl_.radius_ = value;
}
inline void SpatialInterestQuery_ConeAOI::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:channeldpb.SpatialInterestQuery.ConeAOI.radius)
}

// -------------------------------------------------------------------

// SpatialInterestQuery

// optional .channeldpb.SpatialInterestQuery.SpotsAOI spotsAOI = 1;
inline bool SpatialInterestQuery::_internal_has_spotsaoi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spotsaoi_ != nullptr);
  return value;
}
inline bool SpatialInterestQuery::has_spotsaoi() const {
  return _internal_has_spotsaoi();
}
inline void SpatialInterestQuery::clear_spotsaoi() {
  if (_impl_.spotsaoi_ != nullptr) _impl_.spotsaoi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::channeldpb::SpatialInterestQuery_SpotsAOI& SpatialInterestQuery::_internal_spotsaoi() const {
  const ::channeldpb::SpatialInterestQuery_SpotsAOI* p = _impl_.spotsaoi_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInterestQuery_SpotsAOI&>(
      ::channeldpb::_SpatialInterestQuery_SpotsAOI_default_instance_);
}
inline const ::channeldpb::SpatialInterestQuery_SpotsAOI& SpatialInterestQuery::spotsaoi() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.spotsAOI)
  return _internal_spotsaoi();
}
inline void SpatialInterestQuery::unsafe_arena_set_allocated_spotsaoi(
    ::channeldpb::SpatialInterestQuery_SpotsAOI* spotsaoi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spotsaoi_);
  }
  _impl_.spotsaoi_ = spotsaoi;
  if (spotsaoi) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.spotsAOI)
}
inline ::channeldpb::SpatialInterestQuery_SpotsAOI* SpatialInterestQuery::release_spotsaoi() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::channeldpb::SpatialInterestQuery_SpotsAOI* temp = _impl_.spotsaoi_;
  _impl_.spotsaoi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_SpotsAOI* SpatialInterestQuery::unsafe_arena_release_spotsaoi() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.spotsAOI)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::channeldpb::SpatialInterestQuery_SpotsAOI* temp = _impl_.spotsaoi_;
  _impl_.spotsaoi_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_SpotsAOI* SpatialInterestQuery::_internal_mutable_spotsaoi() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.spotsaoi_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInterestQuery_SpotsAOI>(GetArenaForAllocation());
    _impl_.spotsaoi_ = p;
  }
  return _impl_.spotsaoi_;
}
inline ::channeldpb::SpatialInterestQuery_SpotsAOI* SpatialInterestQuery::mutable_spotsaoi() {
  ::channeldpb::SpatialInterestQuery_SpotsAOI* _msg = _internal_mutable_spotsaoi();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.spotsAOI)
  return _msg;
}
inline void SpatialInterestQuery::set_allocated_spotsaoi(::channeldpb::SpatialInterestQuery_SpotsAOI* spotsaoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spotsaoi_;
  }
  if (spotsaoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spotsaoi);
    if (message_arena != submessage_arena) {
      spotsaoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spotsaoi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.spotsaoi_ = spotsaoi;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.spotsAOI)
}

// optional .channeldpb.SpatialInterestQuery.BoxAOI boxAOI = 2;
inline bool SpatialInterestQuery::_internal_has_boxaoi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boxaoi_ != nullptr);
  return value;
}
inline bool SpatialInterestQuery::has_boxaoi() const {
  return _internal_has_boxaoi();
}
inline void SpatialInterestQuery::clear_boxaoi() {
  if (_impl_.boxaoi_ != nullptr) _impl_.boxaoi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::channeldpb::SpatialInterestQuery_BoxAOI& SpatialInterestQuery::_internal_boxaoi() const {
  const ::channeldpb::SpatialInterestQuery_BoxAOI* p = _impl_.boxaoi_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInterestQuery_BoxAOI&>(
      ::channeldpb::_SpatialInterestQuery_BoxAOI_default_instance_);
}
inline const ::channeldpb::SpatialInterestQuery_BoxAOI& SpatialInterestQuery::boxaoi() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.boxAOI)
  return _internal_boxaoi();
}
inline void SpatialInterestQuery::unsafe_arena_set_allocated_boxaoi(
    ::channeldpb::SpatialInterestQuery_BoxAOI* boxaoi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boxaoi_);
  }
  _impl_.boxaoi_ = boxaoi;
  if (boxaoi) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.boxAOI)
}
inline ::channeldpb::SpatialInterestQuery_BoxAOI* SpatialInterestQuery::release_boxaoi() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::channeldpb::SpatialInterestQuery_BoxAOI* temp = _impl_.boxaoi_;
  _impl_.boxaoi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_BoxAOI* SpatialInterestQuery::unsafe_arena_release_boxaoi() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.boxAOI)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::channeldpb::SpatialInterestQuery_BoxAOI* temp = _impl_.boxaoi_;
  _impl_.boxaoi_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_BoxAOI* SpatialInterestQuery::_internal_mutable_boxaoi() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.boxaoi_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInterestQuery_BoxAOI>(GetArenaForAllocation());
    _impl_.boxaoi_ = p;
  }
  return _impl_.boxaoi_;
}
inline ::channeldpb::SpatialInterestQuery_BoxAOI* SpatialInterestQuery::mutable_boxaoi() {
  ::channeldpb::SpatialInterestQuery_BoxAOI* _msg = _internal_mutable_boxaoi();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.boxAOI)
  return _msg;
}
inline void SpatialInterestQuery::set_allocated_boxaoi(::channeldpb::SpatialInterestQuery_BoxAOI* boxaoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boxaoi_;
  }
  if (boxaoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boxaoi);
    if (message_arena != submessage_arena) {
      boxaoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boxaoi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.boxaoi_ = boxaoi;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.boxAOI)
}

// optional .channeldpb.SpatialInterestQuery.SphereAOI sphereAOI = 3;
inline bool SpatialInterestQuery::_internal_has_sphereaoi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sphereaoi_ != nullptr);
  return value;
}
inline bool SpatialInterestQuery::has_sphereaoi() const {
  return _internal_has_sphereaoi();
}
inline void SpatialInterestQuery::clear_sphereaoi() {
  if (_impl_.sphereaoi_ != nullptr) _impl_.sphereaoi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::channeldpb::SpatialInterestQuery_SphereAOI& SpatialInterestQuery::_internal_sphereaoi() const {
  const ::channeldpb::SpatialInterestQuery_SphereAOI* p = _impl_.sphereaoi_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInterestQuery_SphereAOI&>(
      ::channeldpb::_SpatialInterestQuery_SphereAOI_default_instance_);
}
inline const ::channeldpb::SpatialInterestQuery_SphereAOI& SpatialInterestQuery::sphereaoi() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.sphereAOI)
  return _internal_sphereaoi();
}
inline void SpatialInterestQuery::unsafe_arena_set_allocated_sphereaoi(
    ::channeldpb::SpatialInterestQuery_SphereAOI* sphereaoi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sphereaoi_);
  }
  _impl_.sphereaoi_ = sphereaoi;
  if (sphereaoi) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.sphereAOI)
}
inline ::channeldpb::SpatialInterestQuery_SphereAOI* SpatialInterestQuery::release_sphereaoi() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::channeldpb::SpatialInterestQuery_SphereAOI* temp = _impl_.sphereaoi_;
  _impl_.sphereaoi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_SphereAOI* SpatialInterestQuery::unsafe_arena_release_sphereaoi() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.sphereAOI)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::channeldpb::SpatialInterestQuery_SphereAOI* temp = _impl_.sphereaoi_;
  _impl_.sphereaoi_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_SphereAOI* SpatialInterestQuery::_internal_mutable_sphereaoi() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sphereaoi_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInterestQuery_SphereAOI>(GetArenaForAllocation());
    _impl_.sphereaoi_ = p;
  }
  return _impl_.sphereaoi_;
}
inline ::channeldpb::SpatialInterestQuery_SphereAOI* SpatialInterestQuery::mutable_sphereaoi() {
  ::channeldpb::SpatialInterestQuery_SphereAOI* _msg = _internal_mutable_sphereaoi();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.sphereAOI)
  return _msg;
}
inline void SpatialInterestQuery::set_allocated_sphereaoi(::channeldpb::SpatialInterestQuery_SphereAOI* sphereaoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sphereaoi_;
  }
  if (sphereaoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sphereaoi);
    if (message_arena != submessage_arena) {
      sphereaoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphereaoi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sphereaoi_ = sphereaoi;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.sphereAOI)
}

// optional .channeldpb.SpatialInterestQuery.ConeAOI coneAOI = 4;
inline bool SpatialInterestQuery::_internal_has_coneaoi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coneaoi_ != nullptr);
  return value;
}
inline bool SpatialInterestQuery::has_coneaoi() const {
  return _internal_has_coneaoi();
}
inline void SpatialInterestQuery::clear_coneaoi() {
  if (_impl_.coneaoi_ != nullptr) _impl_.coneaoi_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::channeldpb::SpatialInterestQuery_ConeAOI& SpatialInterestQuery::_internal_coneaoi() const {
  const ::channeldpb::SpatialInterestQuery_ConeAOI* p = _impl_.coneaoi_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInterestQuery_ConeAOI&>(
      ::channeldpb::_SpatialInterestQuery_ConeAOI_default_instance_);
}
inline const ::channeldpb::SpatialInterestQuery_ConeAOI& SpatialInterestQuery::coneaoi() const {
  // @@protoc_insertion_point(field_get:channeldpb.SpatialInterestQuery.coneAOI)
  return _internal_coneaoi();
}
inline void SpatialInterestQuery::unsafe_arena_set_allocated_coneaoi(
    ::channeldpb::SpatialInterestQuery_ConeAOI* coneaoi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coneaoi_);
  }
  _impl_.coneaoi_ = coneaoi;
  if (coneaoi) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SpatialInterestQuery.coneAOI)
}
inline ::channeldpb::SpatialInterestQuery_ConeAOI* SpatialInterestQuery::release_coneaoi() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::channeldpb::SpatialInterestQuery_ConeAOI* temp = _impl_.coneaoi_;
  _impl_.coneaoi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_ConeAOI* SpatialInterestQuery::unsafe_arena_release_coneaoi() {
  // @@protoc_insertion_point(field_release:channeldpb.SpatialInterestQuery.coneAOI)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::channeldpb::SpatialInterestQuery_ConeAOI* temp = _impl_.coneaoi_;
  _impl_.coneaoi_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInterestQuery_ConeAOI* SpatialInterestQuery::_internal_mutable_coneaoi() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.coneaoi_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInterestQuery_ConeAOI>(GetArenaForAllocation());
    _impl_.coneaoi_ = p;
  }
  return _impl_.coneaoi_;
}
inline ::channeldpb::SpatialInterestQuery_ConeAOI* SpatialInterestQuery::mutable_coneaoi() {
  ::channeldpb::SpatialInterestQuery_ConeAOI* _msg = _internal_mutable_coneaoi();
  // @@protoc_insertion_point(field_mutable:channeldpb.SpatialInterestQuery.coneAOI)
  return _msg;
}
inline void SpatialInterestQuery::set_allocated_coneaoi(::channeldpb::SpatialInterestQuery_ConeAOI* coneaoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coneaoi_;
  }
  if (coneaoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coneaoi);
    if (message_arena != submessage_arena) {
      coneaoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coneaoi, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.coneaoi_ = coneaoi;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SpatialInterestQuery.coneAOI)
}

// -------------------------------------------------------------------

// UpdateSpatialInterestMessage

// uint32 connId = 1;
inline void UpdateSpatialInterestMessage::clear_connid() {
  _impl_.connid_ = 0u;
}
inline uint32_t UpdateSpatialInterestMessage::_internal_connid() const {
  return _impl_.connid_;
}
inline uint32_t UpdateSpatialInterestMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeldpb.UpdateSpatialInterestMessage.connId)
  return _internal_connid();
}
inline void UpdateSpatialInterestMessage::_internal_set_connid(uint32_t value) {
  
  _impl_.connid_ = value;
}
inline void UpdateSpatialInterestMessage::set_connid(uint32_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:channeldpb.UpdateSpatialInterestMessage.connId)
}

// .channeldpb.SpatialInterestQuery query = 2;
inline bool UpdateSpatialInterestMessage::_internal_has_query() const {
  return this != internal_default_instance() && _impl_.query_ != nullptr;
}
inline bool UpdateSpatialInterestMessage::has_query() const {
  return _internal_has_query();
}
inline void UpdateSpatialInterestMessage::clear_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
}
inline const ::channeldpb::SpatialInterestQuery& UpdateSpatialInterestMessage::_internal_query() const {
  const ::channeldpb::SpatialInterestQuery* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::SpatialInterestQuery&>(
      ::channeldpb::_SpatialInterestQuery_default_instance_);
}
inline const ::channeldpb::SpatialInterestQuery& UpdateSpatialInterestMessage::query() const {
  // @@protoc_insertion_point(field_get:channeldpb.UpdateSpatialInterestMessage.query)
  return _internal_query();
}
inline void UpdateSpatialInterestMessage::unsafe_arena_set_allocated_query(
    ::channeldpb::SpatialInterestQuery* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.UpdateSpatialInterestMessage.query)
}
inline ::channeldpb::SpatialInterestQuery* UpdateSpatialInterestMessage::release_query() {
  
  ::channeldpb::SpatialInterestQuery* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::SpatialInterestQuery* UpdateSpatialInterestMessage::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:channeldpb.UpdateSpatialInterestMessage.query)
  
  ::channeldpb::SpatialInterestQuery* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::channeldpb::SpatialInterestQuery* UpdateSpatialInterestMessage::_internal_mutable_query() {
  
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::SpatialInterestQuery>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::channeldpb::SpatialInterestQuery* UpdateSpatialInterestMessage::mutable_query() {
  ::channeldpb::SpatialInterestQuery* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:channeldpb.UpdateSpatialInterestMessage.query)
  return _msg;
}
inline void UpdateSpatialInterestMessage::set_allocated_query(::channeldpb::SpatialInterestQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.UpdateSpatialInterestMessage.query)
}

// -------------------------------------------------------------------

// DebugGetSpatialRegionsMessage

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channeldpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::channeldpb::AuthResultMessage_AuthResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::AuthResultMessage_AuthResult>() {
  return ::channeldpb::AuthResultMessage_AuthResult_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::BroadcastType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::BroadcastType>() {
  return ::channeldpb::BroadcastType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::ConnectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::ConnectionType>() {
  return ::channeldpb::ConnectionType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::ChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::ChannelType>() {
  return ::channeldpb::ChannelType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::MessageType>() {
  return ::channeldpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::CompressionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::CompressionType>() {
  return ::channeldpb::CompressionType_descriptor();
}
template <> struct is_proto_enum< ::channeldpb::ChannelDataAccess> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeldpb::ChannelDataAccess>() {
  return ::channeldpb::ChannelDataAccess_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_channeld_2eproto

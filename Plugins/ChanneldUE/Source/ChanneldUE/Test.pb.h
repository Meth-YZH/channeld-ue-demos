// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace testpb {
class TestAnyMessage;
struct TestAnyMessageDefaultTypeInternal;
extern TestAnyMessageDefaultTypeInternal _TestAnyMessage_default_instance_;
class TestAnyMessage_Type1;
struct TestAnyMessage_Type1DefaultTypeInternal;
extern TestAnyMessage_Type1DefaultTypeInternal _TestAnyMessage_Type1_default_instance_;
class TestAnyMessage_Type2;
struct TestAnyMessage_Type2DefaultTypeInternal;
extern TestAnyMessage_Type2DefaultTypeInternal _TestAnyMessage_Type2_default_instance_;
class TestChannelDataMessage;
struct TestChannelDataMessageDefaultTypeInternal;
extern TestChannelDataMessageDefaultTypeInternal _TestChannelDataMessage_default_instance_;
class TestFieldMaskMessage;
struct TestFieldMaskMessageDefaultTypeInternal;
extern TestFieldMaskMessageDefaultTypeInternal _TestFieldMaskMessage_default_instance_;
class TestFieldMaskMessage_Kv1Entry_DoNotUse;
struct TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal;
extern TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal _TestFieldMaskMessage_Kv1Entry_DoNotUse_default_instance_;
class TestFieldMaskMessage_Kv2Entry_DoNotUse;
struct TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal;
extern TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal _TestFieldMaskMessage_Kv2Entry_DoNotUse_default_instance_;
class TestFieldMaskMessage_NestedMessage;
struct TestFieldMaskMessage_NestedMessageDefaultTypeInternal;
extern TestFieldMaskMessage_NestedMessageDefaultTypeInternal _TestFieldMaskMessage_NestedMessage_default_instance_;
class TestMapMessage;
struct TestMapMessageDefaultTypeInternal;
extern TestMapMessageDefaultTypeInternal _TestMapMessage_default_instance_;
class TestMapMessage_Kv2Entry_DoNotUse;
struct TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal;
extern TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal _TestMapMessage_Kv2Entry_DoNotUse_default_instance_;
class TestMapMessage_KvEntry_DoNotUse;
struct TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal;
extern TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal _TestMapMessage_KvEntry_DoNotUse_default_instance_;
class TestMapMessage_StringWrapper;
struct TestMapMessage_StringWrapperDefaultTypeInternal;
extern TestMapMessage_StringWrapperDefaultTypeInternal _TestMapMessage_StringWrapper_default_instance_;
class TestMergeMessage;
struct TestMergeMessageDefaultTypeInternal;
extern TestMergeMessageDefaultTypeInternal _TestMergeMessage_default_instance_;
class TestMergeMessage_KvEntry_DoNotUse;
struct TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal;
extern TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal _TestMergeMessage_KvEntry_DoNotUse_default_instance_;
class TestMergeMessage_StringWrapper;
struct TestMergeMessage_StringWrapperDefaultTypeInternal;
extern TestMergeMessage_StringWrapperDefaultTypeInternal _TestMergeMessage_StringWrapper_default_instance_;
}  // namespace testpb
PROTOBUF_NAMESPACE_OPEN
template<> ::testpb::TestAnyMessage* Arena::CreateMaybeMessage<::testpb::TestAnyMessage>(Arena*);
template<> ::testpb::TestAnyMessage_Type1* Arena::CreateMaybeMessage<::testpb::TestAnyMessage_Type1>(Arena*);
template<> ::testpb::TestAnyMessage_Type2* Arena::CreateMaybeMessage<::testpb::TestAnyMessage_Type2>(Arena*);
template<> ::testpb::TestChannelDataMessage* Arena::CreateMaybeMessage<::testpb::TestChannelDataMessage>(Arena*);
template<> ::testpb::TestFieldMaskMessage* Arena::CreateMaybeMessage<::testpb::TestFieldMaskMessage>(Arena*);
template<> ::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse* Arena::CreateMaybeMessage<::testpb::TestFieldMaskMessage_Kv1Entry_DoNotUse>(Arena*);
template<> ::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse* Arena::CreateMaybeMessage<::testpb::TestFieldMaskMessage_Kv2Entry_DoNotUse>(Arena*);
template<> ::testpb::TestFieldMaskMessage_NestedMessage* Arena::CreateMaybeMessage<::testpb::TestFieldMaskMessage_NestedMessage>(Arena*);
template<> ::testpb::TestMapMessage* Arena::CreateMaybeMessage<::testpb::TestMapMessage>(Arena*);
template<> ::testpb::TestMapMessage_Kv2Entry_DoNotUse* Arena::CreateMaybeMessage<::testpb::TestMapMessage_Kv2Entry_DoNotUse>(Arena*);
template<> ::testpb::TestMapMessage_KvEntry_DoNotUse* Arena::CreateMaybeMessage<::testpb::TestMapMessage_KvEntry_DoNotUse>(Arena*);
template<> ::testpb::TestMapMessage_StringWrapper* Arena::CreateMaybeMessage<::testpb::TestMapMessage_StringWrapper>(Arena*);
template<> ::testpb::TestMergeMessage* Arena::CreateMaybeMessage<::testpb::TestMergeMessage>(Arena*);
template<> ::testpb::TestMergeMessage_KvEntry_DoNotUse* Arena::CreateMaybeMessage<::testpb::TestMergeMessage_KvEntry_DoNotUse>(Arena*);
template<> ::testpb::TestMergeMessage_StringWrapper* Arena::CreateMaybeMessage<::testpb::TestMergeMessage_StringWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace testpb {

// ===================================================================

class TestChannelDataMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestChannelDataMessage) */ {
 public:
  inline TestChannelDataMessage() : TestChannelDataMessage(nullptr) {}
  ~TestChannelDataMessage() override;
  explicit PROTOBUF_CONSTEXPR TestChannelDataMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestChannelDataMessage(const TestChannelDataMessage& from);
  TestChannelDataMessage(TestChannelDataMessage&& from) noexcept
    : TestChannelDataMessage() {
    *this = ::std::move(from);
  }

  inline TestChannelDataMessage& operator=(const TestChannelDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestChannelDataMessage& operator=(TestChannelDataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestChannelDataMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestChannelDataMessage* internal_default_instance() {
    return reinterpret_cast<const TestChannelDataMessage*>(
               &_TestChannelDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestChannelDataMessage& a, TestChannelDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestChannelDataMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestChannelDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestChannelDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestChannelDataMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestChannelDataMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestChannelDataMessage& from) {
    TestChannelDataMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestChannelDataMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestChannelDataMessage";
  }
  protected:
  explicit TestChannelDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 num = 2;
  void clear_num();
  uint32_t num() const;
  void set_num(uint32_t value);
  private:
  uint32_t _internal_num() const;
  void _internal_set_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testpb.TestChannelDataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    uint32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestAnyMessage_Type1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestAnyMessage.Type1) */ {
 public:
  inline TestAnyMessage_Type1() : TestAnyMessage_Type1(nullptr) {}
  ~TestAnyMessage_Type1() override;
  explicit PROTOBUF_CONSTEXPR TestAnyMessage_Type1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAnyMessage_Type1(const TestAnyMessage_Type1& from);
  TestAnyMessage_Type1(TestAnyMessage_Type1&& from) noexcept
    : TestAnyMessage_Type1() {
    *this = ::std::move(from);
  }

  inline TestAnyMessage_Type1& operator=(const TestAnyMessage_Type1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAnyMessage_Type1& operator=(TestAnyMessage_Type1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAnyMessage_Type1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAnyMessage_Type1* internal_default_instance() {
    return reinterpret_cast<const TestAnyMessage_Type1*>(
               &_TestAnyMessage_Type1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestAnyMessage_Type1& a, TestAnyMessage_Type1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAnyMessage_Type1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAnyMessage_Type1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAnyMessage_Type1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAnyMessage_Type1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAnyMessage_Type1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAnyMessage_Type1& from) {
    TestAnyMessage_Type1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAnyMessage_Type1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestAnyMessage.Type1";
  }
  protected:
  explicit TestAnyMessage_Type1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:testpb.TestAnyMessage.Type1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestAnyMessage_Type2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestAnyMessage.Type2) */ {
 public:
  inline TestAnyMessage_Type2() : TestAnyMessage_Type2(nullptr) {}
  ~TestAnyMessage_Type2() override;
  explicit PROTOBUF_CONSTEXPR TestAnyMessage_Type2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAnyMessage_Type2(const TestAnyMessage_Type2& from);
  TestAnyMessage_Type2(TestAnyMessage_Type2&& from) noexcept
    : TestAnyMessage_Type2() {
    *this = ::std::move(from);
  }

  inline TestAnyMessage_Type2& operator=(const TestAnyMessage_Type2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAnyMessage_Type2& operator=(TestAnyMessage_Type2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAnyMessage_Type2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAnyMessage_Type2* internal_default_instance() {
    return reinterpret_cast<const TestAnyMessage_Type2*>(
               &_TestAnyMessage_Type2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestAnyMessage_Type2& a, TestAnyMessage_Type2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAnyMessage_Type2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAnyMessage_Type2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAnyMessage_Type2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAnyMessage_Type2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAnyMessage_Type2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAnyMessage_Type2& from) {
    TestAnyMessage_Type2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAnyMessage_Type2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestAnyMessage.Type2";
  }
  protected:
  explicit TestAnyMessage_Type2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:testpb.TestAnyMessage.Type2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestAnyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestAnyMessage) */ {
 public:
  inline TestAnyMessage() : TestAnyMessage(nullptr) {}
  ~TestAnyMessage() override;
  explicit PROTOBUF_CONSTEXPR TestAnyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAnyMessage(const TestAnyMessage& from);
  TestAnyMessage(TestAnyMessage&& from) noexcept
    : TestAnyMessage() {
    *this = ::std::move(from);
  }

  inline TestAnyMessage& operator=(const TestAnyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAnyMessage& operator=(TestAnyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAnyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAnyMessage* internal_default_instance() {
    return reinterpret_cast<const TestAnyMessage*>(
               &_TestAnyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestAnyMessage& a, TestAnyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAnyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAnyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAnyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAnyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAnyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAnyMessage& from) {
    TestAnyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAnyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestAnyMessage";
  }
  protected:
  explicit TestAnyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestAnyMessage_Type1 Type1;
  typedef TestAnyMessage_Type2 Type2;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kMsgFieldNumber = 1,
  };
  // repeated .google.protobuf.Any list = 2;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_list();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_list(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_list();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& list(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      list() const;

  // .google.protobuf.Any msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::PROTOBUF_NAMESPACE_ID::Any& msg() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_msg();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_msg();
  void set_allocated_msg(::PROTOBUF_NAMESPACE_ID::Any* msg);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_msg() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::PROTOBUF_NAMESPACE_ID::Any* msg);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_msg();

  // @@protoc_insertion_point(class_scope:testpb.TestAnyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > list_;
    ::PROTOBUF_NAMESPACE_ID::Any* msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestMergeMessage_StringWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestMergeMessage.StringWrapper) */ {
 public:
  inline TestMergeMessage_StringWrapper() : TestMergeMessage_StringWrapper(nullptr) {}
  ~TestMergeMessage_StringWrapper() override;
  explicit PROTOBUF_CONSTEXPR TestMergeMessage_StringWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMergeMessage_StringWrapper(const TestMergeMessage_StringWrapper& from);
  TestMergeMessage_StringWrapper(TestMergeMessage_StringWrapper&& from) noexcept
    : TestMergeMessage_StringWrapper() {
    *this = ::std::move(from);
  }

  inline TestMergeMessage_StringWrapper& operator=(const TestMergeMessage_StringWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMergeMessage_StringWrapper& operator=(TestMergeMessage_StringWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMergeMessage_StringWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMergeMessage_StringWrapper* internal_default_instance() {
    return reinterpret_cast<const TestMergeMessage_StringWrapper*>(
               &_TestMergeMessage_StringWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestMergeMessage_StringWrapper& a, TestMergeMessage_StringWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMergeMessage_StringWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMergeMessage_StringWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMergeMessage_StringWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMergeMessage_StringWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMergeMessage_StringWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMergeMessage_StringWrapper& from) {
    TestMergeMessage_StringWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMergeMessage_StringWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestMergeMessage.StringWrapper";
  }
  protected:
  explicit TestMergeMessage_StringWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRemovedFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:testpb.TestMergeMessage.StringWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    bool removed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestMergeMessage_KvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMergeMessage_KvEntry_DoNotUse, 
    int64_t, ::testpb::TestMergeMessage_StringWrapper,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMergeMessage_KvEntry_DoNotUse, 
    int64_t, ::testpb::TestMergeMessage_StringWrapper,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestMergeMessage_KvEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestMergeMessage_KvEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMergeMessage_KvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMergeMessage_KvEntry_DoNotUse& other);
  static const TestMergeMessage_KvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMergeMessage_KvEntry_DoNotUse*>(&_TestMergeMessage_KvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class TestMergeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestMergeMessage) */ {
 public:
  inline TestMergeMessage() : TestMergeMessage(nullptr) {}
  ~TestMergeMessage() override;
  explicit PROTOBUF_CONSTEXPR TestMergeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMergeMessage(const TestMergeMessage& from);
  TestMergeMessage(TestMergeMessage&& from) noexcept
    : TestMergeMessage() {
    *this = ::std::move(from);
  }

  inline TestMergeMessage& operator=(const TestMergeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMergeMessage& operator=(TestMergeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMergeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMergeMessage* internal_default_instance() {
    return reinterpret_cast<const TestMergeMessage*>(
               &_TestMergeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TestMergeMessage& a, TestMergeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMergeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMergeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMergeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMergeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMergeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMergeMessage& from) {
    TestMergeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMergeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestMergeMessage";
  }
  protected:
  explicit TestMergeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMergeMessage_StringWrapper StringWrapper;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kKvFieldNumber = 2,
  };
  // repeated string list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();
  private:
  const std::string& _internal_list(int index) const;
  std::string* _internal_add_list();
  public:

  // map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
  int kv_size() const;
  private:
  int _internal_kv_size() const;
  public:
  void clear_kv();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >&
      _internal_kv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >*
      _internal_mutable_kv();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >*
      mutable_kv();

  // @@protoc_insertion_point(class_scope:testpb.TestMergeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMergeMessage_KvEntry_DoNotUse,
        int64_t, ::testpb::TestMergeMessage_StringWrapper,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> kv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestMapMessage_KvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMapMessage_KvEntry_DoNotUse, 
    uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMapMessage_KvEntry_DoNotUse, 
    uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestMapMessage_KvEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestMapMessage_KvEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMapMessage_KvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMapMessage_KvEntry_DoNotUse& other);
  static const TestMapMessage_KvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMapMessage_KvEntry_DoNotUse*>(&_TestMapMessage_KvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "testpb.TestMapMessage.KvEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class TestMapMessage_StringWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestMapMessage.StringWrapper) */ {
 public:
  inline TestMapMessage_StringWrapper() : TestMapMessage_StringWrapper(nullptr) {}
  ~TestMapMessage_StringWrapper() override;
  explicit PROTOBUF_CONSTEXPR TestMapMessage_StringWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMapMessage_StringWrapper(const TestMapMessage_StringWrapper& from);
  TestMapMessage_StringWrapper(TestMapMessage_StringWrapper&& from) noexcept
    : TestMapMessage_StringWrapper() {
    *this = ::std::move(from);
  }

  inline TestMapMessage_StringWrapper& operator=(const TestMapMessage_StringWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMapMessage_StringWrapper& operator=(TestMapMessage_StringWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMapMessage_StringWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMapMessage_StringWrapper* internal_default_instance() {
    return reinterpret_cast<const TestMapMessage_StringWrapper*>(
               &_TestMapMessage_StringWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TestMapMessage_StringWrapper& a, TestMapMessage_StringWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMapMessage_StringWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMapMessage_StringWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMapMessage_StringWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMapMessage_StringWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMapMessage_StringWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMapMessage_StringWrapper& from) {
    TestMapMessage_StringWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMapMessage_StringWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestMapMessage.StringWrapper";
  }
  protected:
  explicit TestMapMessage_StringWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 num = 2;
  void clear_num();
  int64_t num() const;
  void set_num(int64_t value);
  private:
  int64_t _internal_num() const;
  void _internal_set_num(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:testpb.TestMapMessage.StringWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int64_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestMapMessage_Kv2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMapMessage_Kv2Entry_DoNotUse, 
    uint32_t, ::testpb::TestMapMessage_StringWrapper,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestMapMessage_Kv2Entry_DoNotUse, 
    uint32_t, ::testpb::TestMapMessage_StringWrapper,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestMapMessage_Kv2Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestMapMessage_Kv2Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestMapMessage_Kv2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestMapMessage_Kv2Entry_DoNotUse& other);
  static const TestMapMessage_Kv2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMapMessage_Kv2Entry_DoNotUse*>(&_TestMapMessage_Kv2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class TestMapMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestMapMessage) */ {
 public:
  inline TestMapMessage() : TestMapMessage(nullptr) {}
  ~TestMapMessage() override;
  explicit PROTOBUF_CONSTEXPR TestMapMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestMapMessage(const TestMapMessage& from);
  TestMapMessage(TestMapMessage&& from) noexcept
    : TestMapMessage() {
    *this = ::std::move(from);
  }

  inline TestMapMessage& operator=(const TestMapMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMapMessage& operator=(TestMapMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMapMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMapMessage* internal_default_instance() {
    return reinterpret_cast<const TestMapMessage*>(
               &_TestMapMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TestMapMessage& a, TestMapMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMapMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMapMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMapMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestMapMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestMapMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestMapMessage& from) {
    TestMapMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMapMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestMapMessage";
  }
  protected:
  explicit TestMapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestMapMessage_StringWrapper StringWrapper;

  // accessors -------------------------------------------------------

  enum : int {
    kKvFieldNumber = 1,
    kKv2FieldNumber = 2,
  };
  // map<uint32, string> kv = 1;
  int kv_size() const;
  private:
  int _internal_kv_size() const;
  public:
  void clear_kv();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
      _internal_kv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
      _internal_mutable_kv();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
      mutable_kv();

  // map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
  int kv2_size() const;
  private:
  int _internal_kv2_size() const;
  public:
  void clear_kv2();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >&
      _internal_kv2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >*
      _internal_mutable_kv2();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >&
      kv2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >*
      mutable_kv2();

  // @@protoc_insertion_point(class_scope:testpb.TestMapMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMapMessage_KvEntry_DoNotUse,
        uint32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> kv_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestMapMessage_Kv2Entry_DoNotUse,
        uint32_t, ::testpb::TestMapMessage_StringWrapper,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> kv2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestFieldMaskMessage_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestFieldMaskMessage.NestedMessage) */ {
 public:
  inline TestFieldMaskMessage_NestedMessage() : TestFieldMaskMessage_NestedMessage(nullptr) {}
  ~TestFieldMaskMessage_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestFieldMaskMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestFieldMaskMessage_NestedMessage(const TestFieldMaskMessage_NestedMessage& from);
  TestFieldMaskMessage_NestedMessage(TestFieldMaskMessage_NestedMessage&& from) noexcept
    : TestFieldMaskMessage_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestFieldMaskMessage_NestedMessage& operator=(const TestFieldMaskMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestFieldMaskMessage_NestedMessage& operator=(TestFieldMaskMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestFieldMaskMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestFieldMaskMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestFieldMaskMessage_NestedMessage*>(
               &_TestFieldMaskMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TestFieldMaskMessage_NestedMessage& a, TestFieldMaskMessage_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestFieldMaskMessage_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestFieldMaskMessage_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestFieldMaskMessage_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestFieldMaskMessage_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestFieldMaskMessage_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestFieldMaskMessage_NestedMessage& from) {
    TestFieldMaskMessage_NestedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestFieldMaskMessage_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestFieldMaskMessage.NestedMessage";
  }
  protected:
  explicit TestFieldMaskMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP1FieldNumber = 1,
    kP2FieldNumber = 2,
  };
  // int64 p1 = 1;
  void clear_p1();
  int64_t p1() const;
  void set_p1(int64_t value);
  private:
  int64_t _internal_p1() const;
  void _internal_set_p1(int64_t value);
  public:

  // uint32 p2 = 2;
  void clear_p2();
  uint32_t p2() const;
  void set_p2(uint32_t value);
  private:
  uint32_t _internal_p2() const;
  void _internal_set_p2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:testpb.TestFieldMaskMessage.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t p1_;
    uint32_t p2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestFieldMaskMessage_Kv1Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestFieldMaskMessage_Kv1Entry_DoNotUse, 
    int64_t, ::testpb::TestFieldMaskMessage_NestedMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestFieldMaskMessage_Kv1Entry_DoNotUse, 
    int64_t, ::testpb::TestFieldMaskMessage_NestedMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestFieldMaskMessage_Kv1Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestFieldMaskMessage_Kv1Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestFieldMaskMessage_Kv1Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestFieldMaskMessage_Kv1Entry_DoNotUse& other);
  static const TestFieldMaskMessage_Kv1Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestFieldMaskMessage_Kv1Entry_DoNotUse*>(&_TestFieldMaskMessage_Kv1Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class TestFieldMaskMessage_Kv2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestFieldMaskMessage_Kv2Entry_DoNotUse, 
    int64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestFieldMaskMessage_Kv2Entry_DoNotUse, 
    int64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestFieldMaskMessage_Kv2Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestFieldMaskMessage_Kv2Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestFieldMaskMessage_Kv2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestFieldMaskMessage_Kv2Entry_DoNotUse& other);
  static const TestFieldMaskMessage_Kv2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestFieldMaskMessage_Kv2Entry_DoNotUse*>(&_TestFieldMaskMessage_Kv2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "testpb.TestFieldMaskMessage.Kv2Entry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};

// -------------------------------------------------------------------

class TestFieldMaskMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:testpb.TestFieldMaskMessage) */ {
 public:
  inline TestFieldMaskMessage() : TestFieldMaskMessage(nullptr) {}
  ~TestFieldMaskMessage() override;
  explicit PROTOBUF_CONSTEXPR TestFieldMaskMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestFieldMaskMessage(const TestFieldMaskMessage& from);
  TestFieldMaskMessage(TestFieldMaskMessage&& from) noexcept
    : TestFieldMaskMessage() {
    *this = ::std::move(from);
  }

  inline TestFieldMaskMessage& operator=(const TestFieldMaskMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestFieldMaskMessage& operator=(TestFieldMaskMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestFieldMaskMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestFieldMaskMessage* internal_default_instance() {
    return reinterpret_cast<const TestFieldMaskMessage*>(
               &_TestFieldMaskMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TestFieldMaskMessage& a, TestFieldMaskMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestFieldMaskMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestFieldMaskMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestFieldMaskMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestFieldMaskMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestFieldMaskMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestFieldMaskMessage& from) {
    TestFieldMaskMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestFieldMaskMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "testpb.TestFieldMaskMessage";
  }
  protected:
  explicit TestFieldMaskMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestFieldMaskMessage_NestedMessage NestedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kKv1FieldNumber = 4,
    kKv2FieldNumber = 5,
    kNameFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::testpb::TestFieldMaskMessage_NestedMessage* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >*
      mutable_list();
  private:
  const ::testpb::TestFieldMaskMessage_NestedMessage& _internal_list(int index) const;
  ::testpb::TestFieldMaskMessage_NestedMessage* _internal_add_list();
  public:
  const ::testpb::TestFieldMaskMessage_NestedMessage& list(int index) const;
  ::testpb::TestFieldMaskMessage_NestedMessage* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >&
      list() const;

  // map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
  int kv1_size() const;
  private:
  int _internal_kv1_size() const;
  public:
  void clear_kv1();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >&
      _internal_kv1() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >*
      _internal_mutable_kv1();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >&
      kv1() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >*
      mutable_kv1();

  // map<int64, string> kv2 = 5;
  int kv2_size() const;
  private:
  int _internal_kv2_size() const;
  public:
  void clear_kv2();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
      _internal_kv2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
      _internal_mutable_kv2();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
      kv2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
      mutable_kv2();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::testpb::TestFieldMaskMessage_NestedMessage& msg() const;
  PROTOBUF_NODISCARD ::testpb::TestFieldMaskMessage_NestedMessage* release_msg();
  ::testpb::TestFieldMaskMessage_NestedMessage* mutable_msg();
  void set_allocated_msg(::testpb::TestFieldMaskMessage_NestedMessage* msg);
  private:
  const ::testpb::TestFieldMaskMessage_NestedMessage& _internal_msg() const;
  ::testpb::TestFieldMaskMessage_NestedMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::testpb::TestFieldMaskMessage_NestedMessage* msg);
  ::testpb::TestFieldMaskMessage_NestedMessage* unsafe_arena_release_msg();

  // @@protoc_insertion_point(class_scope:testpb.TestFieldMaskMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage > list_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestFieldMaskMessage_Kv1Entry_DoNotUse,
        int64_t, ::testpb::TestFieldMaskMessage_NestedMessage,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> kv1_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestFieldMaskMessage_Kv2Entry_DoNotUse,
        int64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> kv2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::testpb::TestFieldMaskMessage_NestedMessage* msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestChannelDataMessage

// string text = 1;
inline void TestChannelDataMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TestChannelDataMessage::text() const {
  // @@protoc_insertion_point(field_get:testpb.TestChannelDataMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestChannelDataMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testpb.TestChannelDataMessage.text)
}
inline std::string* TestChannelDataMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:testpb.TestChannelDataMessage.text)
  return _s;
}
inline const std::string& TestChannelDataMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TestChannelDataMessage::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TestChannelDataMessage::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TestChannelDataMessage::release_text() {
  // @@protoc_insertion_point(field_release:testpb.TestChannelDataMessage.text)
  return _impl_.text_.Release();
}
inline void TestChannelDataMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testpb.TestChannelDataMessage.text)
}

// uint32 num = 2;
inline void TestChannelDataMessage::clear_num() {
  _impl_.num_ = 0u;
}
inline uint32_t TestChannelDataMessage::_internal_num() const {
  return _impl_.num_;
}
inline uint32_t TestChannelDataMessage::num() const {
  // @@protoc_insertion_point(field_get:testpb.TestChannelDataMessage.num)
  return _internal_num();
}
inline void TestChannelDataMessage::_internal_set_num(uint32_t value) {
  
  _impl_.num_ = value;
}
inline void TestChannelDataMessage::set_num(uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:testpb.TestChannelDataMessage.num)
}

// -------------------------------------------------------------------

// TestAnyMessage_Type1

// string value = 1;
inline void TestAnyMessage_Type1::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& TestAnyMessage_Type1::value() const {
  // @@protoc_insertion_point(field_get:testpb.TestAnyMessage.Type1.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAnyMessage_Type1::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testpb.TestAnyMessage.Type1.value)
}
inline std::string* TestAnyMessage_Type1::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:testpb.TestAnyMessage.Type1.value)
  return _s;
}
inline const std::string& TestAnyMessage_Type1::_internal_value() const {
  return _impl_.value_.Get();
}
inline void TestAnyMessage_Type1::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAnyMessage_Type1::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAnyMessage_Type1::release_value() {
  // @@protoc_insertion_point(field_release:testpb.TestAnyMessage.Type1.value)
  return _impl_.value_.Release();
}
inline void TestAnyMessage_Type1::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testpb.TestAnyMessage.Type1.value)
}

// -------------------------------------------------------------------

// TestAnyMessage_Type2

// int64 value = 1;
inline void TestAnyMessage_Type2::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t TestAnyMessage_Type2::_internal_value() const {
  return _impl_.value_;
}
inline int64_t TestAnyMessage_Type2::value() const {
  // @@protoc_insertion_point(field_get:testpb.TestAnyMessage.Type2.value)
  return _internal_value();
}
inline void TestAnyMessage_Type2::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void TestAnyMessage_Type2::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:testpb.TestAnyMessage.Type2.value)
}

// -------------------------------------------------------------------

// TestAnyMessage

// .google.protobuf.Any msg = 1;
inline bool TestAnyMessage::_internal_has_msg() const {
  return this != internal_default_instance() && _impl_.msg_ != nullptr;
}
inline bool TestAnyMessage::has_msg() const {
  return _internal_has_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestAnyMessage::_internal_msg() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestAnyMessage::msg() const {
  // @@protoc_insertion_point(field_get:testpb.TestAnyMessage.msg)
  return _internal_msg();
}
inline void TestAnyMessage::unsafe_arena_set_allocated_msg(
    ::PROTOBUF_NAMESPACE_ID::Any* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testpb.TestAnyMessage.msg)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::release_msg() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:testpb.TestAnyMessage.msg)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::_internal_mutable_msg() {
  
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::mutable_msg() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:testpb.TestAnyMessage.msg)
  return _msg;
}
inline void TestAnyMessage::set_allocated_msg(::PROTOBUF_NAMESPACE_ID::Any* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg));
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:testpb.TestAnyMessage.msg)
}

// repeated .google.protobuf.Any list = 2;
inline int TestAnyMessage::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int TestAnyMessage::list_size() const {
  return _internal_list_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:testpb.TestAnyMessage.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
TestAnyMessage::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:testpb.TestAnyMessage.list)
  return &_impl_.list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestAnyMessage::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TestAnyMessage::list(int index) const {
  // @@protoc_insertion_point(field_get:testpb.TestAnyMessage.list)
  return _internal_list(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TestAnyMessage::add_list() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:testpb.TestAnyMessage.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
TestAnyMessage::list() const {
  // @@protoc_insertion_point(field_list:testpb.TestAnyMessage.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// TestMergeMessage_StringWrapper

// bool removed = 1;
inline void TestMergeMessage_StringWrapper::clear_removed() {
  _impl_.removed_ = false;
}
inline bool TestMergeMessage_StringWrapper::_internal_removed() const {
  return _impl_.removed_;
}
inline bool TestMergeMessage_StringWrapper::removed() const {
  // @@protoc_insertion_point(field_get:testpb.TestMergeMessage.StringWrapper.removed)
  return _internal_removed();
}
inline void TestMergeMessage_StringWrapper::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void TestMergeMessage_StringWrapper::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:testpb.TestMergeMessage.StringWrapper.removed)
}

// string content = 2;
inline void TestMergeMessage_StringWrapper::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& TestMergeMessage_StringWrapper::content() const {
  // @@protoc_insertion_point(field_get:testpb.TestMergeMessage.StringWrapper.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMergeMessage_StringWrapper::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testpb.TestMergeMessage.StringWrapper.content)
}
inline std::string* TestMergeMessage_StringWrapper::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:testpb.TestMergeMessage.StringWrapper.content)
  return _s;
}
inline const std::string& TestMergeMessage_StringWrapper::_internal_content() const {
  return _impl_.content_.Get();
}
inline void TestMergeMessage_StringWrapper::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMergeMessage_StringWrapper::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMergeMessage_StringWrapper::release_content() {
  // @@protoc_insertion_point(field_release:testpb.TestMergeMessage.StringWrapper.content)
  return _impl_.content_.Release();
}
inline void TestMergeMessage_StringWrapper::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testpb.TestMergeMessage.StringWrapper.content)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestMergeMessage

// repeated string list = 1;
inline int TestMergeMessage::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int TestMergeMessage::list_size() const {
  return _internal_list_size();
}
inline void TestMergeMessage::clear_list() {
  _impl_.list_.Clear();
}
inline std::string* TestMergeMessage::add_list() {
  std::string* _s = _internal_add_list();
  // @@protoc_insertion_point(field_add_mutable:testpb.TestMergeMessage.list)
  return _s;
}
inline const std::string& TestMergeMessage::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const std::string& TestMergeMessage::list(int index) const {
  // @@protoc_insertion_point(field_get:testpb.TestMergeMessage.list)
  return _internal_list(index);
}
inline std::string* TestMergeMessage::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:testpb.TestMergeMessage.list)
  return _impl_.list_.Mutable(index);
}
inline void TestMergeMessage::set_list(int index, const std::string& value) {
  _impl_.list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:testpb.TestMergeMessage.list)
}
inline void TestMergeMessage::set_list(int index, std::string&& value) {
  _impl_.list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:testpb.TestMergeMessage.list)
}
inline void TestMergeMessage::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:testpb.TestMergeMessage.list)
}
inline void TestMergeMessage::set_list(int index, const char* value, size_t size) {
  _impl_.list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:testpb.TestMergeMessage.list)
}
inline std::string* TestMergeMessage::_internal_add_list() {
  return _impl_.list_.Add();
}
inline void TestMergeMessage::add_list(const std::string& value) {
  _impl_.list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:testpb.TestMergeMessage.list)
}
inline void TestMergeMessage::add_list(std::string&& value) {
  _impl_.list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:testpb.TestMergeMessage.list)
}
inline void TestMergeMessage::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:testpb.TestMergeMessage.list)
}
inline void TestMergeMessage::add_list(const char* value, size_t size) {
  _impl_.list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:testpb.TestMergeMessage.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestMergeMessage::list() const {
  // @@protoc_insertion_point(field_list:testpb.TestMergeMessage.list)
  return _impl_.list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestMergeMessage::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:testpb.TestMergeMessage.list)
  return &_impl_.list_;
}

// map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
inline int TestMergeMessage::_internal_kv_size() const {
  return _impl_.kv_.size();
}
inline int TestMergeMessage::kv_size() const {
  return _internal_kv_size();
}
inline void TestMergeMessage::clear_kv() {
  _impl_.kv_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >&
TestMergeMessage::_internal_kv() const {
  return _impl_.kv_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >&
TestMergeMessage::kv() const {
  // @@protoc_insertion_point(field_map:testpb.TestMergeMessage.kv)
  return _internal_kv();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >*
TestMergeMessage::_internal_mutable_kv() {
  return _impl_.kv_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestMergeMessage_StringWrapper >*
TestMergeMessage::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_map:testpb.TestMergeMessage.kv)
  return _internal_mutable_kv();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestMapMessage_StringWrapper

// string content = 1;
inline void TestMapMessage_StringWrapper::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& TestMapMessage_StringWrapper::content() const {
  // @@protoc_insertion_point(field_get:testpb.TestMapMessage.StringWrapper.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestMapMessage_StringWrapper::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testpb.TestMapMessage.StringWrapper.content)
}
inline std::string* TestMapMessage_StringWrapper::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:testpb.TestMapMessage.StringWrapper.content)
  return _s;
}
inline const std::string& TestMapMessage_StringWrapper::_internal_content() const {
  return _impl_.content_.Get();
}
inline void TestMapMessage_StringWrapper::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* TestMapMessage_StringWrapper::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* TestMapMessage_StringWrapper::release_content() {
  // @@protoc_insertion_point(field_release:testpb.TestMapMessage.StringWrapper.content)
  return _impl_.content_.Release();
}
inline void TestMapMessage_StringWrapper::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testpb.TestMapMessage.StringWrapper.content)
}

// int64 num = 2;
inline void TestMapMessage_StringWrapper::clear_num() {
  _impl_.num_ = int64_t{0};
}
inline int64_t TestMapMessage_StringWrapper::_internal_num() const {
  return _impl_.num_;
}
inline int64_t TestMapMessage_StringWrapper::num() const {
  // @@protoc_insertion_point(field_get:testpb.TestMapMessage.StringWrapper.num)
  return _internal_num();
}
inline void TestMapMessage_StringWrapper::_internal_set_num(int64_t value) {
  
  _impl_.num_ = value;
}
inline void TestMapMessage_StringWrapper::set_num(int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:testpb.TestMapMessage.StringWrapper.num)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestMapMessage

// map<uint32, string> kv = 1;
inline int TestMapMessage::_internal_kv_size() const {
  return _impl_.kv_.size();
}
inline int TestMapMessage::kv_size() const {
  return _internal_kv_size();
}
inline void TestMapMessage::clear_kv() {
  _impl_.kv_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
TestMapMessage::_internal_kv() const {
  return _impl_.kv_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
TestMapMessage::kv() const {
  // @@protoc_insertion_point(field_map:testpb.TestMapMessage.kv)
  return _internal_kv();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
TestMapMessage::_internal_mutable_kv() {
  return _impl_.kv_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
TestMapMessage::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_map:testpb.TestMapMessage.kv)
  return _internal_mutable_kv();
}

// map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
inline int TestMapMessage::_internal_kv2_size() const {
  return _impl_.kv2_.size();
}
inline int TestMapMessage::kv2_size() const {
  return _internal_kv2_size();
}
inline void TestMapMessage::clear_kv2() {
  _impl_.kv2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >&
TestMapMessage::_internal_kv2() const {
  return _impl_.kv2_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >&
TestMapMessage::kv2() const {
  // @@protoc_insertion_point(field_map:testpb.TestMapMessage.kv2)
  return _internal_kv2();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >*
TestMapMessage::_internal_mutable_kv2() {
  return _impl_.kv2_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::testpb::TestMapMessage_StringWrapper >*
TestMapMessage::mutable_kv2() {
  // @@protoc_insertion_point(field_mutable_map:testpb.TestMapMessage.kv2)
  return _internal_mutable_kv2();
}

// -------------------------------------------------------------------

// TestFieldMaskMessage_NestedMessage

// int64 p1 = 1;
inline void TestFieldMaskMessage_NestedMessage::clear_p1() {
  _impl_.p1_ = int64_t{0};
}
inline int64_t TestFieldMaskMessage_NestedMessage::_internal_p1() const {
  return _impl_.p1_;
}
inline int64_t TestFieldMaskMessage_NestedMessage::p1() const {
  // @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.NestedMessage.p1)
  return _internal_p1();
}
inline void TestFieldMaskMessage_NestedMessage::_internal_set_p1(int64_t value) {
  
  _impl_.p1_ = value;
}
inline void TestFieldMaskMessage_NestedMessage::set_p1(int64_t value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:testpb.TestFieldMaskMessage.NestedMessage.p1)
}

// uint32 p2 = 2;
inline void TestFieldMaskMessage_NestedMessage::clear_p2() {
  _impl_.p2_ = 0u;
}
inline uint32_t TestFieldMaskMessage_NestedMessage::_internal_p2() const {
  return _impl_.p2_;
}
inline uint32_t TestFieldMaskMessage_NestedMessage::p2() const {
  // @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.NestedMessage.p2)
  return _internal_p2();
}
inline void TestFieldMaskMessage_NestedMessage::_internal_set_p2(uint32_t value) {
  
  _impl_.p2_ = value;
}
inline void TestFieldMaskMessage_NestedMessage::set_p2(uint32_t value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:testpb.TestFieldMaskMessage.NestedMessage.p2)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestFieldMaskMessage

// string name = 1;
inline void TestFieldMaskMessage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TestFieldMaskMessage::name() const {
  // @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestFieldMaskMessage::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:testpb.TestFieldMaskMessage.name)
}
inline std::string* TestFieldMaskMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:testpb.TestFieldMaskMessage.name)
  return _s;
}
inline const std::string& TestFieldMaskMessage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TestFieldMaskMessage::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestFieldMaskMessage::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestFieldMaskMessage::release_name() {
  // @@protoc_insertion_point(field_release:testpb.TestFieldMaskMessage.name)
  return _impl_.name_.Release();
}
inline void TestFieldMaskMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:testpb.TestFieldMaskMessage.name)
}

// .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
inline bool TestFieldMaskMessage::_internal_has_msg() const {
  return this != internal_default_instance() && _impl_.msg_ != nullptr;
}
inline bool TestFieldMaskMessage::has_msg() const {
  return _internal_has_msg();
}
inline void TestFieldMaskMessage::clear_msg() {
  if (GetArenaForAllocation() == nullptr && _impl_.msg_ != nullptr) {
    delete _impl_.msg_;
  }
  _impl_.msg_ = nullptr;
}
inline const ::testpb::TestFieldMaskMessage_NestedMessage& TestFieldMaskMessage::_internal_msg() const {
  const ::testpb::TestFieldMaskMessage_NestedMessage* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::testpb::TestFieldMaskMessage_NestedMessage&>(
      ::testpb::_TestFieldMaskMessage_NestedMessage_default_instance_);
}
inline const ::testpb::TestFieldMaskMessage_NestedMessage& TestFieldMaskMessage::msg() const {
  // @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.msg)
  return _internal_msg();
}
inline void TestFieldMaskMessage::unsafe_arena_set_allocated_msg(
    ::testpb::TestFieldMaskMessage_NestedMessage* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:testpb.TestFieldMaskMessage.msg)
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::release_msg() {
  
  ::testpb::TestFieldMaskMessage_NestedMessage* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:testpb.TestFieldMaskMessage.msg)
  
  ::testpb::TestFieldMaskMessage_NestedMessage* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::_internal_mutable_msg() {
  
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::testpb::TestFieldMaskMessage_NestedMessage>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::mutable_msg() {
  ::testpb::TestFieldMaskMessage_NestedMessage* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:testpb.TestFieldMaskMessage.msg)
  return _msg;
}
inline void TestFieldMaskMessage::set_allocated_msg(::testpb::TestFieldMaskMessage_NestedMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:testpb.TestFieldMaskMessage.msg)
}

// repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
inline int TestFieldMaskMessage::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int TestFieldMaskMessage::list_size() const {
  return _internal_list_size();
}
inline void TestFieldMaskMessage::clear_list() {
  _impl_.list_.Clear();
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:testpb.TestFieldMaskMessage.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >*
TestFieldMaskMessage::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:testpb.TestFieldMaskMessage.list)
  return &_impl_.list_;
}
inline const ::testpb::TestFieldMaskMessage_NestedMessage& TestFieldMaskMessage::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::testpb::TestFieldMaskMessage_NestedMessage& TestFieldMaskMessage::list(int index) const {
  // @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.list)
  return _internal_list(index);
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::add_list() {
  ::testpb::TestFieldMaskMessage_NestedMessage* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:testpb.TestFieldMaskMessage.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >&
TestFieldMaskMessage::list() const {
  // @@protoc_insertion_point(field_list:testpb.TestFieldMaskMessage.list)
  return _impl_.list_;
}

// map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
inline int TestFieldMaskMessage::_internal_kv1_size() const {
  return _impl_.kv1_.size();
}
inline int TestFieldMaskMessage::kv1_size() const {
  return _internal_kv1_size();
}
inline void TestFieldMaskMessage::clear_kv1() {
  _impl_.kv1_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >&
TestFieldMaskMessage::_internal_kv1() const {
  return _impl_.kv1_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >&
TestFieldMaskMessage::kv1() const {
  // @@protoc_insertion_point(field_map:testpb.TestFieldMaskMessage.kv1)
  return _internal_kv1();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >*
TestFieldMaskMessage::_internal_mutable_kv1() {
  return _impl_.kv1_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::testpb::TestFieldMaskMessage_NestedMessage >*
TestFieldMaskMessage::mutable_kv1() {
  // @@protoc_insertion_point(field_mutable_map:testpb.TestFieldMaskMessage.kv1)
  return _internal_mutable_kv1();
}

// map<int64, string> kv2 = 5;
inline int TestFieldMaskMessage::_internal_kv2_size() const {
  return _impl_.kv2_.size();
}
inline int TestFieldMaskMessage::kv2_size() const {
  return _internal_kv2_size();
}
inline void TestFieldMaskMessage::clear_kv2() {
  _impl_.kv2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
TestFieldMaskMessage::_internal_kv2() const {
  return _impl_.kv2_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
TestFieldMaskMessage::kv2() const {
  // @@protoc_insertion_point(field_map:testpb.TestFieldMaskMessage.kv2)
  return _internal_kv2();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
TestFieldMaskMessage::_internal_mutable_kv2() {
  return _impl_.kv2_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
TestFieldMaskMessage::mutable_kv2() {
  // @@protoc_insertion_point(field_mutable_map:testpb.TestFieldMaskMessage.kv2)
  return _internal_mutable_kv2();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace testpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto

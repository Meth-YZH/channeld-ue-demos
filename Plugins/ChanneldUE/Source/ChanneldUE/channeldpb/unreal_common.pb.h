// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unreal_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unreal_5fcommon_2eproto CHANNELDUE_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct CHANNELDUE_API TableStruct_unreal_5fcommon_2eproto {
  static const uint32_t offsets[];
};
CHANNELDUE_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unreal_5fcommon_2eproto;
namespace channeldpb {
class FVector;
struct FVectorDefaultTypeInternal;
CHANNELDUE_API extern FVectorDefaultTypeInternal _FVector_default_instance_;
class SceneComponentState;
struct SceneComponentStateDefaultTypeInternal;
CHANNELDUE_API extern SceneComponentStateDefaultTypeInternal _SceneComponentState_default_instance_;
}  // namespace channeldpb
PROTOBUF_NAMESPACE_OPEN
template<> CHANNELDUE_API ::channeldpb::FVector* Arena::CreateMaybeMessage<::channeldpb::FVector>(Arena*);
template<> CHANNELDUE_API ::channeldpb::SceneComponentState* Arena::CreateMaybeMessage<::channeldpb::SceneComponentState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace channeldpb {

// ===================================================================

class CHANNELDUE_API FVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.FVector) */ {
 public:
  inline FVector() : FVector(nullptr) {}
  ~FVector() override;
  explicit PROTOBUF_CONSTEXPR FVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FVector(const FVector& from);
  FVector(FVector&& from) noexcept
    : FVector() {
    *this = ::std::move(from);
  }

  inline FVector& operator=(const FVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FVector& operator=(FVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const FVector* internal_default_instance() {
    return reinterpret_cast<const FVector*>(
               &_FVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FVector& a, FVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FVector& from) {
    FVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.FVector";
  }
  protected:
  explicit FVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.FVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class CHANNELDUE_API SceneComponentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:channeldpb.SceneComponentState) */ {
 public:
  inline SceneComponentState() : SceneComponentState(nullptr) {}
  ~SceneComponentState() override;
  explicit PROTOBUF_CONSTEXPR SceneComponentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneComponentState(const SceneComponentState& from);
  SceneComponentState(SceneComponentState&& from) noexcept
    : SceneComponentState() {
    *this = ::std::move(from);
  }

  inline SceneComponentState& operator=(const SceneComponentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneComponentState& operator=(SceneComponentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneComponentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneComponentState* internal_default_instance() {
    return reinterpret_cast<const SceneComponentState*>(
               &_SceneComponentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SceneComponentState& a, SceneComponentState& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneComponentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneComponentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneComponentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneComponentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneComponentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneComponentState& from) {
    SceneComponentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneComponentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "channeldpb.SceneComponentState";
  }
  protected:
  explicit SceneComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachSocketNameFieldNumber = 6,
    kRelativeLocationFieldNumber = 2,
    kRelativeRotationFieldNumber = 3,
    kRelativeScaleFieldNumber = 4,
    kRemovedFieldNumber = 1,
    kIsVisibleFieldNumber = 5,
  };
  // string attachSocketName = 6;
  void clear_attachsocketname();
  const std::string& attachsocketname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachsocketname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachsocketname();
  PROTOBUF_NODISCARD std::string* release_attachsocketname();
  void set_allocated_attachsocketname(std::string* attachsocketname);
  private:
  const std::string& _internal_attachsocketname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachsocketname(const std::string& value);
  std::string* _internal_mutable_attachsocketname();
  public:

  // .channeldpb.FVector relativeLocation = 2;
  bool has_relativelocation() const;
  private:
  bool _internal_has_relativelocation() const;
  public:
  void clear_relativelocation();
  const ::channeldpb::FVector& relativelocation() const;
  PROTOBUF_NODISCARD ::channeldpb::FVector* release_relativelocation();
  ::channeldpb::FVector* mutable_relativelocation();
  void set_allocated_relativelocation(::channeldpb::FVector* relativelocation);
  private:
  const ::channeldpb::FVector& _internal_relativelocation() const;
  ::channeldpb::FVector* _internal_mutable_relativelocation();
  public:
  void unsafe_arena_set_allocated_relativelocation(
      ::channeldpb::FVector* relativelocation);
  ::channeldpb::FVector* unsafe_arena_release_relativelocation();

  // .channeldpb.FVector relativeRotation = 3;
  bool has_relativerotation() const;
  private:
  bool _internal_has_relativerotation() const;
  public:
  void clear_relativerotation();
  const ::channeldpb::FVector& relativerotation() const;
  PROTOBUF_NODISCARD ::channeldpb::FVector* release_relativerotation();
  ::channeldpb::FVector* mutable_relativerotation();
  void set_allocated_relativerotation(::channeldpb::FVector* relativerotation);
  private:
  const ::channeldpb::FVector& _internal_relativerotation() const;
  ::channeldpb::FVector* _internal_mutable_relativerotation();
  public:
  void unsafe_arena_set_allocated_relativerotation(
      ::channeldpb::FVector* relativerotation);
  ::channeldpb::FVector* unsafe_arena_release_relativerotation();

  // .channeldpb.FVector relativeScale = 4;
  bool has_relativescale() const;
  private:
  bool _internal_has_relativescale() const;
  public:
  void clear_relativescale();
  const ::channeldpb::FVector& relativescale() const;
  PROTOBUF_NODISCARD ::channeldpb::FVector* release_relativescale();
  ::channeldpb::FVector* mutable_relativescale();
  void set_allocated_relativescale(::channeldpb::FVector* relativescale);
  private:
  const ::channeldpb::FVector& _internal_relativescale() const;
  ::channeldpb::FVector* _internal_mutable_relativescale();
  public:
  void unsafe_arena_set_allocated_relativescale(
      ::channeldpb::FVector* relativescale);
  ::channeldpb::FVector* unsafe_arena_release_relativescale();

  // bool removed = 1;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // bool isVisible = 5;
  void clear_isvisible();
  bool isvisible() const;
  void set_isvisible(bool value);
  private:
  bool _internal_isvisible() const;
  void _internal_set_isvisible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:channeldpb.SceneComponentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachsocketname_;
    ::channeldpb::FVector* relativelocation_;
    ::channeldpb::FVector* relativerotation_;
    ::channeldpb::FVector* relativescale_;
    bool removed_;
    bool isvisible_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_unreal_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FVector

// float x = 1;
inline void FVector::clear_x() {
  _impl_.x_ = 0;
}
inline float FVector::_internal_x() const {
  return _impl_.x_;
}
inline float FVector::x() const {
  // @@protoc_insertion_point(field_get:channeldpb.FVector.x)
  return _internal_x();
}
inline void FVector::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void FVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:channeldpb.FVector.x)
}

// float y = 2;
inline void FVector::clear_y() {
  _impl_.y_ = 0;
}
inline float FVector::_internal_y() const {
  return _impl_.y_;
}
inline float FVector::y() const {
  // @@protoc_insertion_point(field_get:channeldpb.FVector.y)
  return _internal_y();
}
inline void FVector::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void FVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:channeldpb.FVector.y)
}

// float z = 3;
inline void FVector::clear_z() {
  _impl_.z_ = 0;
}
inline float FVector::_internal_z() const {
  return _impl_.z_;
}
inline float FVector::z() const {
  // @@protoc_insertion_point(field_get:channeldpb.FVector.z)
  return _internal_z();
}
inline void FVector::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void FVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:channeldpb.FVector.z)
}

// -------------------------------------------------------------------

// SceneComponentState

// bool removed = 1;
inline void SceneComponentState::clear_removed() {
  _impl_.removed_ = false;
}
inline bool SceneComponentState::_internal_removed() const {
  return _impl_.removed_;
}
inline bool SceneComponentState::removed() const {
  // @@protoc_insertion_point(field_get:channeldpb.SceneComponentState.removed)
  return _internal_removed();
}
inline void SceneComponentState::_internal_set_removed(bool value) {
  
  _impl_.removed_ = value;
}
inline void SceneComponentState::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:channeldpb.SceneComponentState.removed)
}

// .channeldpb.FVector relativeLocation = 2;
inline bool SceneComponentState::_internal_has_relativelocation() const {
  return this != internal_default_instance() && _impl_.relativelocation_ != nullptr;
}
inline bool SceneComponentState::has_relativelocation() const {
  return _internal_has_relativelocation();
}
inline void SceneComponentState::clear_relativelocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.relativelocation_ != nullptr) {
    delete _impl_.relativelocation_;
  }
  _impl_.relativelocation_ = nullptr;
}
inline const ::channeldpb::FVector& SceneComponentState::_internal_relativelocation() const {
  const ::channeldpb::FVector* p = _impl_.relativelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::FVector&>(
      ::channeldpb::_FVector_default_instance_);
}
inline const ::channeldpb::FVector& SceneComponentState::relativelocation() const {
  // @@protoc_insertion_point(field_get:channeldpb.SceneComponentState.relativeLocation)
  return _internal_relativelocation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativelocation(
    ::channeldpb::FVector* relativelocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativelocation_);
  }
  _impl_.relativelocation_ = relativelocation;
  if (relativelocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SceneComponentState.relativeLocation)
}
inline ::channeldpb::FVector* SceneComponentState::release_relativelocation() {
  
  ::channeldpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::FVector* SceneComponentState::unsafe_arena_release_relativelocation() {
  // @@protoc_insertion_point(field_release:channeldpb.SceneComponentState.relativeLocation)
  
  ::channeldpb::FVector* temp = _impl_.relativelocation_;
  _impl_.relativelocation_ = nullptr;
  return temp;
}
inline ::channeldpb::FVector* SceneComponentState::_internal_mutable_relativelocation() {
  
  if (_impl_.relativelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::FVector>(GetArenaForAllocation());
    _impl_.relativelocation_ = p;
  }
  return _impl_.relativelocation_;
}
inline ::channeldpb::FVector* SceneComponentState::mutable_relativelocation() {
  ::channeldpb::FVector* _msg = _internal_mutable_relativelocation();
  // @@protoc_insertion_point(field_mutable:channeldpb.SceneComponentState.relativeLocation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativelocation(::channeldpb::FVector* relativelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativelocation_;
  }
  if (relativelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativelocation);
    if (message_arena != submessage_arena) {
      relativelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativelocation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relativelocation_ = relativelocation;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SceneComponentState.relativeLocation)
}

// .channeldpb.FVector relativeRotation = 3;
inline bool SceneComponentState::_internal_has_relativerotation() const {
  return this != internal_default_instance() && _impl_.relativerotation_ != nullptr;
}
inline bool SceneComponentState::has_relativerotation() const {
  return _internal_has_relativerotation();
}
inline void SceneComponentState::clear_relativerotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.relativerotation_ != nullptr) {
    delete _impl_.relativerotation_;
  }
  _impl_.relativerotation_ = nullptr;
}
inline const ::channeldpb::FVector& SceneComponentState::_internal_relativerotation() const {
  const ::channeldpb::FVector* p = _impl_.relativerotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::FVector&>(
      ::channeldpb::_FVector_default_instance_);
}
inline const ::channeldpb::FVector& SceneComponentState::relativerotation() const {
  // @@protoc_insertion_point(field_get:channeldpb.SceneComponentState.relativeRotation)
  return _internal_relativerotation();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativerotation(
    ::channeldpb::FVector* relativerotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativerotation_);
  }
  _impl_.relativerotation_ = relativerotation;
  if (relativerotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SceneComponentState.relativeRotation)
}
inline ::channeldpb::FVector* SceneComponentState::release_relativerotation() {
  
  ::channeldpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::FVector* SceneComponentState::unsafe_arena_release_relativerotation() {
  // @@protoc_insertion_point(field_release:channeldpb.SceneComponentState.relativeRotation)
  
  ::channeldpb::FVector* temp = _impl_.relativerotation_;
  _impl_.relativerotation_ = nullptr;
  return temp;
}
inline ::channeldpb::FVector* SceneComponentState::_internal_mutable_relativerotation() {
  
  if (_impl_.relativerotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::FVector>(GetArenaForAllocation());
    _impl_.relativerotation_ = p;
  }
  return _impl_.relativerotation_;
}
inline ::channeldpb::FVector* SceneComponentState::mutable_relativerotation() {
  ::channeldpb::FVector* _msg = _internal_mutable_relativerotation();
  // @@protoc_insertion_point(field_mutable:channeldpb.SceneComponentState.relativeRotation)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativerotation(::channeldpb::FVector* relativerotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativerotation_;
  }
  if (relativerotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativerotation);
    if (message_arena != submessage_arena) {
      relativerotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativerotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relativerotation_ = relativerotation;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SceneComponentState.relativeRotation)
}

// .channeldpb.FVector relativeScale = 4;
inline bool SceneComponentState::_internal_has_relativescale() const {
  return this != internal_default_instance() && _impl_.relativescale_ != nullptr;
}
inline bool SceneComponentState::has_relativescale() const {
  return _internal_has_relativescale();
}
inline void SceneComponentState::clear_relativescale() {
  if (GetArenaForAllocation() == nullptr && _impl_.relativescale_ != nullptr) {
    delete _impl_.relativescale_;
  }
  _impl_.relativescale_ = nullptr;
}
inline const ::channeldpb::FVector& SceneComponentState::_internal_relativescale() const {
  const ::channeldpb::FVector* p = _impl_.relativescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::channeldpb::FVector&>(
      ::channeldpb::_FVector_default_instance_);
}
inline const ::channeldpb::FVector& SceneComponentState::relativescale() const {
  // @@protoc_insertion_point(field_get:channeldpb.SceneComponentState.relativeScale)
  return _internal_relativescale();
}
inline void SceneComponentState::unsafe_arena_set_allocated_relativescale(
    ::channeldpb::FVector* relativescale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relativescale_);
  }
  _impl_.relativescale_ = relativescale;
  if (relativescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:channeldpb.SceneComponentState.relativeScale)
}
inline ::channeldpb::FVector* SceneComponentState::release_relativescale() {
  
  ::channeldpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::channeldpb::FVector* SceneComponentState::unsafe_arena_release_relativescale() {
  // @@protoc_insertion_point(field_release:channeldpb.SceneComponentState.relativeScale)
  
  ::channeldpb::FVector* temp = _impl_.relativescale_;
  _impl_.relativescale_ = nullptr;
  return temp;
}
inline ::channeldpb::FVector* SceneComponentState::_internal_mutable_relativescale() {
  
  if (_impl_.relativescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::channeldpb::FVector>(GetArenaForAllocation());
    _impl_.relativescale_ = p;
  }
  return _impl_.relativescale_;
}
inline ::channeldpb::FVector* SceneComponentState::mutable_relativescale() {
  ::channeldpb::FVector* _msg = _internal_mutable_relativescale();
  // @@protoc_insertion_point(field_mutable:channeldpb.SceneComponentState.relativeScale)
  return _msg;
}
inline void SceneComponentState::set_allocated_relativescale(::channeldpb::FVector* relativescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relativescale_;
  }
  if (relativescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relativescale);
    if (message_arena != submessage_arena) {
      relativescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativescale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relativescale_ = relativescale;
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SceneComponentState.relativeScale)
}

// bool isVisible = 5;
inline void SceneComponentState::clear_isvisible() {
  _impl_.isvisible_ = false;
}
inline bool SceneComponentState::_internal_isvisible() const {
  return _impl_.isvisible_;
}
inline bool SceneComponentState::isvisible() const {
  // @@protoc_insertion_point(field_get:channeldpb.SceneComponentState.isVisible)
  return _internal_isvisible();
}
inline void SceneComponentState::_internal_set_isvisible(bool value) {
  
  _impl_.isvisible_ = value;
}
inline void SceneComponentState::set_isvisible(bool value) {
  _internal_set_isvisible(value);
  // @@protoc_insertion_point(field_set:channeldpb.SceneComponentState.isVisible)
}

// string attachSocketName = 6;
inline void SceneComponentState::clear_attachsocketname() {
  _impl_.attachsocketname_.ClearToEmpty();
}
inline const std::string& SceneComponentState::attachsocketname() const {
  // @@protoc_insertion_point(field_get:channeldpb.SceneComponentState.attachSocketName)
  return _internal_attachsocketname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneComponentState::set_attachsocketname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attachsocketname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:channeldpb.SceneComponentState.attachSocketName)
}
inline std::string* SceneComponentState::mutable_attachsocketname() {
  std::string* _s = _internal_mutable_attachsocketname();
  // @@protoc_insertion_point(field_mutable:channeldpb.SceneComponentState.attachSocketName)
  return _s;
}
inline const std::string& SceneComponentState::_internal_attachsocketname() const {
  return _impl_.attachsocketname_.Get();
}
inline void SceneComponentState::_internal_set_attachsocketname(const std::string& value) {
  
  _impl_.attachsocketname_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneComponentState::_internal_mutable_attachsocketname() {
  
  return _impl_.attachsocketname_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneComponentState::release_attachsocketname() {
  // @@protoc_insertion_point(field_release:channeldpb.SceneComponentState.attachSocketName)
  return _impl_.attachsocketname_.Release();
}
inline void SceneComponentState::set_allocated_attachsocketname(std::string* attachsocketname) {
  if (attachsocketname != nullptr) {
    
  } else {
    
  }
  _impl_.attachsocketname_.SetAllocated(attachsocketname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachsocketname_.IsDefault()) {
    _impl_.attachsocketname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:channeldpb.SceneComponentState.attachSocketName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channeldpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unreal_5fcommon_2eproto

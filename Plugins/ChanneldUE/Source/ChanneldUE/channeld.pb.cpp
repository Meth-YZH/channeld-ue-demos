// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channeld.proto

#ifdef _MSC_VER
#	pragma warning(disable: 4125)
#	pragma warning(disable: 4647)
#	pragma warning(disable: 4668)
#	pragma warning(disable: 4800)
#	pragma warning(disable: 4946)
#endif

#include "channeld.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace channeldpb {
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
PROTOBUF_CONSTEXPR MessagePack::MessagePack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgbody_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelid_)*/0u
  , /*decltype(_impl_.broadcast_)*/0u
  , /*decltype(_impl_.stubid_)*/0u
  , /*decltype(_impl_.msgtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessagePackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessagePackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessagePackDefaultTypeInternal() {}
  union {
    MessagePack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessagePackDefaultTypeInternal _MessagePack_default_instance_;
PROTOBUF_CONSTEXPR ServerForwardMessage::ServerForwardMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientconnid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerForwardMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerForwardMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerForwardMessageDefaultTypeInternal() {}
  union {
    ServerForwardMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerForwardMessageDefaultTypeInternal _ServerForwardMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthMessage::AuthMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playeridentifiertoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logintoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthMessageDefaultTypeInternal() {}
  union {
    AuthMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthMessageDefaultTypeInternal _AuthMessage_default_instance_;
PROTOBUF_CONSTEXPR AuthResultMessage::AuthResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.connid_)*/0u
  , /*decltype(_impl_.compressiontype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthResultMessageDefaultTypeInternal() {}
  union {
    AuthResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthResultMessageDefaultTypeInternal _AuthResultMessage_default_instance_;
PROTOBUF_CONSTEXPR ChannelSubscriptionOptions::ChannelSubscriptionOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datafieldmasks_)*/{}
  , /*decltype(_impl_.dataaccess_)*/0
  , /*decltype(_impl_.fanoutintervalms_)*/0u
  , /*decltype(_impl_.fanoutdelayms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelSubscriptionOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelSubscriptionOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelSubscriptionOptionsDefaultTypeInternal() {}
  union {
    ChannelSubscriptionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelSubscriptionOptionsDefaultTypeInternal _ChannelSubscriptionOptions_default_instance_;
PROTOBUF_CONSTEXPR ChannelDataMergeOptions::ChannelDataMergeOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listsizelimit_)*/0u
  , /*decltype(_impl_.shouldreplacelist_)*/false
  , /*decltype(_impl_.truncatetop_)*/false
  , /*decltype(_impl_.shouldcheckremovablemapfield_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelDataMergeOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDataMergeOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDataMergeOptionsDefaultTypeInternal() {}
  union {
    ChannelDataMergeOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDataMergeOptionsDefaultTypeInternal _ChannelDataMergeOptions_default_instance_;
PROTOBUF_CONSTEXPR CreateChannelMessage::CreateChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suboptions_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.mergeoptions_)*/nullptr
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChannelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChannelMessageDefaultTypeInternal() {}
  union {
    CreateChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChannelMessageDefaultTypeInternal _CreateChannelMessage_default_instance_;
PROTOBUF_CONSTEXPR CreateChannelResultMessage::CreateChannelResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.ownerconnid_)*/0u
  , /*decltype(_impl_.channelid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChannelResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChannelResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChannelResultMessageDefaultTypeInternal() {}
  union {
    CreateChannelResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChannelResultMessageDefaultTypeInternal _CreateChannelResultMessage_default_instance_;
PROTOBUF_CONSTEXPR RemoveChannelMessage::RemoveChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channelid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveChannelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveChannelMessageDefaultTypeInternal() {}
  union {
    RemoveChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveChannelMessageDefaultTypeInternal _RemoveChannelMessage_default_instance_;
PROTOBUF_CONSTEXPR ListChannelMessage::ListChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadatafilters_)*/{}
  , /*decltype(_impl_.typefilter_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListChannelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListChannelMessageDefaultTypeInternal() {}
  union {
    ListChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListChannelMessageDefaultTypeInternal _ListChannelMessage_default_instance_;
PROTOBUF_CONSTEXPR ListChannelResultMessage_ChannelInfo::ListChannelResultMessage_ChannelInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelid_)*/0u
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListChannelResultMessage_ChannelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListChannelResultMessage_ChannelInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListChannelResultMessage_ChannelInfoDefaultTypeInternal() {}
  union {
    ListChannelResultMessage_ChannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListChannelResultMessage_ChannelInfoDefaultTypeInternal _ListChannelResultMessage_ChannelInfo_default_instance_;
PROTOBUF_CONSTEXPR ListChannelResultMessage::ListChannelResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListChannelResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListChannelResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListChannelResultMessageDefaultTypeInternal() {}
  union {
    ListChannelResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListChannelResultMessageDefaultTypeInternal _ListChannelResultMessage_default_instance_;
PROTOBUF_CONSTEXPR SubscribedToChannelMessage::SubscribedToChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.suboptions_)*/nullptr
  , /*decltype(_impl_.connid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribedToChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedToChannelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedToChannelMessageDefaultTypeInternal() {}
  union {
    SubscribedToChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedToChannelMessageDefaultTypeInternal _SubscribedToChannelMessage_default_instance_;
PROTOBUF_CONSTEXPR SubscribedToChannelResultMessage::SubscribedToChannelResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.suboptions_)*/nullptr
  , /*decltype(_impl_.connid_)*/0u
  , /*decltype(_impl_.conntype_)*/0
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribedToChannelResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedToChannelResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedToChannelResultMessageDefaultTypeInternal() {}
  union {
    SubscribedToChannelResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedToChannelResultMessageDefaultTypeInternal _SubscribedToChannelResultMessage_default_instance_;
PROTOBUF_CONSTEXPR UnsubscribedFromChannelMessage::UnsubscribedFromChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsubscribedFromChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribedFromChannelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribedFromChannelMessageDefaultTypeInternal() {}
  union {
    UnsubscribedFromChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribedFromChannelMessageDefaultTypeInternal _UnsubscribedFromChannelMessage_default_instance_;
PROTOBUF_CONSTEXPR UnsubscribedFromChannelResultMessage::UnsubscribedFromChannelResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connid_)*/0u
  , /*decltype(_impl_.conntype_)*/0
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsubscribedFromChannelResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribedFromChannelResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribedFromChannelResultMessageDefaultTypeInternal() {}
  union {
    UnsubscribedFromChannelResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribedFromChannelResultMessageDefaultTypeInternal _UnsubscribedFromChannelResultMessage_default_instance_;
PROTOBUF_CONSTEXPR ChannelDataUpdateMessage::ChannelDataUpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.contextconnid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelDataUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDataUpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDataUpdateMessageDefaultTypeInternal() {}
  union {
    ChannelDataUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDataUpdateMessageDefaultTypeInternal _ChannelDataUpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR DisconnectMessage::DisconnectMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DisconnectMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectMessageDefaultTypeInternal() {}
  union {
    DisconnectMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
PROTOBUF_CONSTEXPR SpatialInfo::SpatialInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpatialInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpatialInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpatialInfoDefaultTypeInternal() {}
  union {
    SpatialInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpatialInfoDefaultTypeInternal _SpatialInfo_default_instance_;
PROTOBUF_CONSTEXPR CreateSpatialChannelsResultMessage::CreateSpatialChannelsResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spatialchannelid_)*/{}
  , /*decltype(_impl_._spatialchannelid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ownerconnid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSpatialChannelsResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSpatialChannelsResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSpatialChannelsResultMessageDefaultTypeInternal() {}
  union {
    CreateSpatialChannelsResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSpatialChannelsResultMessageDefaultTypeInternal _CreateSpatialChannelsResultMessage_default_instance_;
PROTOBUF_CONSTEXPR QuerySpatialChannelMessage::QuerySpatialChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spatialinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpatialChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpatialChannelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpatialChannelMessageDefaultTypeInternal() {}
  union {
    QuerySpatialChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpatialChannelMessageDefaultTypeInternal _QuerySpatialChannelMessage_default_instance_;
PROTOBUF_CONSTEXPR QuerySpatialChannelResultMessage::QuerySpatialChannelResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channelid_)*/{}
  , /*decltype(_impl_._channelid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpatialChannelResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpatialChannelResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpatialChannelResultMessageDefaultTypeInternal() {}
  union {
    QuerySpatialChannelResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpatialChannelResultMessageDefaultTypeInternal _QuerySpatialChannelResultMessage_default_instance_;
PROTOBUF_CONSTEXPR ChannelDataHandoverMessage::ChannelDataHandoverMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.srcchannelid_)*/0u
  , /*decltype(_impl_.dstchannelid_)*/0u
  , /*decltype(_impl_.contextconnid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelDataHandoverMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDataHandoverMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDataHandoverMessageDefaultTypeInternal() {}
  union {
    ChannelDataHandoverMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDataHandoverMessageDefaultTypeInternal _ChannelDataHandoverMessage_default_instance_;
PROTOBUF_CONSTEXPR SpatialRegion::SpatialRegion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_)*/nullptr
  , /*decltype(_impl_.max_)*/nullptr
  , /*decltype(_impl_.channelid_)*/0u
  , /*decltype(_impl_.serverindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpatialRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpatialRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpatialRegionDefaultTypeInternal() {}
  union {
    SpatialRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpatialRegionDefaultTypeInternal _SpatialRegion_default_instance_;
PROTOBUF_CONSTEXPR SpatialRegionsUpdateMessage::SpatialRegionsUpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpatialRegionsUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpatialRegionsUpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpatialRegionsUpdateMessageDefaultTypeInternal() {}
  union {
    SpatialRegionsUpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpatialRegionsUpdateMessageDefaultTypeInternal _SpatialRegionsUpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR DebugGetSpatialRegionsMessage::DebugGetSpatialRegionsMessage(
    ::_pbi::ConstantInitialized) {}
struct DebugGetSpatialRegionsMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugGetSpatialRegionsMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugGetSpatialRegionsMessageDefaultTypeInternal() {}
  union {
    DebugGetSpatialRegionsMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugGetSpatialRegionsMessageDefaultTypeInternal _DebugGetSpatialRegionsMessage_default_instance_;
}  // namespace channeldpb
static ::_pb::Metadata file_level_metadata_channeld_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_channeld_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_channeld_2eproto = nullptr;

const uint32_t TableStruct_channeld_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::Packet, _impl_.messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::MessagePack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::MessagePack, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::MessagePack, _impl_.broadcast_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::MessagePack, _impl_.stubid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::MessagePack, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::MessagePack, _impl_.msgbody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ServerForwardMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ServerForwardMessage, _impl_.clientconnid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ServerForwardMessage, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthMessage, _impl_.playeridentifiertoken_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthMessage, _impl_.logintoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthResultMessage, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthResultMessage, _impl_.connid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::AuthResultMessage, _impl_.compressiontype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, _impl_.dataaccess_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, _impl_.datafieldmasks_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, _impl_.fanoutintervalms_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelSubscriptionOptions, _impl_.fanoutdelayms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, _impl_.shouldreplacelist_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, _impl_.listsizelimit_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, _impl_.truncatetop_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataMergeOptions, _impl_.shouldcheckremovablemapfield_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _impl_.suboptions_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelMessage, _impl_.mergeoptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, _impl_.ownerconnid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateChannelResultMessage, _impl_.channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::RemoveChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::RemoveChannelMessage, _impl_.channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelMessage, _impl_.typefilter_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelMessage, _impl_.metadatafilters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelResultMessage_ChannelInfo, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ListChannelResultMessage, _impl_.channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelMessage, _impl_.connid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelMessage, _impl_.suboptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, _impl_.connid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, _impl_.suboptions_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, _impl_.conntype_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SubscribedToChannelResultMessage, _impl_.channeltype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelMessage, _impl_.connid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, _impl_.connid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, _impl_.conntype_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::UnsubscribedFromChannelResultMessage, _impl_.channeltype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataUpdateMessage, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataUpdateMessage, _impl_.contextconnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::DisconnectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::DisconnectMessage, _impl_.connid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialInfo, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialInfo, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialInfo, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, _impl_.spatialchannelid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::CreateSpatialChannelsResultMessage, _impl_.ownerconnid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::QuerySpatialChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::QuerySpatialChannelMessage, _impl_.spatialinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::QuerySpatialChannelResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::QuerySpatialChannelResultMessage, _impl_.channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, _impl_.srcchannelid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, _impl_.dstchannelid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, _impl_.contextconnid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::ChannelDataHandoverMessage, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegion, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegion, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegion, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegion, _impl_.serverindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegionsUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::channeldpb::SpatialRegionsUpdateMessage, _impl_.regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::channeldpb::DebugGetSpatialRegionsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas_channeld_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::channeldpb::Packet)},
  { 7, -1, -1, sizeof(::channeldpb::MessagePack)},
  { 18, -1, -1, sizeof(::channeldpb::ServerForwardMessage)},
  { 26, -1, -1, sizeof(::channeldpb::AuthMessage)},
  { 34, -1, -1, sizeof(::channeldpb::AuthResultMessage)},
  { 43, -1, -1, sizeof(::channeldpb::ChannelSubscriptionOptions)},
  { 53, -1, -1, sizeof(::channeldpb::ChannelDataMergeOptions)},
  { 63, -1, -1, sizeof(::channeldpb::CreateChannelMessage)},
  { 74, -1, -1, sizeof(::channeldpb::CreateChannelResultMessage)},
  { 84, -1, -1, sizeof(::channeldpb::RemoveChannelMessage)},
  { 91, -1, -1, sizeof(::channeldpb::ListChannelMessage)},
  { 99, -1, -1, sizeof(::channeldpb::ListChannelResultMessage_ChannelInfo)},
  { 108, -1, -1, sizeof(::channeldpb::ListChannelResultMessage)},
  { 115, -1, -1, sizeof(::channeldpb::SubscribedToChannelMessage)},
  { 123, -1, -1, sizeof(::channeldpb::SubscribedToChannelResultMessage)},
  { 133, -1, -1, sizeof(::channeldpb::UnsubscribedFromChannelMessage)},
  { 140, -1, -1, sizeof(::channeldpb::UnsubscribedFromChannelResultMessage)},
  { 149, -1, -1, sizeof(::channeldpb::ChannelDataUpdateMessage)},
  { 157, -1, -1, sizeof(::channeldpb::DisconnectMessage)},
  { 164, -1, -1, sizeof(::channeldpb::SpatialInfo)},
  { 173, -1, -1, sizeof(::channeldpb::CreateSpatialChannelsResultMessage)},
  { 182, -1, -1, sizeof(::channeldpb::QuerySpatialChannelMessage)},
  { 189, -1, -1, sizeof(::channeldpb::QuerySpatialChannelResultMessage)},
  { 196, -1, -1, sizeof(::channeldpb::ChannelDataHandoverMessage)},
  { 206, -1, -1, sizeof(::channeldpb::SpatialRegion)},
  { 216, -1, -1, sizeof(::channeldpb::SpatialRegionsUpdateMessage)},
  { 223, -1, -1, sizeof(::channeldpb::DebugGetSpatialRegionsMessage)},
};

static const ::_pb::Message* const file_default_instances_channeld_2eproto[] = {
  &::channeldpb::_Packet_default_instance_._instance,
  &::channeldpb::_MessagePack_default_instance_._instance,
  &::channeldpb::_ServerForwardMessage_default_instance_._instance,
  &::channeldpb::_AuthMessage_default_instance_._instance,
  &::channeldpb::_AuthResultMessage_default_instance_._instance,
  &::channeldpb::_ChannelSubscriptionOptions_default_instance_._instance,
  &::channeldpb::_ChannelDataMergeOptions_default_instance_._instance,
  &::channeldpb::_CreateChannelMessage_default_instance_._instance,
  &::channeldpb::_CreateChannelResultMessage_default_instance_._instance,
  &::channeldpb::_RemoveChannelMessage_default_instance_._instance,
  &::channeldpb::_ListChannelMessage_default_instance_._instance,
  &::channeldpb::_ListChannelResultMessage_ChannelInfo_default_instance_._instance,
  &::channeldpb::_ListChannelResultMessage_default_instance_._instance,
  &::channeldpb::_SubscribedToChannelMessage_default_instance_._instance,
  &::channeldpb::_SubscribedToChannelResultMessage_default_instance_._instance,
  &::channeldpb::_UnsubscribedFromChannelMessage_default_instance_._instance,
  &::channeldpb::_UnsubscribedFromChannelResultMessage_default_instance_._instance,
  &::channeldpb::_ChannelDataUpdateMessage_default_instance_._instance,
  &::channeldpb::_DisconnectMessage_default_instance_._instance,
  &::channeldpb::_SpatialInfo_default_instance_._instance,
  &::channeldpb::_CreateSpatialChannelsResultMessage_default_instance_._instance,
  &::channeldpb::_QuerySpatialChannelMessage_default_instance_._instance,
  &::channeldpb::_QuerySpatialChannelResultMessage_default_instance_._instance,
  &::channeldpb::_ChannelDataHandoverMessage_default_instance_._instance,
  &::channeldpb::_SpatialRegion_default_instance_._instance,
  &::channeldpb::_SpatialRegionsUpdateMessage_default_instance_._instance,
  &::channeldpb::_DebugGetSpatialRegionsMessage_default_instance_._instance,
};

const char descriptor_table_protodef_channeld_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016channeld.proto\022\nchanneldpb\032\031google/pro"
  "tobuf/any.proto\"3\n\006Packet\022)\n\010messages\030\001 "
  "\003(\0132\027.channeldpb.MessagePack\"e\n\013MessageP"
  "ack\022\021\n\tchannelId\030\001 \001(\r\022\021\n\tbroadcast\030\002 \001("
  "\r\022\016\n\006stubId\030\003 \001(\r\022\017\n\007msgType\030\004 \001(\r\022\017\n\007ms"
  "gBody\030\005 \001(\014\"=\n\024ServerForwardMessage\022\024\n\014c"
  "lientConnId\030\001 \001(\r\022\017\n\007payload\030\002 \001(\014\"@\n\013Au"
  "thMessage\022\035\n\025playerIdentifierToken\030\001 \001(\t"
  "\022\022\n\nloginToken\030\002 \001(\t\"\322\001\n\021AuthResultMessa"
  "ge\0228\n\006result\030\001 \001(\0162(.channeldpb.AuthResu"
  "ltMessage.AuthResult\022\016\n\006connId\030\002 \001(\r\0224\n\017"
  "compressionType\030\003 \001(\0162\033.channeldpb.Compr"
  "essionType\"=\n\nAuthResult\022\016\n\nSUCCESSFUL\020\000"
  "\022\017\n\013INVALID_PIT\020\001\022\016\n\nINVALID_LT\020\002\"\230\001\n\032Ch"
  "annelSubscriptionOptions\0221\n\ndataAccess\030\001"
  " \001(\0162\035.channeldpb.ChannelDataAccess\022\026\n\016d"
  "ataFieldMasks\030\002 \003(\t\022\030\n\020fanOutIntervalMs\030"
  "\003 \001(\r\022\025\n\rfanOutDelayMs\030\004 \001(\005\"\206\001\n\027Channel"
  "DataMergeOptions\022\031\n\021shouldReplaceList\030\001 "
  "\001(\010\022\025\n\rlistSizeLimit\030\002 \001(\r\022\023\n\013truncateTo"
  "p\030\003 \001(\010\022$\n\034shouldCheckRemovableMapField\030"
  "\004 \001(\010\"\361\001\n\024CreateChannelMessage\022,\n\013channe"
  "lType\030\001 \001(\0162\027.channeldpb.ChannelType\022\020\n\010"
  "metadata\030\002 \001(\t\022:\n\nsubOptions\030\003 \001(\0132&.cha"
  "nneldpb.ChannelSubscriptionOptions\022\"\n\004da"
  "ta\030\004 \001(\0132\024.google.protobuf.Any\0229\n\014mergeO"
  "ptions\030\005 \001(\0132#.channeldpb.ChannelDataMer"
  "geOptions\"\204\001\n\032CreateChannelResultMessage"
  "\022,\n\013channelType\030\001 \001(\0162\027.channeldpb.Chann"
  "elType\022\020\n\010metadata\030\002 \001(\t\022\023\n\013ownerConnId\030"
  "\003 \001(\r\022\021\n\tchannelId\030\004 \001(\r\")\n\024RemoveChanne"
  "lMessage\022\021\n\tchannelId\030\001 \001(\r\"Z\n\022ListChann"
  "elMessage\022+\n\ntypeFilter\030\001 \001(\0162\027.channeld"
  "pb.ChannelType\022\027\n\017metadataFilters\030\002 \003(\t\""
  "\300\001\n\030ListChannelResultMessage\022B\n\010channels"
  "\030\001 \003(\01320.channeldpb.ListChannelResultMes"
  "sage.ChannelInfo\032`\n\013ChannelInfo\022\021\n\tchann"
  "elId\030\001 \001(\r\022,\n\013channelType\030\002 \001(\0162\027.channe"
  "ldpb.ChannelType\022\020\n\010metadata\030\003 \001(\t\"h\n\032Su"
  "bscribedToChannelMessage\022\016\n\006connId\030\001 \001(\r"
  "\022:\n\nsubOptions\030\002 \001(\0132&.channeldpb.Channe"
  "lSubscriptionOptions\"\312\001\n SubscribedToCha"
  "nnelResultMessage\022\016\n\006connId\030\001 \001(\r\022:\n\nsub"
  "Options\030\002 \001(\0132&.channeldpb.ChannelSubscr"
  "iptionOptions\022,\n\010connType\030\003 \001(\0162\032.channe"
  "ldpb.ConnectionType\022,\n\013channelType\030\004 \001(\016"
  "2\027.channeldpb.ChannelType\"0\n\036Unsubscribe"
  "dFromChannelMessage\022\016\n\006connId\030\001 \001(\r\"\222\001\n$"
  "UnsubscribedFromChannelResultMessage\022\016\n\006"
  "connId\030\001 \001(\r\022,\n\010connType\030\002 \001(\0162\032.channel"
  "dpb.ConnectionType\022,\n\013channelType\030\003 \001(\0162"
  "\027.channeldpb.ChannelType\"U\n\030ChannelDataU"
  "pdateMessage\022\"\n\004data\030\001 \001(\0132\024.google.prot"
  "obuf.Any\022\025\n\rcontextConnId\030\002 \001(\r\"#\n\021Disco"
  "nnectMessage\022\016\n\006connId\030\001 \001(\r\".\n\013SpatialI"
  "nfo\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"e\n\""
  "CreateSpatialChannelsResultMessage\022\030\n\020sp"
  "atialChannelId\030\001 \003(\r\022\020\n\010metadata\030\002 \001(\t\022\023"
  "\n\013ownerConnId\030\003 \001(\r\"J\n\032QuerySpatialChann"
  "elMessage\022,\n\013spatialInfo\030\001 \003(\0132\027.channel"
  "dpb.SpatialInfo\"5\n QuerySpatialChannelRe"
  "sultMessage\022\021\n\tchannelId\030\001 \003(\r\"\203\001\n\032Chann"
  "elDataHandoverMessage\022\024\n\014srcChannelId\030\001 "
  "\001(\r\022\024\n\014dstChannelId\030\002 \001(\r\022\025\n\rcontextConn"
  "Id\030\003 \001(\r\022\"\n\004data\030\004 \001(\0132\024.google.protobuf"
  ".Any\"\203\001\n\rSpatialRegion\022$\n\003min\030\001 \001(\0132\027.ch"
  "anneldpb.SpatialInfo\022$\n\003max\030\002 \001(\0132\027.chan"
  "neldpb.SpatialInfo\022\021\n\tchannelId\030\003 \001(\r\022\023\n"
  "\013serverIndex\030\004 \001(\r\"I\n\033SpatialRegionsUpda"
  "teMessage\022*\n\007regions\030\001 \003(\0132\031.channeldpb."
  "SpatialRegion\"\037\n\035DebugGetSpatialRegionsM"
  "essage*\247\001\n\rBroadcastType\022\020\n\014NO_BROADCAST"
  "\020\000\022\025\n\021SINGLE_CONNECTION\020\001\022\007\n\003ALL\020\002\022\022\n\016AL"
  "L_BUT_SENDER\020\004\022\021\n\rALL_BUT_OWNER\020\006\022\022\n\016ALL"
  "_BUT_CLIENT\020\010\022\022\n\016ALL_BUT_SERVER\020\020\022\025\n\021ADJ"
  "ACENT_CHANNELS\020 *;\n\016ConnectionType\022\021\n\rNO"
  "_CONNECTION\020\000\022\n\n\006SERVER\020\001\022\n\n\006CLIENT\020\002*\204\001"
  "\n\013ChannelType\022\013\n\007UNKNOWN\020\000\022\n\n\006GLOBAL\020\001\022\013"
  "\n\007PRIVATE\020\002\022\014\n\010SUBWORLD\020\003\022\013\n\007SPATIAL\020\004\022\010"
  "\n\004TEST\020d\022\t\n\005TEST1\020e\022\t\n\005TEST2\020f\022\t\n\005TEST3\020"
  "g\022\t\n\005TEST4\020h*\326\002\n\013MessageType\022\013\n\007INVALID\020"
  "\000\022\010\n\004AUTH\020\001\022\022\n\016CREATE_CHANNEL\020\003\022\022\n\016REMOV"
  "E_CHANNEL\020\004\022\020\n\014LIST_CHANNEL\020\005\022\022\n\016SUB_TO_"
  "CHANNEL\020\006\022\026\n\022UNSUB_FROM_CHANNEL\020\007\022\027\n\023CHA"
  "NNEL_DATA_UPDATE\020\010\022\016\n\nDISCONNECT\020\t\022\032\n\026CR"
  "EATE_SPATIAL_CHANNEL\020\n\022\031\n\025QUERY_SPATIAL_"
  "CHANNEL\020\013\022\031\n\025CHANNEL_DATA_HANDOVER\020\014\022\032\n\026"
  "SPATIAL_REGIONS_UPDATE\020\r\022\035\n\031DEBUG_GET_SP"
  "ATIAL_REGIONS\020c\022\024\n\020USER_SPACE_START\020d*1\n"
  "\017CompressionType\022\022\n\016NO_COMPRESSION\020\000\022\n\n\006"
  "SNAPPY\020\001*E\n\021ChannelDataAccess\022\r\n\tNO_ACCE"
  "SS\020\000\022\017\n\013READ_ACCESS\020\001\022\020\n\014WRITE_ACCESS\020\002B"
  ".Z,channeld.clewcat.com/channeld/pkg/cha"
  "nneldpbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_channeld_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_channeld_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_channeld_2eproto = {
    false, false, 3735, descriptor_table_protodef_channeld_2eproto,
    "channeld.proto",
    &descriptor_table_channeld_2eproto_once, descriptor_table_channeld_2eproto_deps, 1, 27,
    schemas_channeld_2eproto, file_default_instances_channeld_2eproto, TableStruct_channeld_2eproto::offsets,
    file_level_metadata_channeld_2eproto, file_level_enum_descriptors_channeld_2eproto,
    file_level_service_descriptors_channeld_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_channeld_2eproto_getter() {
  return &descriptor_table_channeld_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_channeld_2eproto(&descriptor_table_channeld_2eproto);
namespace channeldpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthResultMessage_AuthResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[0];
}
bool AuthResultMessage_AuthResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AuthResultMessage_AuthResult AuthResultMessage::SUCCESSFUL;
constexpr AuthResultMessage_AuthResult AuthResultMessage::INVALID_PIT;
constexpr AuthResultMessage_AuthResult AuthResultMessage::INVALID_LT;
constexpr AuthResultMessage_AuthResult AuthResultMessage::AuthResult_MIN;
constexpr AuthResultMessage_AuthResult AuthResultMessage::AuthResult_MAX;
constexpr int AuthResultMessage::AuthResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[1];
}
bool BroadcastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 6:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[2];
}
bool ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[3];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[4];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[5];
}
bool CompressionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelDataAccess_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_channeld_2eproto);
  return file_level_enum_descriptors_channeld_2eproto[6];
}
bool ChannelDataAccess_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Packet::_Internal {
 public:
};

Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.Packet)
}

inline void Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:channeldpb.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .channeldpb.MessagePack messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.MessagePack messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .channeldpb.MessagePack messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[0]);
}

// ===================================================================

class MessagePack::_Internal {
 public:
};

MessagePack::MessagePack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.MessagePack)
}
MessagePack::MessagePack(const MessagePack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessagePack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgbody_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.broadcast_){}
    , decltype(_impl_.stubid_){}
    , decltype(_impl_.msgtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgbody_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgbody_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgbody().empty()) {
    _this->_impl_.msgbody_.Set(from._internal_msgbody(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channelid_, &from._impl_.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msgtype_) -
    reinterpret_cast<char*>(&_impl_.channelid_)) + sizeof(_impl_.msgtype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.MessagePack)
}

inline void MessagePack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgbody_){}
    , decltype(_impl_.channelid_){0u}
    , decltype(_impl_.broadcast_){0u}
    , decltype(_impl_.stubid_){0u}
    , decltype(_impl_.msgtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgbody_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgbody_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessagePack::~MessagePack() {
  // @@protoc_insertion_point(destructor:channeldpb.MessagePack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessagePack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgbody_.Destroy();
}

void MessagePack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessagePack::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.MessagePack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgbody_.ClearToEmpty();
  ::memset(&_impl_.channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.msgtype_) -
      reinterpret_cast<char*>(&_impl_.channelid_)) + sizeof(_impl_.msgtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagePack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 broadcast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stubId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stubid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msgType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msgBody = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_msgbody();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessagePack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.MessagePack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channelid(), target);
  }

  // uint32 broadcast = 2;
  if (this->_internal_broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_broadcast(), target);
  }

  // uint32 stubId = 3;
  if (this->_internal_stubid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stubid(), target);
  }

  // uint32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msgtype(), target);
  }

  // bytes msgBody = 5;
  if (!this->_internal_msgbody().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_msgbody(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.MessagePack)
  return target;
}

size_t MessagePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.MessagePack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msgBody = 5;
  if (!this->_internal_msgbody().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgbody());
  }

  // uint32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channelid());
  }

  // uint32 broadcast = 2;
  if (this->_internal_broadcast() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_broadcast());
  }

  // uint32 stubId = 3;
  if (this->_internal_stubid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stubid());
  }

  // uint32 msgType = 4;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessagePack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessagePack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessagePack::GetClassData() const { return &_class_data_; }


void MessagePack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessagePack*>(&to_msg);
  auto& from = static_cast<const MessagePack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.MessagePack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgbody().empty()) {
    _this->_internal_set_msgbody(from._internal_msgbody());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_broadcast() != 0) {
    _this->_internal_set_broadcast(from._internal_broadcast());
  }
  if (from._internal_stubid() != 0) {
    _this->_internal_set_stubid(from._internal_stubid());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessagePack::CopyFrom(const MessagePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.MessagePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePack::IsInitialized() const {
  return true;
}

void MessagePack::InternalSwap(MessagePack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgbody_, lhs_arena,
      &other->_impl_.msgbody_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessagePack, _impl_.msgtype_)
      + sizeof(MessagePack::_impl_.msgtype_)
      - PROTOBUF_FIELD_OFFSET(MessagePack, _impl_.channelid_)>(
          reinterpret_cast<char*>(&_impl_.channelid_),
          reinterpret_cast<char*>(&other->_impl_.channelid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[1]);
}

// ===================================================================

class ServerForwardMessage::_Internal {
 public:
};

ServerForwardMessage::ServerForwardMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ServerForwardMessage)
}
ServerForwardMessage::ServerForwardMessage(const ServerForwardMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerForwardMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.clientconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.clientconnid_ = from._impl_.clientconnid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.ServerForwardMessage)
}

inline void ServerForwardMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.clientconnid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerForwardMessage::~ServerForwardMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ServerForwardMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerForwardMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void ServerForwardMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerForwardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ServerForwardMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.clientconnid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerForwardMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 clientConnId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clientconnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerForwardMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ServerForwardMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clientConnId = 1;
  if (this->_internal_clientconnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clientconnid(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ServerForwardMessage)
  return target;
}

size_t ServerForwardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ServerForwardMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // uint32 clientConnId = 1;
  if (this->_internal_clientconnid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clientconnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerForwardMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerForwardMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerForwardMessage::GetClassData() const { return &_class_data_; }


void ServerForwardMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerForwardMessage*>(&to_msg);
  auto& from = static_cast<const ServerForwardMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ServerForwardMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_clientconnid() != 0) {
    _this->_internal_set_clientconnid(from._internal_clientconnid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerForwardMessage::CopyFrom(const ServerForwardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ServerForwardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerForwardMessage::IsInitialized() const {
  return true;
}

void ServerForwardMessage::InternalSwap(ServerForwardMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.clientconnid_, other->_impl_.clientconnid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerForwardMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[2]);
}

// ===================================================================

class AuthMessage::_Internal {
 public:
};

AuthMessage::AuthMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.AuthMessage)
}
AuthMessage::AuthMessage(const AuthMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridentifiertoken_){}
    , decltype(_impl_.logintoken_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playeridentifiertoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playeridentifiertoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playeridentifiertoken().empty()) {
    _this->_impl_.playeridentifiertoken_.Set(from._internal_playeridentifiertoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logintoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logintoken().empty()) {
    _this->_impl_.logintoken_.Set(from._internal_logintoken(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:channeldpb.AuthMessage)
}

inline void AuthMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playeridentifiertoken_){}
    , decltype(_impl_.logintoken_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playeridentifiertoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playeridentifiertoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logintoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthMessage::~AuthMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.AuthMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playeridentifiertoken_.Destroy();
  _impl_.logintoken_.Destroy();
}

void AuthMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.AuthMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playeridentifiertoken_.ClearToEmpty();
  _impl_.logintoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerIdentifierToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playeridentifiertoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "channeldpb.AuthMessage.playerIdentifierToken"));
        } else
          goto handle_unusual;
        continue;
      // string loginToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_logintoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "channeldpb.AuthMessage.loginToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.AuthMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerIdentifierToken = 1;
  if (!this->_internal_playeridentifiertoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playeridentifiertoken().data(), static_cast<int>(this->_internal_playeridentifiertoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.AuthMessage.playerIdentifierToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playeridentifiertoken(), target);
  }

  // string loginToken = 2;
  if (!this->_internal_logintoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logintoken().data(), static_cast<int>(this->_internal_logintoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.AuthMessage.loginToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logintoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.AuthMessage)
  return target;
}

size_t AuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.AuthMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerIdentifierToken = 1;
  if (!this->_internal_playeridentifiertoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playeridentifiertoken());
  }

  // string loginToken = 2;
  if (!this->_internal_logintoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logintoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthMessage::GetClassData() const { return &_class_data_; }


void AuthMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthMessage*>(&to_msg);
  auto& from = static_cast<const AuthMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.AuthMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playeridentifiertoken().empty()) {
    _this->_internal_set_playeridentifiertoken(from._internal_playeridentifiertoken());
  }
  if (!from._internal_logintoken().empty()) {
    _this->_internal_set_logintoken(from._internal_logintoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthMessage::CopyFrom(const AuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.AuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthMessage::IsInitialized() const {
  return true;
}

void AuthMessage::InternalSwap(AuthMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playeridentifiertoken_, lhs_arena,
      &other->_impl_.playeridentifiertoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logintoken_, lhs_arena,
      &other->_impl_.logintoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[3]);
}

// ===================================================================

class AuthResultMessage::_Internal {
 public:
};

AuthResultMessage::AuthResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.AuthResultMessage)
}
AuthResultMessage::AuthResultMessage(const AuthResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.connid_){}
    , decltype(_impl_.compressiontype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compressiontype_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.compressiontype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.AuthResultMessage)
}

inline void AuthResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.connid_){0u}
    , decltype(_impl_.compressiontype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AuthResultMessage::~AuthResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.AuthResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.AuthResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compressiontype_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.compressiontype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .channeldpb.AuthResultMessage.AuthResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::channeldpb::AuthResultMessage_AuthResult>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 connId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.CompressionType compressionType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compressiontype(static_cast<::channeldpb::CompressionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.AuthResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // uint32 connId = 2;
  if (this->_internal_connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_connid(), target);
  }

  // .channeldpb.CompressionType compressionType = 3;
  if (this->_internal_compressiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_compressiontype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.AuthResultMessage)
  return target;
}

size_t AuthResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.AuthResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .channeldpb.AuthResultMessage.AuthResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // uint32 connId = 2;
  if (this->_internal_connid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connid());
  }

  // .channeldpb.CompressionType compressionType = 3;
  if (this->_internal_compressiontype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compressiontype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthResultMessage::GetClassData() const { return &_class_data_; }


void AuthResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthResultMessage*>(&to_msg);
  auto& from = static_cast<const AuthResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.AuthResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_connid() != 0) {
    _this->_internal_set_connid(from._internal_connid());
  }
  if (from._internal_compressiontype() != 0) {
    _this->_internal_set_compressiontype(from._internal_compressiontype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthResultMessage::CopyFrom(const AuthResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.AuthResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResultMessage::IsInitialized() const {
  return true;
}

void AuthResultMessage::InternalSwap(AuthResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthResultMessage, _impl_.compressiontype_)
      + sizeof(AuthResultMessage::_impl_.compressiontype_)
      - PROTOBUF_FIELD_OFFSET(AuthResultMessage, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[4]);
}

// ===================================================================

class ChannelSubscriptionOptions::_Internal {
 public:
};

ChannelSubscriptionOptions::ChannelSubscriptionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ChannelSubscriptionOptions)
}
ChannelSubscriptionOptions::ChannelSubscriptionOptions(const ChannelSubscriptionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelSubscriptionOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datafieldmasks_){from._impl_.datafieldmasks_}
    , decltype(_impl_.dataaccess_){}
    , decltype(_impl_.fanoutintervalms_){}
    , decltype(_impl_.fanoutdelayms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dataaccess_, &from._impl_.dataaccess_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fanoutdelayms_) -
    reinterpret_cast<char*>(&_impl_.dataaccess_)) + sizeof(_impl_.fanoutdelayms_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelSubscriptionOptions)
}

inline void ChannelSubscriptionOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datafieldmasks_){arena}
    , decltype(_impl_.dataaccess_){0}
    , decltype(_impl_.fanoutintervalms_){0u}
    , decltype(_impl_.fanoutdelayms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelSubscriptionOptions::~ChannelSubscriptionOptions() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelSubscriptionOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelSubscriptionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datafieldmasks_.~RepeatedPtrField();
}

void ChannelSubscriptionOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelSubscriptionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelSubscriptionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datafieldmasks_.Clear();
  ::memset(&_impl_.dataaccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fanoutdelayms_) -
      reinterpret_cast<char*>(&_impl_.dataaccess_)) + sizeof(_impl_.fanoutdelayms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelSubscriptionOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .channeldpb.ChannelDataAccess dataAccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dataaccess(static_cast<::channeldpb::ChannelDataAccess>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string dataFieldMasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datafieldmasks();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "channeldpb.ChannelSubscriptionOptions.dataFieldMasks"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 fanOutIntervalMs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fanoutintervalms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fanOutDelayMs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fanoutdelayms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelSubscriptionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelSubscriptionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelDataAccess dataAccess = 1;
  if (this->_internal_dataaccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dataaccess(), target);
  }

  // repeated string dataFieldMasks = 2;
  for (int i = 0, n = this->_internal_datafieldmasks_size(); i < n; i++) {
    const auto& s = this->_internal_datafieldmasks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ChannelSubscriptionOptions.dataFieldMasks");
    target = stream->WriteString(2, s, target);
  }

  // uint32 fanOutIntervalMs = 3;
  if (this->_internal_fanoutintervalms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fanoutintervalms(), target);
  }

  // int32 fanOutDelayMs = 4;
  if (this->_internal_fanoutdelayms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_fanoutdelayms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelSubscriptionOptions)
  return target;
}

size_t ChannelSubscriptionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelSubscriptionOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataFieldMasks = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datafieldmasks_.size());
  for (int i = 0, n = _impl_.datafieldmasks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datafieldmasks_.Get(i));
  }

  // .channeldpb.ChannelDataAccess dataAccess = 1;
  if (this->_internal_dataaccess() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dataaccess());
  }

  // uint32 fanOutIntervalMs = 3;
  if (this->_internal_fanoutintervalms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fanoutintervalms());
  }

  // int32 fanOutDelayMs = 4;
  if (this->_internal_fanoutdelayms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fanoutdelayms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelSubscriptionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelSubscriptionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelSubscriptionOptions::GetClassData() const { return &_class_data_; }


void ChannelSubscriptionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelSubscriptionOptions*>(&to_msg);
  auto& from = static_cast<const ChannelSubscriptionOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelSubscriptionOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datafieldmasks_.MergeFrom(from._impl_.datafieldmasks_);
  if (from._internal_dataaccess() != 0) {
    _this->_internal_set_dataaccess(from._internal_dataaccess());
  }
  if (from._internal_fanoutintervalms() != 0) {
    _this->_internal_set_fanoutintervalms(from._internal_fanoutintervalms());
  }
  if (from._internal_fanoutdelayms() != 0) {
    _this->_internal_set_fanoutdelayms(from._internal_fanoutdelayms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelSubscriptionOptions::CopyFrom(const ChannelSubscriptionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelSubscriptionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelSubscriptionOptions::IsInitialized() const {
  return true;
}

void ChannelSubscriptionOptions::InternalSwap(ChannelSubscriptionOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datafieldmasks_.InternalSwap(&other->_impl_.datafieldmasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelSubscriptionOptions, _impl_.fanoutdelayms_)
      + sizeof(ChannelSubscriptionOptions::_impl_.fanoutdelayms_)
      - PROTOBUF_FIELD_OFFSET(ChannelSubscriptionOptions, _impl_.dataaccess_)>(
          reinterpret_cast<char*>(&_impl_.dataaccess_),
          reinterpret_cast<char*>(&other->_impl_.dataaccess_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelSubscriptionOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[5]);
}

// ===================================================================

class ChannelDataMergeOptions::_Internal {
 public:
};

ChannelDataMergeOptions::ChannelDataMergeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ChannelDataMergeOptions)
}
ChannelDataMergeOptions::ChannelDataMergeOptions(const ChannelDataMergeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelDataMergeOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listsizelimit_){}
    , decltype(_impl_.shouldreplacelist_){}
    , decltype(_impl_.truncatetop_){}
    , decltype(_impl_.shouldcheckremovablemapfield_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.listsizelimit_, &from._impl_.listsizelimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shouldcheckremovablemapfield_) -
    reinterpret_cast<char*>(&_impl_.listsizelimit_)) + sizeof(_impl_.shouldcheckremovablemapfield_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelDataMergeOptions)
}

inline void ChannelDataMergeOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listsizelimit_){0u}
    , decltype(_impl_.shouldreplacelist_){false}
    , decltype(_impl_.truncatetop_){false}
    , decltype(_impl_.shouldcheckremovablemapfield_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelDataMergeOptions::~ChannelDataMergeOptions() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelDataMergeOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelDataMergeOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChannelDataMergeOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelDataMergeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelDataMergeOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.listsizelimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shouldcheckremovablemapfield_) -
      reinterpret_cast<char*>(&_impl_.listsizelimit_)) + sizeof(_impl_.shouldcheckremovablemapfield_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDataMergeOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool shouldReplaceList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shouldreplacelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 listSizeLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.listsizelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool truncateTop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.truncatetop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool shouldCheckRemovableMapField = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.shouldcheckremovablemapfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelDataMergeOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelDataMergeOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool shouldReplaceList = 1;
  if (this->_internal_shouldreplacelist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_shouldreplacelist(), target);
  }

  // uint32 listSizeLimit = 2;
  if (this->_internal_listsizelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_listsizelimit(), target);
  }

  // bool truncateTop = 3;
  if (this->_internal_truncatetop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_truncatetop(), target);
  }

  // bool shouldCheckRemovableMapField = 4;
  if (this->_internal_shouldcheckremovablemapfield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_shouldcheckremovablemapfield(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelDataMergeOptions)
  return target;
}

size_t ChannelDataMergeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelDataMergeOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 listSizeLimit = 2;
  if (this->_internal_listsizelimit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_listsizelimit());
  }

  // bool shouldReplaceList = 1;
  if (this->_internal_shouldreplacelist() != 0) {
    total_size += 1 + 1;
  }

  // bool truncateTop = 3;
  if (this->_internal_truncatetop() != 0) {
    total_size += 1 + 1;
  }

  // bool shouldCheckRemovableMapField = 4;
  if (this->_internal_shouldcheckremovablemapfield() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelDataMergeOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelDataMergeOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelDataMergeOptions::GetClassData() const { return &_class_data_; }


void ChannelDataMergeOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelDataMergeOptions*>(&to_msg);
  auto& from = static_cast<const ChannelDataMergeOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelDataMergeOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_listsizelimit() != 0) {
    _this->_internal_set_listsizelimit(from._internal_listsizelimit());
  }
  if (from._internal_shouldreplacelist() != 0) {
    _this->_internal_set_shouldreplacelist(from._internal_shouldreplacelist());
  }
  if (from._internal_truncatetop() != 0) {
    _this->_internal_set_truncatetop(from._internal_truncatetop());
  }
  if (from._internal_shouldcheckremovablemapfield() != 0) {
    _this->_internal_set_shouldcheckremovablemapfield(from._internal_shouldcheckremovablemapfield());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelDataMergeOptions::CopyFrom(const ChannelDataMergeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelDataMergeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDataMergeOptions::IsInitialized() const {
  return true;
}

void ChannelDataMergeOptions::InternalSwap(ChannelDataMergeOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDataMergeOptions, _impl_.shouldcheckremovablemapfield_)
      + sizeof(ChannelDataMergeOptions::_impl_.shouldcheckremovablemapfield_)
      - PROTOBUF_FIELD_OFFSET(ChannelDataMergeOptions, _impl_.listsizelimit_)>(
          reinterpret_cast<char*>(&_impl_.listsizelimit_),
          reinterpret_cast<char*>(&other->_impl_.listsizelimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDataMergeOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[6]);
}

// ===================================================================

class CreateChannelMessage::_Internal {
 public:
  static const ::channeldpb::ChannelSubscriptionOptions& suboptions(const CreateChannelMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const CreateChannelMessage* msg);
  static const ::channeldpb::ChannelDataMergeOptions& mergeoptions(const CreateChannelMessage* msg);
};

const ::channeldpb::ChannelSubscriptionOptions&
CreateChannelMessage::_Internal::suboptions(const CreateChannelMessage* msg) {
  return *msg->_impl_.suboptions_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
CreateChannelMessage::_Internal::data(const CreateChannelMessage* msg) {
  return *msg->_impl_.data_;
}
const ::channeldpb::ChannelDataMergeOptions&
CreateChannelMessage::_Internal::mergeoptions(const CreateChannelMessage* msg) {
  return *msg->_impl_.mergeoptions_;
}
void CreateChannelMessage::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
CreateChannelMessage::CreateChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.CreateChannelMessage)
}
CreateChannelMessage::CreateChannelMessage(const CreateChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.suboptions_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.mergeoptions_){nullptr}
    , decltype(_impl_.channeltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_suboptions()) {
    _this->_impl_.suboptions_ = new ::channeldpb::ChannelSubscriptionOptions(*from._impl_.suboptions_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  if (from._internal_has_mergeoptions()) {
    _this->_impl_.mergeoptions_ = new ::channeldpb::ChannelDataMergeOptions(*from._impl_.mergeoptions_);
  }
  _this->_impl_.channeltype_ = from._impl_.channeltype_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.CreateChannelMessage)
}

inline void CreateChannelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.suboptions_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.mergeoptions_){nullptr}
    , decltype(_impl_.channeltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateChannelMessage::~CreateChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.CreateChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.suboptions_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.mergeoptions_;
}

void CreateChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.CreateChannelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.suboptions_ != nullptr) {
    delete _impl_.suboptions_;
  }
  _impl_.suboptions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mergeoptions_ != nullptr) {
    delete _impl_.mergeoptions_;
  }
  _impl_.mergeoptions_ = nullptr;
  _impl_.channeltype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .channeldpb.ChannelType channelType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::channeldpb::ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "channeldpb.CreateChannelMessage.metadata"));
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_suboptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mergeoptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateChannelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.CreateChannelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType channelType = 1;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channeltype(), target);
  }

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateChannelMessage.metadata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  if (this->_internal_has_suboptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::suboptions(this),
        _Internal::suboptions(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  if (this->_internal_has_mergeoptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mergeoptions(this),
        _Internal::mergeoptions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.CreateChannelMessage)
  return target;
}

size_t CreateChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.CreateChannelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 3;
  if (this->_internal_has_suboptions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.suboptions_);
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .channeldpb.ChannelDataMergeOptions mergeOptions = 5;
  if (this->_internal_has_mergeoptions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mergeoptions_);
  }

  // .channeldpb.ChannelType channelType = 1;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChannelMessage::GetClassData() const { return &_class_data_; }


void CreateChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChannelMessage*>(&to_msg);
  auto& from = static_cast<const CreateChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.CreateChannelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_has_suboptions()) {
    _this->_internal_mutable_suboptions()->::channeldpb::ChannelSubscriptionOptions::MergeFrom(
        from._internal_suboptions());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_mergeoptions()) {
    _this->_internal_mutable_mergeoptions()->::channeldpb::ChannelDataMergeOptions::MergeFrom(
        from._internal_mergeoptions());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChannelMessage::CopyFrom(const CreateChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.CreateChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelMessage::IsInitialized() const {
  return true;
}

void CreateChannelMessage::InternalSwap(CreateChannelMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateChannelMessage, _impl_.channeltype_)
      + sizeof(CreateChannelMessage::_impl_.channeltype_)
      - PROTOBUF_FIELD_OFFSET(CreateChannelMessage, _impl_.suboptions_)>(
          reinterpret_cast<char*>(&_impl_.suboptions_),
          reinterpret_cast<char*>(&other->_impl_.suboptions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[7]);
}

// ===================================================================

class CreateChannelResultMessage::_Internal {
 public:
};

CreateChannelResultMessage::CreateChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.CreateChannelResultMessage)
}
CreateChannelResultMessage::CreateChannelResultMessage(const CreateChannelResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChannelResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.ownerconnid_){}
    , decltype(_impl_.channelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channeltype_, &from._impl_.channeltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channelid_) -
    reinterpret_cast<char*>(&_impl_.channeltype_)) + sizeof(_impl_.channelid_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.CreateChannelResultMessage)
}

inline void CreateChannelResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.ownerconnid_){0u}
    , decltype(_impl_.channelid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateChannelResultMessage::~CreateChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.CreateChannelResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChannelResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
}

void CreateChannelResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.CreateChannelResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.ClearToEmpty();
  ::memset(&_impl_.channeltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channelid_) -
      reinterpret_cast<char*>(&_impl_.channeltype_)) + sizeof(_impl_.channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .channeldpb.ChannelType channelType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::channeldpb::ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "channeldpb.CreateChannelResultMessage.metadata"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ownerConnId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ownerconnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channelId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateChannelResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.CreateChannelResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType channelType = 1;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channeltype(), target);
  }

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateChannelResultMessage.metadata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  // uint32 ownerConnId = 3;
  if (this->_internal_ownerconnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ownerconnid(), target);
  }

  // uint32 channelId = 4;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.CreateChannelResultMessage)
  return target;
}

size_t CreateChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.CreateChannelResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .channeldpb.ChannelType channelType = 1;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // uint32 ownerConnId = 3;
  if (this->_internal_ownerconnid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ownerconnid());
  }

  // uint32 channelId = 4;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChannelResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChannelResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChannelResultMessage::GetClassData() const { return &_class_data_; }


void CreateChannelResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChannelResultMessage*>(&to_msg);
  auto& from = static_cast<const CreateChannelResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.CreateChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_ownerconnid() != 0) {
    _this->_internal_set_ownerconnid(from._internal_ownerconnid());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChannelResultMessage::CopyFrom(const CreateChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.CreateChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResultMessage::IsInitialized() const {
  return true;
}

void CreateChannelResultMessage::InternalSwap(CreateChannelResultMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateChannelResultMessage, _impl_.channelid_)
      + sizeof(CreateChannelResultMessage::_impl_.channelid_)
      - PROTOBUF_FIELD_OFFSET(CreateChannelResultMessage, _impl_.channeltype_)>(
          reinterpret_cast<char*>(&_impl_.channeltype_),
          reinterpret_cast<char*>(&other->_impl_.channeltype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[8]);
}

// ===================================================================

class RemoveChannelMessage::_Internal {
 public:
};

RemoveChannelMessage::RemoveChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.RemoveChannelMessage)
}
RemoveChannelMessage::RemoveChannelMessage(const RemoveChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channelid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channelid_ = from._impl_.channelid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.RemoveChannelMessage)
}

inline void RemoveChannelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channelid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveChannelMessage::~RemoveChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.RemoveChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.RemoveChannelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channelid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveChannelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.RemoveChannelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.RemoveChannelMessage)
  return target;
}

size_t RemoveChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.RemoveChannelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveChannelMessage::GetClassData() const { return &_class_data_; }


void RemoveChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveChannelMessage*>(&to_msg);
  auto& from = static_cast<const RemoveChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.RemoveChannelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveChannelMessage::CopyFrom(const RemoveChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.RemoveChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveChannelMessage::IsInitialized() const {
  return true;
}

void RemoveChannelMessage::InternalSwap(RemoveChannelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.channelid_, other->_impl_.channelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[9]);
}

// ===================================================================

class ListChannelMessage::_Internal {
 public:
};

ListChannelMessage::ListChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ListChannelMessage)
}
ListChannelMessage::ListChannelMessage(const ListChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadatafilters_){from._impl_.metadatafilters_}
    , decltype(_impl_.typefilter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.typefilter_ = from._impl_.typefilter_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.ListChannelMessage)
}

inline void ListChannelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadatafilters_){arena}
    , decltype(_impl_.typefilter_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListChannelMessage::~ListChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ListChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadatafilters_.~RepeatedPtrField();
}

void ListChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ListChannelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadatafilters_.Clear();
  _impl_.typefilter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .channeldpb.ChannelType typeFilter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_typefilter(static_cast<::channeldpb::ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string metadataFilters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metadatafilters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "channeldpb.ListChannelMessage.metadataFilters"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListChannelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ListChannelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.ChannelType typeFilter = 1;
  if (this->_internal_typefilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_typefilter(), target);
  }

  // repeated string metadataFilters = 2;
  for (int i = 0, n = this->_internal_metadatafilters_size(); i < n; i++) {
    const auto& s = this->_internal_metadatafilters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ListChannelMessage.metadataFilters");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ListChannelMessage)
  return target;
}

size_t ListChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ListChannelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string metadataFilters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.metadatafilters_.size());
  for (int i = 0, n = _impl_.metadatafilters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.metadatafilters_.Get(i));
  }

  // .channeldpb.ChannelType typeFilter = 1;
  if (this->_internal_typefilter() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_typefilter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChannelMessage::GetClassData() const { return &_class_data_; }


void ListChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListChannelMessage*>(&to_msg);
  auto& from = static_cast<const ListChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ListChannelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadatafilters_.MergeFrom(from._impl_.metadatafilters_);
  if (from._internal_typefilter() != 0) {
    _this->_internal_set_typefilter(from._internal_typefilter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListChannelMessage::CopyFrom(const ListChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ListChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelMessage::IsInitialized() const {
  return true;
}

void ListChannelMessage::InternalSwap(ListChannelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadatafilters_.InternalSwap(&other->_impl_.metadatafilters_);
  swap(_impl_.typefilter_, other->_impl_.typefilter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[10]);
}

// ===================================================================

class ListChannelResultMessage_ChannelInfo::_Internal {
 public:
};

ListChannelResultMessage_ChannelInfo::ListChannelResultMessage_ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ListChannelResultMessage.ChannelInfo)
}
ListChannelResultMessage_ChannelInfo::ListChannelResultMessage_ChannelInfo(const ListChannelResultMessage_ChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListChannelResultMessage_ChannelInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.channeltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channelid_, &from._impl_.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channeltype_) -
    reinterpret_cast<char*>(&_impl_.channelid_)) + sizeof(_impl_.channeltype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ListChannelResultMessage.ChannelInfo)
}

inline void ListChannelResultMessage_ChannelInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){}
    , decltype(_impl_.channelid_){0u}
    , decltype(_impl_.channeltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListChannelResultMessage_ChannelInfo::~ListChannelResultMessage_ChannelInfo() {
  // @@protoc_insertion_point(destructor:channeldpb.ListChannelResultMessage.ChannelInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListChannelResultMessage_ChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destroy();
}

void ListChannelResultMessage_ChannelInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListChannelResultMessage_ChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.ClearToEmpty();
  ::memset(&_impl_.channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channeltype_) -
      reinterpret_cast<char*>(&_impl_.channelid_)) + sizeof(_impl_.channeltype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChannelResultMessage_ChannelInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelType channelType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::channeldpb::ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      // string metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "channeldpb.ListChannelResultMessage.ChannelInfo.metadata"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListChannelResultMessage_ChannelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channelid(), target);
  }

  // .channeldpb.ChannelType channelType = 2;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channeltype(), target);
  }

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.ListChannelResultMessage.ChannelInfo.metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ListChannelResultMessage.ChannelInfo)
  return target;
}

size_t ListChannelResultMessage_ChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // uint32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channelid());
  }

  // .channeldpb.ChannelType channelType = 2;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChannelResultMessage_ChannelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListChannelResultMessage_ChannelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChannelResultMessage_ChannelInfo::GetClassData() const { return &_class_data_; }


void ListChannelResultMessage_ChannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListChannelResultMessage_ChannelInfo*>(&to_msg);
  auto& from = static_cast<const ListChannelResultMessage_ChannelInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListChannelResultMessage_ChannelInfo::CopyFrom(const ListChannelResultMessage_ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ListChannelResultMessage.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelResultMessage_ChannelInfo::IsInitialized() const {
  return true;
}

void ListChannelResultMessage_ChannelInfo::InternalSwap(ListChannelResultMessage_ChannelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListChannelResultMessage_ChannelInfo, _impl_.channeltype_)
      + sizeof(ListChannelResultMessage_ChannelInfo::_impl_.channeltype_)
      - PROTOBUF_FIELD_OFFSET(ListChannelResultMessage_ChannelInfo, _impl_.channelid_)>(
          reinterpret_cast<char*>(&_impl_.channelid_),
          reinterpret_cast<char*>(&other->_impl_.channelid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelResultMessage_ChannelInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[11]);
}

// ===================================================================

class ListChannelResultMessage::_Internal {
 public:
};

ListChannelResultMessage::ListChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ListChannelResultMessage)
}
ListChannelResultMessage::ListChannelResultMessage(const ListChannelResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListChannelResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.ListChannelResultMessage)
}

inline void ListChannelResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListChannelResultMessage::~ListChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ListChannelResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListChannelResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channels_.~RepeatedPtrField();
}

void ListChannelResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ListChannelResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChannelResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListChannelResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ListChannelResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ListChannelResultMessage)
  return target;
}

size_t ListChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ListChannelResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .channeldpb.ListChannelResultMessage.ChannelInfo channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_impl_.channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChannelResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListChannelResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChannelResultMessage::GetClassData() const { return &_class_data_; }


void ListChannelResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListChannelResultMessage*>(&to_msg);
  auto& from = static_cast<const ListChannelResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ListChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channels_.MergeFrom(from._impl_.channels_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListChannelResultMessage::CopyFrom(const ListChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ListChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelResultMessage::IsInitialized() const {
  return true;
}

void ListChannelResultMessage::InternalSwap(ListChannelResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[12]);
}

// ===================================================================

class SubscribedToChannelMessage::_Internal {
 public:
  static const ::channeldpb::ChannelSubscriptionOptions& suboptions(const SubscribedToChannelMessage* msg);
};

const ::channeldpb::ChannelSubscriptionOptions&
SubscribedToChannelMessage::_Internal::suboptions(const SubscribedToChannelMessage* msg) {
  return *msg->_impl_.suboptions_;
}
SubscribedToChannelMessage::SubscribedToChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.SubscribedToChannelMessage)
}
SubscribedToChannelMessage::SubscribedToChannelMessage(const SubscribedToChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribedToChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.suboptions_){nullptr}
    , decltype(_impl_.connid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_suboptions()) {
    _this->_impl_.suboptions_ = new ::channeldpb::ChannelSubscriptionOptions(*from._impl_.suboptions_);
  }
  _this->_impl_.connid_ = from._impl_.connid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.SubscribedToChannelMessage)
}

inline void SubscribedToChannelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.suboptions_){nullptr}
    , decltype(_impl_.connid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribedToChannelMessage::~SubscribedToChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.SubscribedToChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribedToChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.suboptions_;
}

void SubscribedToChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribedToChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SubscribedToChannelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.suboptions_ != nullptr) {
    delete _impl_.suboptions_;
  }
  _impl_.suboptions_ = nullptr;
  _impl_.connid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedToChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_suboptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedToChannelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SubscribedToChannelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connid(), target);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->_internal_has_suboptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::suboptions(this),
        _Internal::suboptions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SubscribedToChannelMessage)
  return target;
}

size_t SubscribedToChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SubscribedToChannelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->_internal_has_suboptions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.suboptions_);
  }

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedToChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribedToChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedToChannelMessage::GetClassData() const { return &_class_data_; }


void SubscribedToChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribedToChannelMessage*>(&to_msg);
  auto& from = static_cast<const SubscribedToChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SubscribedToChannelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_suboptions()) {
    _this->_internal_mutable_suboptions()->::channeldpb::ChannelSubscriptionOptions::MergeFrom(
        from._internal_suboptions());
  }
  if (from._internal_connid() != 0) {
    _this->_internal_set_connid(from._internal_connid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedToChannelMessage::CopyFrom(const SubscribedToChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SubscribedToChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedToChannelMessage::IsInitialized() const {
  return true;
}

void SubscribedToChannelMessage::InternalSwap(SubscribedToChannelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribedToChannelMessage, _impl_.connid_)
      + sizeof(SubscribedToChannelMessage::_impl_.connid_)
      - PROTOBUF_FIELD_OFFSET(SubscribedToChannelMessage, _impl_.suboptions_)>(
          reinterpret_cast<char*>(&_impl_.suboptions_),
          reinterpret_cast<char*>(&other->_impl_.suboptions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedToChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[13]);
}

// ===================================================================

class SubscribedToChannelResultMessage::_Internal {
 public:
  static const ::channeldpb::ChannelSubscriptionOptions& suboptions(const SubscribedToChannelResultMessage* msg);
};

const ::channeldpb::ChannelSubscriptionOptions&
SubscribedToChannelResultMessage::_Internal::suboptions(const SubscribedToChannelResultMessage* msg) {
  return *msg->_impl_.suboptions_;
}
SubscribedToChannelResultMessage::SubscribedToChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.SubscribedToChannelResultMessage)
}
SubscribedToChannelResultMessage::SubscribedToChannelResultMessage(const SubscribedToChannelResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribedToChannelResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.suboptions_){nullptr}
    , decltype(_impl_.connid_){}
    , decltype(_impl_.conntype_){}
    , decltype(_impl_.channeltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_suboptions()) {
    _this->_impl_.suboptions_ = new ::channeldpb::ChannelSubscriptionOptions(*from._impl_.suboptions_);
  }
  ::memcpy(&_impl_.connid_, &from._impl_.connid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channeltype_) -
    reinterpret_cast<char*>(&_impl_.connid_)) + sizeof(_impl_.channeltype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.SubscribedToChannelResultMessage)
}

inline void SubscribedToChannelResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.suboptions_){nullptr}
    , decltype(_impl_.connid_){0u}
    , decltype(_impl_.conntype_){0}
    , decltype(_impl_.channeltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribedToChannelResultMessage::~SubscribedToChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.SubscribedToChannelResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribedToChannelResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.suboptions_;
}

void SubscribedToChannelResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribedToChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SubscribedToChannelResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.suboptions_ != nullptr) {
    delete _impl_.suboptions_;
  }
  _impl_.suboptions_ = nullptr;
  ::memset(&_impl_.connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channeltype_) -
      reinterpret_cast<char*>(&_impl_.connid_)) + sizeof(_impl_.channeltype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribedToChannelResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_suboptions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ConnectionType connType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_conntype(static_cast<::channeldpb::ConnectionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelType channelType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::channeldpb::ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribedToChannelResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SubscribedToChannelResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connid(), target);
  }

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->_internal_has_suboptions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::suboptions(this),
        _Internal::suboptions(this).GetCachedSize(), target, stream);
  }

  // .channeldpb.ConnectionType connType = 3;
  if (this->_internal_conntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_conntype(), target);
  }

  // .channeldpb.ChannelType channelType = 4;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_channeltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SubscribedToChannelResultMessage)
  return target;
}

size_t SubscribedToChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SubscribedToChannelResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .channeldpb.ChannelSubscriptionOptions subOptions = 2;
  if (this->_internal_has_suboptions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.suboptions_);
  }

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connid());
  }

  // .channeldpb.ConnectionType connType = 3;
  if (this->_internal_conntype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_conntype());
  }

  // .channeldpb.ChannelType channelType = 4;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribedToChannelResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribedToChannelResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribedToChannelResultMessage::GetClassData() const { return &_class_data_; }


void SubscribedToChannelResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribedToChannelResultMessage*>(&to_msg);
  auto& from = static_cast<const SubscribedToChannelResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SubscribedToChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_suboptions()) {
    _this->_internal_mutable_suboptions()->::channeldpb::ChannelSubscriptionOptions::MergeFrom(
        from._internal_suboptions());
  }
  if (from._internal_connid() != 0) {
    _this->_internal_set_connid(from._internal_connid());
  }
  if (from._internal_conntype() != 0) {
    _this->_internal_set_conntype(from._internal_conntype());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedToChannelResultMessage::CopyFrom(const SubscribedToChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SubscribedToChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribedToChannelResultMessage::IsInitialized() const {
  return true;
}

void SubscribedToChannelResultMessage::InternalSwap(SubscribedToChannelResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribedToChannelResultMessage, _impl_.channeltype_)
      + sizeof(SubscribedToChannelResultMessage::_impl_.channeltype_)
      - PROTOBUF_FIELD_OFFSET(SubscribedToChannelResultMessage, _impl_.suboptions_)>(
          reinterpret_cast<char*>(&_impl_.suboptions_),
          reinterpret_cast<char*>(&other->_impl_.suboptions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribedToChannelResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[14]);
}

// ===================================================================

class UnsubscribedFromChannelMessage::_Internal {
 public:
};

UnsubscribedFromChannelMessage::UnsubscribedFromChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.UnsubscribedFromChannelMessage)
}
UnsubscribedFromChannelMessage::UnsubscribedFromChannelMessage(const UnsubscribedFromChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsubscribedFromChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.connid_ = from._impl_.connid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.UnsubscribedFromChannelMessage)
}

inline void UnsubscribedFromChannelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsubscribedFromChannelMessage::~UnsubscribedFromChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.UnsubscribedFromChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsubscribedFromChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsubscribedFromChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsubscribedFromChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.UnsubscribedFromChannelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribedFromChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribedFromChannelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.UnsubscribedFromChannelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.UnsubscribedFromChannelMessage)
  return target;
}

size_t UnsubscribedFromChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.UnsubscribedFromChannelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribedFromChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsubscribedFromChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribedFromChannelMessage::GetClassData() const { return &_class_data_; }


void UnsubscribedFromChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsubscribedFromChannelMessage*>(&to_msg);
  auto& from = static_cast<const UnsubscribedFromChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.UnsubscribedFromChannelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connid() != 0) {
    _this->_internal_set_connid(from._internal_connid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribedFromChannelMessage::CopyFrom(const UnsubscribedFromChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.UnsubscribedFromChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribedFromChannelMessage::IsInitialized() const {
  return true;
}

void UnsubscribedFromChannelMessage::InternalSwap(UnsubscribedFromChannelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.connid_, other->_impl_.connid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribedFromChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[15]);
}

// ===================================================================

class UnsubscribedFromChannelResultMessage::_Internal {
 public:
};

UnsubscribedFromChannelResultMessage::UnsubscribedFromChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.UnsubscribedFromChannelResultMessage)
}
UnsubscribedFromChannelResultMessage::UnsubscribedFromChannelResultMessage(const UnsubscribedFromChannelResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsubscribedFromChannelResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){}
    , decltype(_impl_.conntype_){}
    , decltype(_impl_.channeltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.connid_, &from._impl_.connid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channeltype_) -
    reinterpret_cast<char*>(&_impl_.connid_)) + sizeof(_impl_.channeltype_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.UnsubscribedFromChannelResultMessage)
}

inline void UnsubscribedFromChannelResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){0u}
    , decltype(_impl_.conntype_){0}
    , decltype(_impl_.channeltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsubscribedFromChannelResultMessage::~UnsubscribedFromChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.UnsubscribedFromChannelResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsubscribedFromChannelResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsubscribedFromChannelResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsubscribedFromChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.UnsubscribedFromChannelResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.connid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channeltype_) -
      reinterpret_cast<char*>(&_impl_.connid_)) + sizeof(_impl_.channeltype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribedFromChannelResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ConnectionType connType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_conntype(static_cast<::channeldpb::ConnectionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.ChannelType channelType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::channeldpb::ChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribedFromChannelResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.UnsubscribedFromChannelResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connid(), target);
  }

  // .channeldpb.ConnectionType connType = 2;
  if (this->_internal_conntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_conntype(), target);
  }

  // .channeldpb.ChannelType channelType = 3;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channeltype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.UnsubscribedFromChannelResultMessage)
  return target;
}

size_t UnsubscribedFromChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.UnsubscribedFromChannelResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connid());
  }

  // .channeldpb.ConnectionType connType = 2;
  if (this->_internal_conntype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_conntype());
  }

  // .channeldpb.ChannelType channelType = 3;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribedFromChannelResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsubscribedFromChannelResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribedFromChannelResultMessage::GetClassData() const { return &_class_data_; }


void UnsubscribedFromChannelResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsubscribedFromChannelResultMessage*>(&to_msg);
  auto& from = static_cast<const UnsubscribedFromChannelResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.UnsubscribedFromChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connid() != 0) {
    _this->_internal_set_connid(from._internal_connid());
  }
  if (from._internal_conntype() != 0) {
    _this->_internal_set_conntype(from._internal_conntype());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribedFromChannelResultMessage::CopyFrom(const UnsubscribedFromChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.UnsubscribedFromChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribedFromChannelResultMessage::IsInitialized() const {
  return true;
}

void UnsubscribedFromChannelResultMessage::InternalSwap(UnsubscribedFromChannelResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnsubscribedFromChannelResultMessage, _impl_.channeltype_)
      + sizeof(UnsubscribedFromChannelResultMessage::_impl_.channeltype_)
      - PROTOBUF_FIELD_OFFSET(UnsubscribedFromChannelResultMessage, _impl_.connid_)>(
          reinterpret_cast<char*>(&_impl_.connid_),
          reinterpret_cast<char*>(&other->_impl_.connid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribedFromChannelResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[16]);
}

// ===================================================================

class ChannelDataUpdateMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const ChannelDataUpdateMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ChannelDataUpdateMessage::_Internal::data(const ChannelDataUpdateMessage* msg) {
  return *msg->_impl_.data_;
}
void ChannelDataUpdateMessage::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
ChannelDataUpdateMessage::ChannelDataUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ChannelDataUpdateMessage)
}
ChannelDataUpdateMessage::ChannelDataUpdateMessage(const ChannelDataUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelDataUpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.contextconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  _this->_impl_.contextconnid_ = from._impl_.contextconnid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelDataUpdateMessage)
}

inline void ChannelDataUpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.contextconnid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelDataUpdateMessage::~ChannelDataUpdateMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelDataUpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelDataUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ChannelDataUpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelDataUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelDataUpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.contextconnid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDataUpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 contextConnId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.contextconnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelDataUpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelDataUpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint32 contextConnId = 2;
  if (this->_internal_contextconnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_contextconnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelDataUpdateMessage)
  return target;
}

size_t ChannelDataUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelDataUpdateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint32 contextConnId = 2;
  if (this->_internal_contextconnid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contextconnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelDataUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelDataUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelDataUpdateMessage::GetClassData() const { return &_class_data_; }


void ChannelDataUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelDataUpdateMessage*>(&to_msg);
  auto& from = static_cast<const ChannelDataUpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelDataUpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  if (from._internal_contextconnid() != 0) {
    _this->_internal_set_contextconnid(from._internal_contextconnid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelDataUpdateMessage::CopyFrom(const ChannelDataUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelDataUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDataUpdateMessage::IsInitialized() const {
  return true;
}

void ChannelDataUpdateMessage::InternalSwap(ChannelDataUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDataUpdateMessage, _impl_.contextconnid_)
      + sizeof(ChannelDataUpdateMessage::_impl_.contextconnid_)
      - PROTOBUF_FIELD_OFFSET(ChannelDataUpdateMessage, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDataUpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[17]);
}

// ===================================================================

class DisconnectMessage::_Internal {
 public:
};

DisconnectMessage::DisconnectMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.DisconnectMessage)
}
DisconnectMessage::DisconnectMessage(const DisconnectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DisconnectMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.connid_ = from._impl_.connid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.DisconnectMessage)
}

inline void DisconnectMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DisconnectMessage::~DisconnectMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.DisconnectMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DisconnectMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.DisconnectMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisconnectMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 connId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.connid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisconnectMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.DisconnectMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.DisconnectMessage)
  return target;
}

size_t DisconnectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.DisconnectMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 connId = 1;
  if (this->_internal_connid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisconnectMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DisconnectMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisconnectMessage::GetClassData() const { return &_class_data_; }


void DisconnectMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DisconnectMessage*>(&to_msg);
  auto& from = static_cast<const DisconnectMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.DisconnectMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_connid() != 0) {
    _this->_internal_set_connid(from._internal_connid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisconnectMessage::CopyFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.DisconnectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectMessage::IsInitialized() const {
  return true;
}

void DisconnectMessage::InternalSwap(DisconnectMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.connid_, other->_impl_.connid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[18]);
}

// ===================================================================

class SpatialInfo::_Internal {
 public:
};

SpatialInfo::SpatialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.SpatialInfo)
}
SpatialInfo::SpatialInfo(const SpatialInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpatialInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.SpatialInfo)
}

inline void SpatialInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpatialInfo::~SpatialInfo() {
  // @@protoc_insertion_point(destructor:channeldpb.SpatialInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpatialInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpatialInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpatialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SpatialInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SpatialInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SpatialInfo)
  return target;
}

size_t SpatialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SpatialInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpatialInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialInfo::GetClassData() const { return &_class_data_; }


void SpatialInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpatialInfo*>(&to_msg);
  auto& from = static_cast<const SpatialInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SpatialInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialInfo::CopyFrom(const SpatialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SpatialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialInfo::IsInitialized() const {
  return true;
}

void SpatialInfo::InternalSwap(SpatialInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialInfo, _impl_.z_)
      + sizeof(SpatialInfo::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(SpatialInfo, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[19]);
}

// ===================================================================

class CreateSpatialChannelsResultMessage::_Internal {
 public:
};

CreateSpatialChannelsResultMessage::CreateSpatialChannelsResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.CreateSpatialChannelsResultMessage)
}
CreateSpatialChannelsResultMessage::CreateSpatialChannelsResultMessage(const CreateSpatialChannelsResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSpatialChannelsResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spatialchannelid_){from._impl_.spatialchannelid_}
    , /*decltype(_impl_._spatialchannelid_cached_byte_size_)*/{0}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.ownerconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ownerconnid_ = from._impl_.ownerconnid_;
  // @@protoc_insertion_point(copy_constructor:channeldpb.CreateSpatialChannelsResultMessage)
}

inline void CreateSpatialChannelsResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spatialchannelid_){arena}
    , /*decltype(_impl_._spatialchannelid_cached_byte_size_)*/{0}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.ownerconnid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSpatialChannelsResultMessage::~CreateSpatialChannelsResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.CreateSpatialChannelsResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSpatialChannelsResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spatialchannelid_.~RepeatedField();
  _impl_.metadata_.Destroy();
}

void CreateSpatialChannelsResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSpatialChannelsResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.CreateSpatialChannelsResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spatialchannelid_.Clear();
  _impl_.metadata_.ClearToEmpty();
  _impl_.ownerconnid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSpatialChannelsResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 spatialChannelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_spatialchannelid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_spatialchannelid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "channeldpb.CreateSpatialChannelsResultMessage.metadata"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ownerConnId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ownerconnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSpatialChannelsResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.CreateSpatialChannelsResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 spatialChannelId = 1;
  {
    int byte_size = _impl_._spatialchannelid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_spatialchannelid(), byte_size, target);
    }
  }

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "channeldpb.CreateSpatialChannelsResultMessage.metadata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  // uint32 ownerConnId = 3;
  if (this->_internal_ownerconnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ownerconnid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.CreateSpatialChannelsResultMessage)
  return target;
}

size_t CreateSpatialChannelsResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.CreateSpatialChannelsResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 spatialChannelId = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.spatialchannelid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._spatialchannelid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string metadata = 2;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // uint32 ownerConnId = 3;
  if (this->_internal_ownerconnid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ownerconnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSpatialChannelsResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSpatialChannelsResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSpatialChannelsResultMessage::GetClassData() const { return &_class_data_; }


void CreateSpatialChannelsResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSpatialChannelsResultMessage*>(&to_msg);
  auto& from = static_cast<const CreateSpatialChannelsResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.CreateSpatialChannelsResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.spatialchannelid_.MergeFrom(from._impl_.spatialchannelid_);
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_ownerconnid() != 0) {
    _this->_internal_set_ownerconnid(from._internal_ownerconnid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSpatialChannelsResultMessage::CopyFrom(const CreateSpatialChannelsResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.CreateSpatialChannelsResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSpatialChannelsResultMessage::IsInitialized() const {
  return true;
}

void CreateSpatialChannelsResultMessage::InternalSwap(CreateSpatialChannelsResultMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.spatialchannelid_.InternalSwap(&other->_impl_.spatialchannelid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  swap(_impl_.ownerconnid_, other->_impl_.ownerconnid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSpatialChannelsResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[20]);
}

// ===================================================================

class QuerySpatialChannelMessage::_Internal {
 public:
};

QuerySpatialChannelMessage::QuerySpatialChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.QuerySpatialChannelMessage)
}
QuerySpatialChannelMessage::QuerySpatialChannelMessage(const QuerySpatialChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpatialChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spatialinfo_){from._impl_.spatialinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.QuerySpatialChannelMessage)
}

inline void QuerySpatialChannelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spatialinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySpatialChannelMessage::~QuerySpatialChannelMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.QuerySpatialChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpatialChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spatialinfo_.~RepeatedPtrField();
}

void QuerySpatialChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpatialChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.QuerySpatialChannelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spatialinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpatialChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .channeldpb.SpatialInfo spatialInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spatialinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuerySpatialChannelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.QuerySpatialChannelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spatialinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_spatialinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.QuerySpatialChannelMessage)
  return target;
}

size_t QuerySpatialChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.QuerySpatialChannelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialInfo spatialInfo = 1;
  total_size += 1UL * this->_internal_spatialinfo_size();
  for (const auto& msg : this->_impl_.spatialinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpatialChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpatialChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpatialChannelMessage::GetClassData() const { return &_class_data_; }


void QuerySpatialChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpatialChannelMessage*>(&to_msg);
  auto& from = static_cast<const QuerySpatialChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.QuerySpatialChannelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.spatialinfo_.MergeFrom(from._impl_.spatialinfo_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpatialChannelMessage::CopyFrom(const QuerySpatialChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.QuerySpatialChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpatialChannelMessage::IsInitialized() const {
  return true;
}

void QuerySpatialChannelMessage::InternalSwap(QuerySpatialChannelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.spatialinfo_.InternalSwap(&other->_impl_.spatialinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpatialChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[21]);
}

// ===================================================================

class QuerySpatialChannelResultMessage::_Internal {
 public:
};

QuerySpatialChannelResultMessage::QuerySpatialChannelResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.QuerySpatialChannelResultMessage)
}
QuerySpatialChannelResultMessage::QuerySpatialChannelResultMessage(const QuerySpatialChannelResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpatialChannelResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channelid_){from._impl_.channelid_}
    , /*decltype(_impl_._channelid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.QuerySpatialChannelResultMessage)
}

inline void QuerySpatialChannelResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.channelid_){arena}
    , /*decltype(_impl_._channelid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySpatialChannelResultMessage::~QuerySpatialChannelResultMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.QuerySpatialChannelResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpatialChannelResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channelid_.~RepeatedField();
}

void QuerySpatialChannelResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpatialChannelResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.QuerySpatialChannelResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channelid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpatialChannelResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channelid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_channelid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuerySpatialChannelResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.QuerySpatialChannelResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channelId = 1;
  {
    int byte_size = _impl_._channelid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_channelid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.QuerySpatialChannelResultMessage)
  return target;
}

size_t QuerySpatialChannelResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.QuerySpatialChannelResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channelId = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.channelid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._channelid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpatialChannelResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpatialChannelResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpatialChannelResultMessage::GetClassData() const { return &_class_data_; }


void QuerySpatialChannelResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpatialChannelResultMessage*>(&to_msg);
  auto& from = static_cast<const QuerySpatialChannelResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.QuerySpatialChannelResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.channelid_.MergeFrom(from._impl_.channelid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpatialChannelResultMessage::CopyFrom(const QuerySpatialChannelResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.QuerySpatialChannelResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpatialChannelResultMessage::IsInitialized() const {
  return true;
}

void QuerySpatialChannelResultMessage::InternalSwap(QuerySpatialChannelResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channelid_.InternalSwap(&other->_impl_.channelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpatialChannelResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[22]);
}

// ===================================================================

class ChannelDataHandoverMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const ChannelDataHandoverMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ChannelDataHandoverMessage::_Internal::data(const ChannelDataHandoverMessage* msg) {
  return *msg->_impl_.data_;
}
void ChannelDataHandoverMessage::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
ChannelDataHandoverMessage::ChannelDataHandoverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.ChannelDataHandoverMessage)
}
ChannelDataHandoverMessage::ChannelDataHandoverMessage(const ChannelDataHandoverMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelDataHandoverMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.srcchannelid_){}
    , decltype(_impl_.dstchannelid_){}
    , decltype(_impl_.contextconnid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  ::memcpy(&_impl_.srcchannelid_, &from._impl_.srcchannelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contextconnid_) -
    reinterpret_cast<char*>(&_impl_.srcchannelid_)) + sizeof(_impl_.contextconnid_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.ChannelDataHandoverMessage)
}

inline void ChannelDataHandoverMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.srcchannelid_){0u}
    , decltype(_impl_.dstchannelid_){0u}
    , decltype(_impl_.contextconnid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChannelDataHandoverMessage::~ChannelDataHandoverMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.ChannelDataHandoverMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelDataHandoverMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ChannelDataHandoverMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelDataHandoverMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.ChannelDataHandoverMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  ::memset(&_impl_.srcchannelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.contextconnid_) -
      reinterpret_cast<char*>(&_impl_.srcchannelid_)) + sizeof(_impl_.contextconnid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDataHandoverMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 srcChannelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.srcchannelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dstChannelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dstchannelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 contextConnId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.contextconnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelDataHandoverMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.ChannelDataHandoverMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 srcChannelId = 1;
  if (this->_internal_srcchannelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_srcchannelid(), target);
  }

  // uint32 dstChannelId = 2;
  if (this->_internal_dstchannelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dstchannelid(), target);
  }

  // uint32 contextConnId = 3;
  if (this->_internal_contextconnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_contextconnid(), target);
  }

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.ChannelDataHandoverMessage)
  return target;
}

size_t ChannelDataHandoverMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.ChannelDataHandoverMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any data = 4;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint32 srcChannelId = 1;
  if (this->_internal_srcchannelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_srcchannelid());
  }

  // uint32 dstChannelId = 2;
  if (this->_internal_dstchannelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dstchannelid());
  }

  // uint32 contextConnId = 3;
  if (this->_internal_contextconnid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contextconnid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelDataHandoverMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelDataHandoverMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelDataHandoverMessage::GetClassData() const { return &_class_data_; }


void ChannelDataHandoverMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelDataHandoverMessage*>(&to_msg);
  auto& from = static_cast<const ChannelDataHandoverMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.ChannelDataHandoverMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  if (from._internal_srcchannelid() != 0) {
    _this->_internal_set_srcchannelid(from._internal_srcchannelid());
  }
  if (from._internal_dstchannelid() != 0) {
    _this->_internal_set_dstchannelid(from._internal_dstchannelid());
  }
  if (from._internal_contextconnid() != 0) {
    _this->_internal_set_contextconnid(from._internal_contextconnid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelDataHandoverMessage::CopyFrom(const ChannelDataHandoverMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.ChannelDataHandoverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDataHandoverMessage::IsInitialized() const {
  return true;
}

void ChannelDataHandoverMessage::InternalSwap(ChannelDataHandoverMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDataHandoverMessage, _impl_.contextconnid_)
      + sizeof(ChannelDataHandoverMessage::_impl_.contextconnid_)
      - PROTOBUF_FIELD_OFFSET(ChannelDataHandoverMessage, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDataHandoverMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[23]);
}

// ===================================================================

class SpatialRegion::_Internal {
 public:
  static const ::channeldpb::SpatialInfo& min(const SpatialRegion* msg);
  static const ::channeldpb::SpatialInfo& max(const SpatialRegion* msg);
};

const ::channeldpb::SpatialInfo&
SpatialRegion::_Internal::min(const SpatialRegion* msg) {
  return *msg->_impl_.min_;
}
const ::channeldpb::SpatialInfo&
SpatialRegion::_Internal::max(const SpatialRegion* msg) {
  return *msg->_impl_.max_;
}
SpatialRegion::SpatialRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.SpatialRegion)
}
SpatialRegion::SpatialRegion(const SpatialRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpatialRegion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.serverindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    _this->_impl_.min_ = new ::channeldpb::SpatialInfo(*from._impl_.min_);
  }
  if (from._internal_has_max()) {
    _this->_impl_.max_ = new ::channeldpb::SpatialInfo(*from._impl_.max_);
  }
  ::memcpy(&_impl_.channelid_, &from._impl_.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverindex_) -
    reinterpret_cast<char*>(&_impl_.channelid_)) + sizeof(_impl_.serverindex_));
  // @@protoc_insertion_point(copy_constructor:channeldpb.SpatialRegion)
}

inline void SpatialRegion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
    , decltype(_impl_.channelid_){0u}
    , decltype(_impl_.serverindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpatialRegion::~SpatialRegion() {
  // @@protoc_insertion_point(destructor:channeldpb.SpatialRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpatialRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.min_;
  if (this != internal_default_instance()) delete _impl_.max_;
}

void SpatialRegion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpatialRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SpatialRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.min_ != nullptr) {
    delete _impl_.min_;
  }
  _impl_.min_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_ != nullptr) {
    delete _impl_.max_;
  }
  _impl_.max_ = nullptr;
  ::memset(&_impl_.channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverindex_) -
      reinterpret_cast<char*>(&_impl_.channelid_)) + sizeof(_impl_.serverindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .channeldpb.SpatialInfo min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .channeldpb.SpatialInfo max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 channelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serverindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SpatialRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .channeldpb.SpatialInfo min = 1;
  if (this->_internal_has_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::min(this),
        _Internal::min(this).GetCachedSize(), target, stream);
  }

  // .channeldpb.SpatialInfo max = 2;
  if (this->_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  // uint32 channelId = 3;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channelid(), target);
  }

  // uint32 serverIndex = 4;
  if (this->_internal_serverindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_serverindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SpatialRegion)
  return target;
}

size_t SpatialRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SpatialRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .channeldpb.SpatialInfo min = 1;
  if (this->_internal_has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_);
  }

  // .channeldpb.SpatialInfo max = 2;
  if (this->_internal_has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_);
  }

  // uint32 channelId = 3;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channelid());
  }

  // uint32 serverIndex = 4;
  if (this->_internal_serverindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialRegion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpatialRegion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialRegion::GetClassData() const { return &_class_data_; }


void SpatialRegion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpatialRegion*>(&to_msg);
  auto& from = static_cast<const SpatialRegion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SpatialRegion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min()) {
    _this->_internal_mutable_min()->::channeldpb::SpatialInfo::MergeFrom(
        from._internal_min());
  }
  if (from._internal_has_max()) {
    _this->_internal_mutable_max()->::channeldpb::SpatialInfo::MergeFrom(
        from._internal_max());
  }
  if (from._internal_channelid() != 0) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_serverindex() != 0) {
    _this->_internal_set_serverindex(from._internal_serverindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialRegion::CopyFrom(const SpatialRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SpatialRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialRegion::IsInitialized() const {
  return true;
}

void SpatialRegion::InternalSwap(SpatialRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialRegion, _impl_.serverindex_)
      + sizeof(SpatialRegion::_impl_.serverindex_)
      - PROTOBUF_FIELD_OFFSET(SpatialRegion, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialRegion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[24]);
}

// ===================================================================

class SpatialRegionsUpdateMessage::_Internal {
 public:
};

SpatialRegionsUpdateMessage::SpatialRegionsUpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:channeldpb.SpatialRegionsUpdateMessage)
}
SpatialRegionsUpdateMessage::SpatialRegionsUpdateMessage(const SpatialRegionsUpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpatialRegionsUpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){from._impl_.regions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.SpatialRegionsUpdateMessage)
}

inline void SpatialRegionsUpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpatialRegionsUpdateMessage::~SpatialRegionsUpdateMessage() {
  // @@protoc_insertion_point(destructor:channeldpb.SpatialRegionsUpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpatialRegionsUpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regions_.~RepeatedPtrField();
}

void SpatialRegionsUpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpatialRegionsUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:channeldpb.SpatialRegionsUpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialRegionsUpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .channeldpb.SpatialRegion regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialRegionsUpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:channeldpb.SpatialRegionsUpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialRegion regions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channeldpb.SpatialRegionsUpdateMessage)
  return target;
}

size_t SpatialRegionsUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:channeldpb.SpatialRegionsUpdateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .channeldpb.SpatialRegion regions = 1;
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->_impl_.regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialRegionsUpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpatialRegionsUpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialRegionsUpdateMessage::GetClassData() const { return &_class_data_; }


void SpatialRegionsUpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpatialRegionsUpdateMessage*>(&to_msg);
  auto& from = static_cast<const SpatialRegionsUpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:channeldpb.SpatialRegionsUpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regions_.MergeFrom(from._impl_.regions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialRegionsUpdateMessage::CopyFrom(const SpatialRegionsUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:channeldpb.SpatialRegionsUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialRegionsUpdateMessage::IsInitialized() const {
  return true;
}

void SpatialRegionsUpdateMessage::InternalSwap(SpatialRegionsUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialRegionsUpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[25]);
}

// ===================================================================

class DebugGetSpatialRegionsMessage::_Internal {
 public:
};

DebugGetSpatialRegionsMessage::DebugGetSpatialRegionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:channeldpb.DebugGetSpatialRegionsMessage)
}
DebugGetSpatialRegionsMessage::DebugGetSpatialRegionsMessage(const DebugGetSpatialRegionsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DebugGetSpatialRegionsMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:channeldpb.DebugGetSpatialRegionsMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugGetSpatialRegionsMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugGetSpatialRegionsMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DebugGetSpatialRegionsMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_channeld_2eproto_getter, &descriptor_table_channeld_2eproto_once,
      file_level_metadata_channeld_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace channeldpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::channeldpb::Packet*
Arena::CreateMaybeMessage< ::channeldpb::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::MessagePack*
Arena::CreateMaybeMessage< ::channeldpb::MessagePack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::MessagePack >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ServerForwardMessage*
Arena::CreateMaybeMessage< ::channeldpb::ServerForwardMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ServerForwardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::AuthMessage*
Arena::CreateMaybeMessage< ::channeldpb::AuthMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::AuthMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::AuthResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::AuthResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::AuthResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ChannelSubscriptionOptions*
Arena::CreateMaybeMessage< ::channeldpb::ChannelSubscriptionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ChannelSubscriptionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ChannelDataMergeOptions*
Arena::CreateMaybeMessage< ::channeldpb::ChannelDataMergeOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ChannelDataMergeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::CreateChannelMessage*
Arena::CreateMaybeMessage< ::channeldpb::CreateChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::CreateChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::CreateChannelResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::CreateChannelResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::CreateChannelResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::RemoveChannelMessage*
Arena::CreateMaybeMessage< ::channeldpb::RemoveChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::RemoveChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ListChannelMessage*
Arena::CreateMaybeMessage< ::channeldpb::ListChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ListChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ListChannelResultMessage_ChannelInfo*
Arena::CreateMaybeMessage< ::channeldpb::ListChannelResultMessage_ChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ListChannelResultMessage_ChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ListChannelResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::ListChannelResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ListChannelResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::SubscribedToChannelMessage*
Arena::CreateMaybeMessage< ::channeldpb::SubscribedToChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::SubscribedToChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::SubscribedToChannelResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::SubscribedToChannelResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::SubscribedToChannelResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::UnsubscribedFromChannelMessage*
Arena::CreateMaybeMessage< ::channeldpb::UnsubscribedFromChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::UnsubscribedFromChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::UnsubscribedFromChannelResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::UnsubscribedFromChannelResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::UnsubscribedFromChannelResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ChannelDataUpdateMessage*
Arena::CreateMaybeMessage< ::channeldpb::ChannelDataUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ChannelDataUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::DisconnectMessage*
Arena::CreateMaybeMessage< ::channeldpb::DisconnectMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::DisconnectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::SpatialInfo*
Arena::CreateMaybeMessage< ::channeldpb::SpatialInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::SpatialInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::CreateSpatialChannelsResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::CreateSpatialChannelsResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::CreateSpatialChannelsResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::QuerySpatialChannelMessage*
Arena::CreateMaybeMessage< ::channeldpb::QuerySpatialChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::QuerySpatialChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::QuerySpatialChannelResultMessage*
Arena::CreateMaybeMessage< ::channeldpb::QuerySpatialChannelResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::QuerySpatialChannelResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::ChannelDataHandoverMessage*
Arena::CreateMaybeMessage< ::channeldpb::ChannelDataHandoverMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::ChannelDataHandoverMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::SpatialRegion*
Arena::CreateMaybeMessage< ::channeldpb::SpatialRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::SpatialRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::SpatialRegionsUpdateMessage*
Arena::CreateMaybeMessage< ::channeldpb::SpatialRegionsUpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::SpatialRegionsUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::channeldpb::DebugGetSpatialRegionsMessage*
Arena::CreateMaybeMessage< ::channeldpb::DebugGetSpatialRegionsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::channeldpb::DebugGetSpatialRegionsMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

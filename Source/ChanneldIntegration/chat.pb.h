// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chatpb {
class ChatChannelData;
struct ChatChannelDataDefaultTypeInternal;
extern ChatChannelDataDefaultTypeInternal _ChatChannelData_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
}  // namespace chatpb
PROTOBUF_NAMESPACE_OPEN
template<> ::chatpb::ChatChannelData* Arena::CreateMaybeMessage<::chatpb::ChatChannelData>(Arena*);
template<> ::chatpb::ChatMessage* Arena::CreateMaybeMessage<::chatpb::ChatMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chatpb {

// ===================================================================

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatpb.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatpb.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kContentFieldNumber = 3,
    kSendTimeFieldNumber = 2,
    kSenderConnIdFieldNumber = 4,
  };
  // string sender = 1;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int64 sendTime = 2;
  void clear_sendtime();
  int64_t sendtime() const;
  void set_sendtime(int64_t value);
  private:
  int64_t _internal_sendtime() const;
  void _internal_set_sendtime(int64_t value);
  public:

  // uint32 senderConnId = 4;
  void clear_senderconnid();
  uint32_t senderconnid() const;
  void set_senderconnid(uint32_t value);
  private:
  uint32_t _internal_senderconnid() const;
  void _internal_set_senderconnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chatpb.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int64_t sendtime_;
    uint32_t senderconnid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatChannelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatpb.ChatChannelData) */ {
 public:
  inline ChatChannelData() : ChatChannelData(nullptr) {}
  ~ChatChannelData() override;
  explicit PROTOBUF_CONSTEXPR ChatChannelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatChannelData(const ChatChannelData& from);
  ChatChannelData(ChatChannelData&& from) noexcept
    : ChatChannelData() {
    *this = ::std::move(from);
  }

  inline ChatChannelData& operator=(const ChatChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatChannelData& operator=(ChatChannelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatChannelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatChannelData* internal_default_instance() {
    return reinterpret_cast<const ChatChannelData*>(
               &_ChatChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatChannelData& a, ChatChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatChannelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatChannelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatChannelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatChannelData& from) {
    ChatChannelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatpb.ChatChannelData";
  }
  protected:
  explicit ChatChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMessagesFieldNumber = 1,
  };
  // repeated .chatpb.ChatMessage chatMessages = 1;
  int chatmessages_size() const;
  private:
  int _internal_chatmessages_size() const;
  public:
  void clear_chatmessages();
  ::chatpb::ChatMessage* mutable_chatmessages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chatpb::ChatMessage >*
      mutable_chatmessages();
  private:
  const ::chatpb::ChatMessage& _internal_chatmessages(int index) const;
  ::chatpb::ChatMessage* _internal_add_chatmessages();
  public:
  const ::chatpb::ChatMessage& chatmessages(int index) const;
  ::chatpb::ChatMessage* add_chatmessages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chatpb::ChatMessage >&
      chatmessages() const;

  // @@protoc_insertion_point(class_scope:chatpb.ChatChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chatpb::ChatMessage > chatmessages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// string sender = 1;
inline void ChatMessage::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender() const {
  // @@protoc_insertion_point(field_get:chatpb.ChatMessage.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_sender(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatpb.ChatMessage.sender)
}
inline std::string* ChatMessage::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:chatpb.ChatMessage.sender)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void ChatMessage::_internal_set_sender(const std::string& value) {
  
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_sender() {
  
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_sender() {
  // @@protoc_insertion_point(field_release:chatpb.ChatMessage.sender)
  return _impl_.sender_.Release();
}
inline void ChatMessage::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatpb.ChatMessage.sender)
}

// int64 sendTime = 2;
inline void ChatMessage::clear_sendtime() {
  _impl_.sendtime_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_sendtime() const {
  return _impl_.sendtime_;
}
inline int64_t ChatMessage::sendtime() const {
  // @@protoc_insertion_point(field_get:chatpb.ChatMessage.sendTime)
  return _internal_sendtime();
}
inline void ChatMessage::_internal_set_sendtime(int64_t value) {
  
  _impl_.sendtime_ = value;
}
inline void ChatMessage::set_sendtime(int64_t value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:chatpb.ChatMessage.sendTime)
}

// string content = 3;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:chatpb.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chatpb.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:chatpb.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:chatpb.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chatpb.ChatMessage.content)
}

// uint32 senderConnId = 4;
inline void ChatMessage::clear_senderconnid() {
  _impl_.senderconnid_ = 0u;
}
inline uint32_t ChatMessage::_internal_senderconnid() const {
  return _impl_.senderconnid_;
}
inline uint32_t ChatMessage::senderconnid() const {
  // @@protoc_insertion_point(field_get:chatpb.ChatMessage.senderConnId)
  return _internal_senderconnid();
}
inline void ChatMessage::_internal_set_senderconnid(uint32_t value) {
  
  _impl_.senderconnid_ = value;
}
inline void ChatMessage::set_senderconnid(uint32_t value) {
  _internal_set_senderconnid(value);
  // @@protoc_insertion_point(field_set:chatpb.ChatMessage.senderConnId)
}

// -------------------------------------------------------------------

// ChatChannelData

// repeated .chatpb.ChatMessage chatMessages = 1;
inline int ChatChannelData::_internal_chatmessages_size() const {
  return _impl_.chatmessages_.size();
}
inline int ChatChannelData::chatmessages_size() const {
  return _internal_chatmessages_size();
}
inline void ChatChannelData::clear_chatmessages() {
  _impl_.chatmessages_.Clear();
}
inline ::chatpb::ChatMessage* ChatChannelData::mutable_chatmessages(int index) {
  // @@protoc_insertion_point(field_mutable:chatpb.ChatChannelData.chatMessages)
  return _impl_.chatmessages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chatpb::ChatMessage >*
ChatChannelData::mutable_chatmessages() {
  // @@protoc_insertion_point(field_mutable_list:chatpb.ChatChannelData.chatMessages)
  return &_impl_.chatmessages_;
}
inline const ::chatpb::ChatMessage& ChatChannelData::_internal_chatmessages(int index) const {
  return _impl_.chatmessages_.Get(index);
}
inline const ::chatpb::ChatMessage& ChatChannelData::chatmessages(int index) const {
  // @@protoc_insertion_point(field_get:chatpb.ChatChannelData.chatMessages)
  return _internal_chatmessages(index);
}
inline ::chatpb::ChatMessage* ChatChannelData::_internal_add_chatmessages() {
  return _impl_.chatmessages_.Add();
}
inline ::chatpb::ChatMessage* ChatChannelData::add_chatmessages() {
  ::chatpb::ChatMessage* _add = _internal_add_chatmessages();
  // @@protoc_insertion_point(field_add:chatpb.ChatChannelData.chatMessages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chatpb::ChatMessage >&
ChatChannelData::chatmessages() const {
  // @@protoc_insertion_point(field_list:chatpb.ChatChannelData.chatMessages)
  return _impl_.chatmessages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

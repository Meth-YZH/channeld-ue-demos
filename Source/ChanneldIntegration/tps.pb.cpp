// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tps.proto

#ifdef _MSC_VER
#	pragma warning(disable: 4125)
#	pragma warning(disable: 4647)
#	pragma warning(disable: 4668)
#	pragma warning(disable: 4800)
#	pragma warning(disable: 4946)
#endif

#include "tps.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tpspb {
PROTOBUF_CONSTEXPR TestRepChannelData_ActorStatesEntry_DoNotUse::TestRepChannelData_ActorStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_ActorStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ActorStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_CharacterStatesEntry_DoNotUse::TestRepChannelData_CharacterStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_CharacterStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_CharacterStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_PlayerStatesEntry_DoNotUse::TestRepChannelData_PlayerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_PlayerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PlayerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_ControllerStatesEntry_DoNotUse::TestRepChannelData_ControllerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_ControllerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ControllerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_PlayerControllerStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PlayerControllerStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_ActorComponentStatesEntry_DoNotUse::TestRepChannelData_ActorComponentStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_ActorComponentStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ActorComponentStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData_SceneComponentStatesEntry_DoNotUse::TestRepChannelData_SceneComponentStatesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestRepChannelData_SceneComponentStatesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_SceneComponentStatesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestRepChannelData::TestRepChannelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actorstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.characterstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.playerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.controllerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.playercontrollerstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.actorcomponentstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.scenecomponentstates_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.gamestate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestRepChannelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestRepChannelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestRepChannelDataDefaultTypeInternal() {}
  union {
    TestRepChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestRepChannelDataDefaultTypeInternal _TestRepChannelData_default_instance_;
PROTOBUF_CONSTEXPR GlobalChannelData::GlobalChannelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gamestate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlobalChannelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalChannelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalChannelDataDefaultTypeInternal() {}
  union {
    GlobalChannelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalChannelDataDefaultTypeInternal _GlobalChannelData_default_instance_;
}  // namespace tpspb
static ::_pb::Metadata file_level_metadata_tps_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tps_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tps_2eproto = nullptr;

const uint32_t TableStruct_tps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.gamestate_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.actorstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.characterstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.playerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.controllerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.playercontrollerstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.actorcomponentstates_),
  PROTOBUF_FIELD_OFFSET(::tpspb::TestRepChannelData, _impl_.scenecomponentstates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpspb::GlobalChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tpspb::GlobalChannelData, _impl_.gamestate_),
};
static const ::_pbi::MigrationSchema schemas_tps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse)},
  { 30, 38, -1, sizeof(::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse)},
  { 40, 48, -1, sizeof(::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse)},
  { 50, 58, -1, sizeof(::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse)},
  { 60, 68, -1, sizeof(::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse)},
  { 70, -1, -1, sizeof(::tpspb::TestRepChannelData)},
  { 84, -1, -1, sizeof(::tpspb::GlobalChannelData)},
};

static const ::_pb::Message* const file_default_instances_tps_2eproto[] = {
  &::tpspb::_TestRepChannelData_ActorStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_CharacterStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_PlayerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_ControllerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_PlayerControllerStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_ActorComponentStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_SceneComponentStatesEntry_DoNotUse_default_instance_._instance,
  &::tpspb::_TestRepChannelData_default_instance_._instance,
  &::tpspb::_GlobalChannelData_default_instance_._instance,
};

const char descriptor_table_protodef_tps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttps.proto\022\005tpspb\032\023unreal_common.proto\""
  "\251\t\n\022TestRepChannelData\022*\n\tgameState\030\001 \001("
  "\0132\027.unrealpb.GameStateBase\022\?\n\013actorState"
  "s\030\002 \003(\0132*.tpspb.TestRepChannelData.Actor"
  "StatesEntry\022G\n\017characterStates\030\003 \003(\0132..t"
  "pspb.TestRepChannelData.CharacterStatesE"
  "ntry\022A\n\014playerStates\030\004 \003(\0132+.tpspb.TestR"
  "epChannelData.PlayerStatesEntry\022I\n\020contr"
  "ollerStates\030\005 \003(\0132/.tpspb.TestRepChannel"
  "Data.ControllerStatesEntry\022U\n\026playerCont"
  "rollerStates\030\006 \003(\01325.tpspb.TestRepChanne"
  "lData.PlayerControllerStatesEntry\022Q\n\024act"
  "orComponentStates\030\007 \003(\01323.tpspb.TestRepC"
  "hannelData.ActorComponentStatesEntry\022Q\n\024"
  "sceneComponentStates\030\010 \003(\01323.tpspb.TestR"
  "epChannelData.SceneComponentStatesEntry\032"
  "H\n\020ActorStatesEntry\022\013\n\003key\030\001 \001(\r\022#\n\005valu"
  "e\030\002 \001(\0132\024.unrealpb.ActorState:\0028\001\032P\n\024Cha"
  "racterStatesEntry\022\013\n\003key\030\001 \001(\r\022\'\n\005value\030"
  "\002 \001(\0132\030.unrealpb.CharacterState:\0028\001\032J\n\021P"
  "layerStatesEntry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030\002"
  " \001(\0132\025.unrealpb.PlayerState:\0028\001\032R\n\025Contr"
  "ollerStatesEntry\022\013\n\003key\030\001 \001(\r\022(\n\005value\030\002"
  " \001(\0132\031.unrealpb.ControllerState:\0028\001\032^\n\033P"
  "layerControllerStatesEntry\022\013\n\003key\030\001 \001(\r\022"
  ".\n\005value\030\002 \001(\0132\037.unrealpb.PlayerControll"
  "erState:\0028\001\032Z\n\031ActorComponentStatesEntry"
  "\022\013\n\003key\030\001 \001(\r\022,\n\005value\030\002 \001(\0132\035.unrealpb."
  "ActorComponentState:\0028\001\032Z\n\031SceneComponen"
  "tStatesEntry\022\013\n\003key\030\001 \001(\r\022,\n\005value\030\002 \001(\013"
  "2\035.unrealpb.SceneComponentState:\0028\001\"\?\n\021G"
  "lobalChannelData\022*\n\tgameState\030\001 \001(\0132\027.un"
  "realpb.GameStateBaseB5Z3channeld.clewcat"
  ".com/examples/channeld-ue-tps/tpspbb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tps_2eproto_deps[1] = {
  &::descriptor_table_unreal_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_tps_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tps_2eproto = {
    false, false, 1363, descriptor_table_protodef_tps_2eproto,
    "tps.proto",
    &descriptor_table_tps_2eproto_once, descriptor_table_tps_2eproto_deps, 1, 9,
    schemas_tps_2eproto, file_default_instances_tps_2eproto, TableStruct_tps_2eproto::offsets,
    file_level_metadata_tps_2eproto, file_level_enum_descriptors_tps_2eproto,
    file_level_service_descriptors_tps_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tps_2eproto_getter() {
  return &descriptor_table_tps_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tps_2eproto(&descriptor_table_tps_2eproto);
namespace tpspb {

// ===================================================================

TestRepChannelData_ActorStatesEntry_DoNotUse::TestRepChannelData_ActorStatesEntry_DoNotUse() {}
TestRepChannelData_ActorStatesEntry_DoNotUse::TestRepChannelData_ActorStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_ActorStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_ActorStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_ActorStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[0]);
}

// ===================================================================

TestRepChannelData_CharacterStatesEntry_DoNotUse::TestRepChannelData_CharacterStatesEntry_DoNotUse() {}
TestRepChannelData_CharacterStatesEntry_DoNotUse::TestRepChannelData_CharacterStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_CharacterStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_CharacterStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_CharacterStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[1]);
}

// ===================================================================

TestRepChannelData_PlayerStatesEntry_DoNotUse::TestRepChannelData_PlayerStatesEntry_DoNotUse() {}
TestRepChannelData_PlayerStatesEntry_DoNotUse::TestRepChannelData_PlayerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_PlayerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_PlayerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_PlayerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[2]);
}

// ===================================================================

TestRepChannelData_ControllerStatesEntry_DoNotUse::TestRepChannelData_ControllerStatesEntry_DoNotUse() {}
TestRepChannelData_ControllerStatesEntry_DoNotUse::TestRepChannelData_ControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_ControllerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_ControllerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_ControllerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[3]);
}

// ===================================================================

TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse() {}
TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_PlayerControllerStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[4]);
}

// ===================================================================

TestRepChannelData_ActorComponentStatesEntry_DoNotUse::TestRepChannelData_ActorComponentStatesEntry_DoNotUse() {}
TestRepChannelData_ActorComponentStatesEntry_DoNotUse::TestRepChannelData_ActorComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_ActorComponentStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_ActorComponentStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_ActorComponentStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[5]);
}

// ===================================================================

TestRepChannelData_SceneComponentStatesEntry_DoNotUse::TestRepChannelData_SceneComponentStatesEntry_DoNotUse() {}
TestRepChannelData_SceneComponentStatesEntry_DoNotUse::TestRepChannelData_SceneComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestRepChannelData_SceneComponentStatesEntry_DoNotUse::MergeFrom(const TestRepChannelData_SceneComponentStatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData_SceneComponentStatesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[6]);
}

// ===================================================================

class TestRepChannelData::_Internal {
 public:
  static const ::unrealpb::GameStateBase& gamestate(const TestRepChannelData* msg);
};

const ::unrealpb::GameStateBase&
TestRepChannelData::_Internal::gamestate(const TestRepChannelData* msg) {
  return *msg->_impl_.gamestate_;
}
void TestRepChannelData::clear_gamestate() {
  if (GetArenaForAllocation() == nullptr && _impl_.gamestate_ != nullptr) {
    delete _impl_.gamestate_;
  }
  _impl_.gamestate_ = nullptr;
}
void TestRepChannelData::clear_actorstates() {
  _impl_.actorstates_.Clear();
}
void TestRepChannelData::clear_characterstates() {
  _impl_.characterstates_.Clear();
}
void TestRepChannelData::clear_playerstates() {
  _impl_.playerstates_.Clear();
}
void TestRepChannelData::clear_controllerstates() {
  _impl_.controllerstates_.Clear();
}
void TestRepChannelData::clear_playercontrollerstates() {
  _impl_.playercontrollerstates_.Clear();
}
void TestRepChannelData::clear_actorcomponentstates() {
  _impl_.actorcomponentstates_.Clear();
}
void TestRepChannelData::clear_scenecomponentstates() {
  _impl_.scenecomponentstates_.Clear();
}
TestRepChannelData::TestRepChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestRepChannelData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tpspb.TestRepChannelData)
}
TestRepChannelData::TestRepChannelData(const TestRepChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestRepChannelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.actorstates_)*/{}
    , /*decltype(_impl_.characterstates_)*/{}
    , /*decltype(_impl_.playerstates_)*/{}
    , /*decltype(_impl_.controllerstates_)*/{}
    , /*decltype(_impl_.playercontrollerstates_)*/{}
    , /*decltype(_impl_.actorcomponentstates_)*/{}
    , /*decltype(_impl_.scenecomponentstates_)*/{}
    , decltype(_impl_.gamestate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.actorstates_.MergeFrom(from._impl_.actorstates_);
  _this->_impl_.characterstates_.MergeFrom(from._impl_.characterstates_);
  _this->_impl_.playerstates_.MergeFrom(from._impl_.playerstates_);
  _this->_impl_.controllerstates_.MergeFrom(from._impl_.controllerstates_);
  _this->_impl_.playercontrollerstates_.MergeFrom(from._impl_.playercontrollerstates_);
  _this->_impl_.actorcomponentstates_.MergeFrom(from._impl_.actorcomponentstates_);
  _this->_impl_.scenecomponentstates_.MergeFrom(from._impl_.scenecomponentstates_);
  if (from._internal_has_gamestate()) {
    _this->_impl_.gamestate_ = new ::unrealpb::GameStateBase(*from._impl_.gamestate_);
  }
  // @@protoc_insertion_point(copy_constructor:tpspb.TestRepChannelData)
}

inline void TestRepChannelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.actorstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.characterstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.playerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.controllerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.playercontrollerstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.actorcomponentstates_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.scenecomponentstates_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.gamestate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestRepChannelData::~TestRepChannelData() {
  // @@protoc_insertion_point(destructor:tpspb.TestRepChannelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestRepChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actorstates_.Destruct();
  _impl_.actorstates_.~MapField();
  _impl_.characterstates_.Destruct();
  _impl_.characterstates_.~MapField();
  _impl_.playerstates_.Destruct();
  _impl_.playerstates_.~MapField();
  _impl_.controllerstates_.Destruct();
  _impl_.controllerstates_.~MapField();
  _impl_.playercontrollerstates_.Destruct();
  _impl_.playercontrollerstates_.~MapField();
  _impl_.actorcomponentstates_.Destruct();
  _impl_.actorcomponentstates_.~MapField();
  _impl_.scenecomponentstates_.Destruct();
  _impl_.scenecomponentstates_.~MapField();
  if (this != internal_default_instance()) delete _impl_.gamestate_;
}

void TestRepChannelData::ArenaDtor(void* object) {
  TestRepChannelData* _this = reinterpret_cast< TestRepChannelData* >(object);
  _this->_impl_.actorstates_.Destruct();
  _this->_impl_.characterstates_.Destruct();
  _this->_impl_.playerstates_.Destruct();
  _this->_impl_.controllerstates_.Destruct();
  _this->_impl_.playercontrollerstates_.Destruct();
  _this->_impl_.actorcomponentstates_.Destruct();
  _this->_impl_.scenecomponentstates_.Destruct();
}
void TestRepChannelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestRepChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.TestRepChannelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actorstates_.Clear();
  _impl_.characterstates_.Clear();
  _impl_.playerstates_.Clear();
  _impl_.controllerstates_.Clear();
  _impl_.playercontrollerstates_.Clear();
  _impl_.actorcomponentstates_.Clear();
  _impl_.scenecomponentstates_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.gamestate_ != nullptr) {
    delete _impl_.gamestate_;
  }
  _impl_.gamestate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRepChannelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unrealpb.GameStateBase gameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.ActorState> actorStates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.actorstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.CharacterState> characterStates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.characterstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.PlayerState> playerStates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.playerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.ControllerState> controllerStates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.controllerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.playercontrollerstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.actorcomponentstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.scenecomponentstates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestRepChannelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.TestRepChannelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unrealpb.GameStateBase gameState = 1;
  if (this->_internal_has_gamestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gamestate(this),
        _Internal::gamestate(this).GetCachedSize(), target, stream);
  }

  // map<uint32, .unrealpb.ActorState> actorStates = 2;
  if (!this->_internal_actorstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::ActorState>;
    using WireHelper = TestRepChannelData_ActorStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_actorstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.CharacterState> characterStates = 3;
  if (!this->_internal_characterstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::CharacterState>;
    using WireHelper = TestRepChannelData_CharacterStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_characterstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.PlayerState> playerStates = 4;
  if (!this->_internal_playerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::PlayerState>;
    using WireHelper = TestRepChannelData_PlayerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_playerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.ControllerState> controllerStates = 5;
  if (!this->_internal_controllerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::ControllerState>;
    using WireHelper = TestRepChannelData_ControllerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_controllerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 6;
  if (!this->_internal_playercontrollerstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::PlayerControllerState>;
    using WireHelper = TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_playercontrollerstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 7;
  if (!this->_internal_actorcomponentstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::ActorComponentState>;
    using WireHelper = TestRepChannelData_ActorComponentStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_actorcomponentstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 8;
  if (!this->_internal_scenecomponentstates().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::unrealpb::SceneComponentState>;
    using WireHelper = TestRepChannelData_SceneComponentStatesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_scenecomponentstates();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.TestRepChannelData)
  return target;
}

size_t TestRepChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.TestRepChannelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .unrealpb.ActorState> actorStates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actorstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >::const_iterator
      it = this->_internal_actorstates().begin();
      it != this->_internal_actorstates().end(); ++it) {
    total_size += TestRepChannelData_ActorStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.CharacterState> characterStates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_characterstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >::const_iterator
      it = this->_internal_characterstates().begin();
      it != this->_internal_characterstates().end(); ++it) {
    total_size += TestRepChannelData_CharacterStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.PlayerState> playerStates = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >::const_iterator
      it = this->_internal_playerstates().begin();
      it != this->_internal_playerstates().end(); ++it) {
    total_size += TestRepChannelData_PlayerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.ControllerState> controllerStates = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_controllerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >::const_iterator
      it = this->_internal_controllerstates().begin();
      it != this->_internal_controllerstates().end(); ++it) {
    total_size += TestRepChannelData_ControllerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playercontrollerstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >::const_iterator
      it = this->_internal_playercontrollerstates().begin();
      it != this->_internal_playercontrollerstates().end(); ++it) {
    total_size += TestRepChannelData_PlayerControllerStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_actorcomponentstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >::const_iterator
      it = this->_internal_actorcomponentstates().begin();
      it != this->_internal_actorcomponentstates().end(); ++it) {
    total_size += TestRepChannelData_ActorComponentStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scenecomponentstates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >::const_iterator
      it = this->_internal_scenecomponentstates().begin();
      it != this->_internal_scenecomponentstates().end(); ++it) {
    total_size += TestRepChannelData_SceneComponentStatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .unrealpb.GameStateBase gameState = 1;
  if (this->_internal_has_gamestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gamestate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestRepChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestRepChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestRepChannelData::GetClassData() const { return &_class_data_; }


void TestRepChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestRepChannelData*>(&to_msg);
  auto& from = static_cast<const TestRepChannelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.TestRepChannelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actorstates_.MergeFrom(from._impl_.actorstates_);
  _this->_impl_.characterstates_.MergeFrom(from._impl_.characterstates_);
  _this->_impl_.playerstates_.MergeFrom(from._impl_.playerstates_);
  _this->_impl_.controllerstates_.MergeFrom(from._impl_.controllerstates_);
  _this->_impl_.playercontrollerstates_.MergeFrom(from._impl_.playercontrollerstates_);
  _this->_impl_.actorcomponentstates_.MergeFrom(from._impl_.actorcomponentstates_);
  _this->_impl_.scenecomponentstates_.MergeFrom(from._impl_.scenecomponentstates_);
  if (from._internal_has_gamestate()) {
    _this->_internal_mutable_gamestate()->::unrealpb::GameStateBase::MergeFrom(
        from._internal_gamestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestRepChannelData::CopyFrom(const TestRepChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.TestRepChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRepChannelData::IsInitialized() const {
  return true;
}

void TestRepChannelData::InternalSwap(TestRepChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actorstates_.InternalSwap(&other->_impl_.actorstates_);
  _impl_.characterstates_.InternalSwap(&other->_impl_.characterstates_);
  _impl_.playerstates_.InternalSwap(&other->_impl_.playerstates_);
  _impl_.controllerstates_.InternalSwap(&other->_impl_.controllerstates_);
  _impl_.playercontrollerstates_.InternalSwap(&other->_impl_.playercontrollerstates_);
  _impl_.actorcomponentstates_.InternalSwap(&other->_impl_.actorcomponentstates_);
  _impl_.scenecomponentstates_.InternalSwap(&other->_impl_.scenecomponentstates_);
  swap(_impl_.gamestate_, other->_impl_.gamestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRepChannelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[7]);
}

// ===================================================================

class GlobalChannelData::_Internal {
 public:
  static const ::unrealpb::GameStateBase& gamestate(const GlobalChannelData* msg);
};

const ::unrealpb::GameStateBase&
GlobalChannelData::_Internal::gamestate(const GlobalChannelData* msg) {
  return *msg->_impl_.gamestate_;
}
void GlobalChannelData::clear_gamestate() {
  if (GetArenaForAllocation() == nullptr && _impl_.gamestate_ != nullptr) {
    delete _impl_.gamestate_;
  }
  _impl_.gamestate_ = nullptr;
}
GlobalChannelData::GlobalChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tpspb.GlobalChannelData)
}
GlobalChannelData::GlobalChannelData(const GlobalChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalChannelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gamestate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gamestate()) {
    _this->_impl_.gamestate_ = new ::unrealpb::GameStateBase(*from._impl_.gamestate_);
  }
  // @@protoc_insertion_point(copy_constructor:tpspb.GlobalChannelData)
}

inline void GlobalChannelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gamestate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GlobalChannelData::~GlobalChannelData() {
  // @@protoc_insertion_point(destructor:tpspb.GlobalChannelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gamestate_;
}

void GlobalChannelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:tpspb.GlobalChannelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gamestate_ != nullptr) {
    delete _impl_.gamestate_;
  }
  _impl_.gamestate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalChannelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .unrealpb.GameStateBase gameState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalChannelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpspb.GlobalChannelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .unrealpb.GameStateBase gameState = 1;
  if (this->_internal_has_gamestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gamestate(this),
        _Internal::gamestate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpspb.GlobalChannelData)
  return target;
}

size_t GlobalChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpspb.GlobalChannelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .unrealpb.GameStateBase gameState = 1;
  if (this->_internal_has_gamestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gamestate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalChannelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalChannelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalChannelData::GetClassData() const { return &_class_data_; }


void GlobalChannelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalChannelData*>(&to_msg);
  auto& from = static_cast<const GlobalChannelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tpspb.GlobalChannelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gamestate()) {
    _this->_internal_mutable_gamestate()->::unrealpb::GameStateBase::MergeFrom(
        from._internal_gamestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalChannelData::CopyFrom(const GlobalChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpspb.GlobalChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalChannelData::IsInitialized() const {
  return true;
}

void GlobalChannelData::InternalSwap(GlobalChannelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gamestate_, other->_impl_.gamestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalChannelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tps_2eproto_getter, &descriptor_table_tps_2eproto_once,
      file_level_metadata_tps_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tpspb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::TestRepChannelData*
Arena::CreateMaybeMessage< ::tpspb::TestRepChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::TestRepChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::tpspb::GlobalChannelData*
Arena::CreateMaybeMessage< ::tpspb::GlobalChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpspb::GlobalChannelData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "unreal_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tps_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tps_2eproto;
namespace tpspb {
class GlobalChannelData;
struct GlobalChannelDataDefaultTypeInternal;
extern GlobalChannelDataDefaultTypeInternal _GlobalChannelData_default_instance_;
class TestRepChannelData;
struct TestRepChannelDataDefaultTypeInternal;
extern TestRepChannelDataDefaultTypeInternal _TestRepChannelData_default_instance_;
class TestRepChannelData_ActorComponentStatesEntry_DoNotUse;
struct TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_ActorComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ActorComponentStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_ActorStatesEntry_DoNotUse;
struct TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_ActorStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ActorStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_CharacterStatesEntry_DoNotUse;
struct TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_CharacterStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_CharacterStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_ControllerStatesEntry_DoNotUse;
struct TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_ControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_ControllerStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_PawnStatesEntry_DoNotUse;
struct TestRepChannelData_PawnStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_PawnStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PawnStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_PlayerControllerStatesEntry_DoNotUse;
struct TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_PlayerControllerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PlayerControllerStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_PlayerStatesEntry_DoNotUse;
struct TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_PlayerStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_PlayerStatesEntry_DoNotUse_default_instance_;
class TestRepChannelData_SceneComponentStatesEntry_DoNotUse;
struct TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal;
extern TestRepChannelData_SceneComponentStatesEntry_DoNotUseDefaultTypeInternal _TestRepChannelData_SceneComponentStatesEntry_DoNotUse_default_instance_;
class TestRepGameState;
struct TestRepGameStateDefaultTypeInternal;
extern TestRepGameStateDefaultTypeInternal _TestRepGameState_default_instance_;
}  // namespace tpspb
PROTOBUF_NAMESPACE_OPEN
template<> ::tpspb::GlobalChannelData* Arena::CreateMaybeMessage<::tpspb::GlobalChannelData>(Arena*);
template<> ::tpspb::TestRepChannelData* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData>(Arena*);
template<> ::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_ActorComponentStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_ActorStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_CharacterStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_ControllerStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_PawnStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_PlayerControllerStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_PlayerStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse* Arena::CreateMaybeMessage<::tpspb::TestRepChannelData_SceneComponentStatesEntry_DoNotUse>(Arena*);
template<> ::tpspb::TestRepGameState* Arena::CreateMaybeMessage<::tpspb::TestRepGameState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tpspb {

// ===================================================================

class TestRepGameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpspb.TestRepGameState) */ {
 public:
  inline TestRepGameState() : TestRepGameState(nullptr) {}
  ~TestRepGameState() override;
  explicit PROTOBUF_CONSTEXPR TestRepGameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRepGameState(const TestRepGameState& from);
  TestRepGameState(TestRepGameState&& from) noexcept
    : TestRepGameState() {
    *this = ::std::move(from);
  }

  inline TestRepGameState& operator=(const TestRepGameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRepGameState& operator=(TestRepGameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRepGameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRepGameState* internal_default_instance() {
    return reinterpret_cast<const TestRepGameState*>(
               &_TestRepGameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestRepGameState& a, TestRepGameState& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRepGameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRepGameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRepGameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRepGameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRepGameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestRepGameState& from) {
    TestRepGameState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRepGameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpspb.TestRepGameState";
  }
  protected:
  explicit TestRepGameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJumpsFieldNumber = 1,
  };
  // optional int32 jumps = 1;
  bool has_jumps() const;
  private:
  bool _internal_has_jumps() const;
  public:
  void clear_jumps();
  int32_t jumps() const;
  void set_jumps(int32_t value);
  private:
  int32_t _internal_jumps() const;
  void _internal_set_jumps(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tpspb.TestRepGameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t jumps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tps_2eproto;
};
// -------------------------------------------------------------------

class TestRepChannelData_ActorStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_ActorStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::ActorState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_ActorStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::ActorState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_ActorStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_ActorStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_ActorStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_ActorStatesEntry_DoNotUse& other);
  static const TestRepChannelData_ActorStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_ActorStatesEntry_DoNotUse*>(&_TestRepChannelData_ActorStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_PawnStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_PawnStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::PawnState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_PawnStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::PawnState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_PawnStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_PawnStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_PawnStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_PawnStatesEntry_DoNotUse& other);
  static const TestRepChannelData_PawnStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_PawnStatesEntry_DoNotUse*>(&_TestRepChannelData_PawnStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_CharacterStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_CharacterStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::CharacterState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_CharacterStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::CharacterState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_CharacterStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_CharacterStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_CharacterStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_CharacterStatesEntry_DoNotUse& other);
  static const TestRepChannelData_CharacterStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_CharacterStatesEntry_DoNotUse*>(&_TestRepChannelData_CharacterStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_PlayerStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_PlayerStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::PlayerState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_PlayerStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::PlayerState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_PlayerStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_PlayerStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_PlayerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_PlayerStatesEntry_DoNotUse& other);
  static const TestRepChannelData_PlayerStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_PlayerStatesEntry_DoNotUse*>(&_TestRepChannelData_PlayerStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_ControllerStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_ControllerStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::ControllerState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_ControllerStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::ControllerState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_ControllerStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_ControllerStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_ControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_ControllerStatesEntry_DoNotUse& other);
  static const TestRepChannelData_ControllerStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_ControllerStatesEntry_DoNotUse*>(&_TestRepChannelData_ControllerStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_PlayerControllerStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::PlayerControllerState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_PlayerControllerStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::PlayerControllerState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_PlayerControllerStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_PlayerControllerStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_PlayerControllerStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_PlayerControllerStatesEntry_DoNotUse& other);
  static const TestRepChannelData_PlayerControllerStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_PlayerControllerStatesEntry_DoNotUse*>(&_TestRepChannelData_PlayerControllerStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_ActorComponentStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_ActorComponentStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::ActorComponentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_ActorComponentStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::ActorComponentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_ActorComponentStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_ActorComponentStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_ActorComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_ActorComponentStatesEntry_DoNotUse& other);
  static const TestRepChannelData_ActorComponentStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_ActorComponentStatesEntry_DoNotUse*>(&_TestRepChannelData_ActorComponentStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData_SceneComponentStatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_SceneComponentStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::SceneComponentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestRepChannelData_SceneComponentStatesEntry_DoNotUse, 
    uint32_t, ::unrealpb::SceneComponentState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestRepChannelData_SceneComponentStatesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestRepChannelData_SceneComponentStatesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestRepChannelData_SceneComponentStatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestRepChannelData_SceneComponentStatesEntry_DoNotUse& other);
  static const TestRepChannelData_SceneComponentStatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestRepChannelData_SceneComponentStatesEntry_DoNotUse*>(&_TestRepChannelData_SceneComponentStatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tps_2eproto;
};

// -------------------------------------------------------------------

class TestRepChannelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpspb.TestRepChannelData) */ {
 public:
  inline TestRepChannelData() : TestRepChannelData(nullptr) {}
  ~TestRepChannelData() override;
  explicit PROTOBUF_CONSTEXPR TestRepChannelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestRepChannelData(const TestRepChannelData& from);
  TestRepChannelData(TestRepChannelData&& from) noexcept
    : TestRepChannelData() {
    *this = ::std::move(from);
  }

  inline TestRepChannelData& operator=(const TestRepChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRepChannelData& operator=(TestRepChannelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestRepChannelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestRepChannelData* internal_default_instance() {
    return reinterpret_cast<const TestRepChannelData*>(
               &_TestRepChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TestRepChannelData& a, TestRepChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRepChannelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRepChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestRepChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestRepChannelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestRepChannelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestRepChannelData& from) {
    TestRepChannelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRepChannelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpspb.TestRepChannelData";
  }
  protected:
  explicit TestRepChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActorStatesFieldNumber = 2,
    kPawnStatesFieldNumber = 3,
    kCharacterStatesFieldNumber = 4,
    kPlayerStatesFieldNumber = 5,
    kControllerStatesFieldNumber = 6,
    kPlayerControllerStatesFieldNumber = 7,
    kActorComponentStatesFieldNumber = 8,
    kSceneComponentStatesFieldNumber = 9,
    kGameStateFieldNumber = 1,
    kTestGameStateFieldNumber = 10,
  };
  // map<uint32, .unrealpb.ActorState> actorStates = 2;
  int actorstates_size() const;
  private:
  int _internal_actorstates_size() const;
  public:
  void clear_actorstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >&
      _internal_actorstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >*
      _internal_mutable_actorstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >&
      actorstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >*
      mutable_actorstates();

  // map<uint32, .unrealpb.PawnState> pawnStates = 3;
  int pawnstates_size() const;
  private:
  int _internal_pawnstates_size() const;
  public:
  void clear_pawnstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >&
      _internal_pawnstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >*
      _internal_mutable_pawnstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >&
      pawnstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >*
      mutable_pawnstates();

  // map<uint32, .unrealpb.CharacterState> characterStates = 4;
  int characterstates_size() const;
  private:
  int _internal_characterstates_size() const;
  public:
  void clear_characterstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >&
      _internal_characterstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >*
      _internal_mutable_characterstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >&
      characterstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >*
      mutable_characterstates();

  // map<uint32, .unrealpb.PlayerState> playerStates = 5;
  int playerstates_size() const;
  private:
  int _internal_playerstates_size() const;
  public:
  void clear_playerstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >&
      _internal_playerstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >*
      _internal_mutable_playerstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >&
      playerstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >*
      mutable_playerstates();

  // map<uint32, .unrealpb.ControllerState> controllerStates = 6;
  int controllerstates_size() const;
  private:
  int _internal_controllerstates_size() const;
  public:
  void clear_controllerstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >&
      _internal_controllerstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >*
      _internal_mutable_controllerstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >&
      controllerstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >*
      mutable_controllerstates();

  // map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 7;
  int playercontrollerstates_size() const;
  private:
  int _internal_playercontrollerstates_size() const;
  public:
  void clear_playercontrollerstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >&
      _internal_playercontrollerstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >*
      _internal_mutable_playercontrollerstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >&
      playercontrollerstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >*
      mutable_playercontrollerstates();

  // map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 8;
  int actorcomponentstates_size() const;
  private:
  int _internal_actorcomponentstates_size() const;
  public:
  void clear_actorcomponentstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >&
      _internal_actorcomponentstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >*
      _internal_mutable_actorcomponentstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >&
      actorcomponentstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >*
      mutable_actorcomponentstates();

  // map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 9;
  int scenecomponentstates_size() const;
  private:
  int _internal_scenecomponentstates_size() const;
  public:
  void clear_scenecomponentstates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >&
      _internal_scenecomponentstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >*
      _internal_mutable_scenecomponentstates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >&
      scenecomponentstates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >*
      mutable_scenecomponentstates();

  // .unrealpb.GameStateBase gameState = 1;
  bool has_gamestate() const;
  private:
  bool _internal_has_gamestate() const;
  public:
  void clear_gamestate();
  const ::unrealpb::GameStateBase& gamestate() const;
  PROTOBUF_NODISCARD ::unrealpb::GameStateBase* release_gamestate();
  ::unrealpb::GameStateBase* mutable_gamestate();
  void set_allocated_gamestate(::unrealpb::GameStateBase* gamestate);
  private:
  const ::unrealpb::GameStateBase& _internal_gamestate() const;
  ::unrealpb::GameStateBase* _internal_mutable_gamestate();
  public:
  void unsafe_arena_set_allocated_gamestate(
      ::unrealpb::GameStateBase* gamestate);
  ::unrealpb::GameStateBase* unsafe_arena_release_gamestate();

  // .tpspb.TestRepGameState testGameState = 10;
  bool has_testgamestate() const;
  private:
  bool _internal_has_testgamestate() const;
  public:
  void clear_testgamestate();
  const ::tpspb::TestRepGameState& testgamestate() const;
  PROTOBUF_NODISCARD ::tpspb::TestRepGameState* release_testgamestate();
  ::tpspb::TestRepGameState* mutable_testgamestate();
  void set_allocated_testgamestate(::tpspb::TestRepGameState* testgamestate);
  private:
  const ::tpspb::TestRepGameState& _internal_testgamestate() const;
  ::tpspb::TestRepGameState* _internal_mutable_testgamestate();
  public:
  void unsafe_arena_set_allocated_testgamestate(
      ::tpspb::TestRepGameState* testgamestate);
  ::tpspb::TestRepGameState* unsafe_arena_release_testgamestate();

  // @@protoc_insertion_point(class_scope:tpspb.TestRepChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_ActorStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::ActorState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> actorstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_PawnStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::PawnState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pawnstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_CharacterStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::CharacterState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> characterstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_PlayerStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::PlayerState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> playerstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_ControllerStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::ControllerState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> controllerstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_PlayerControllerStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::PlayerControllerState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> playercontrollerstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_ActorComponentStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::ActorComponentState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> actorcomponentstates_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestRepChannelData_SceneComponentStatesEntry_DoNotUse,
        uint32_t, ::unrealpb::SceneComponentState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> scenecomponentstates_;
    ::unrealpb::GameStateBase* gamestate_;
    ::tpspb::TestRepGameState* testgamestate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tps_2eproto;
};
// -------------------------------------------------------------------

class GlobalChannelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpspb.GlobalChannelData) */ {
 public:
  inline GlobalChannelData() : GlobalChannelData(nullptr) {}
  ~GlobalChannelData() override;
  explicit PROTOBUF_CONSTEXPR GlobalChannelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalChannelData(const GlobalChannelData& from);
  GlobalChannelData(GlobalChannelData&& from) noexcept
    : GlobalChannelData() {
    *this = ::std::move(from);
  }

  inline GlobalChannelData& operator=(const GlobalChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalChannelData& operator=(GlobalChannelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalChannelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalChannelData* internal_default_instance() {
    return reinterpret_cast<const GlobalChannelData*>(
               &_GlobalChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GlobalChannelData& a, GlobalChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalChannelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalChannelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalChannelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GlobalChannelData& from) {
    GlobalChannelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalChannelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpspb.GlobalChannelData";
  }
  protected:
  explicit GlobalChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStateFieldNumber = 1,
  };
  // .unrealpb.GameStateBase gameState = 1;
  bool has_gamestate() const;
  private:
  bool _internal_has_gamestate() const;
  public:
  void clear_gamestate();
  const ::unrealpb::GameStateBase& gamestate() const;
  PROTOBUF_NODISCARD ::unrealpb::GameStateBase* release_gamestate();
  ::unrealpb::GameStateBase* mutable_gamestate();
  void set_allocated_gamestate(::unrealpb::GameStateBase* gamestate);
  private:
  const ::unrealpb::GameStateBase& _internal_gamestate() const;
  ::unrealpb::GameStateBase* _internal_mutable_gamestate();
  public:
  void unsafe_arena_set_allocated_gamestate(
      ::unrealpb::GameStateBase* gamestate);
  ::unrealpb::GameStateBase* unsafe_arena_release_gamestate();

  // @@protoc_insertion_point(class_scope:tpspb.GlobalChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::unrealpb::GameStateBase* gamestate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestRepGameState

// optional int32 jumps = 1;
inline bool TestRepGameState::_internal_has_jumps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestRepGameState::has_jumps() const {
  return _internal_has_jumps();
}
inline void TestRepGameState::clear_jumps() {
  _impl_.jumps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestRepGameState::_internal_jumps() const {
  return _impl_.jumps_;
}
inline int32_t TestRepGameState::jumps() const {
  // @@protoc_insertion_point(field_get:tpspb.TestRepGameState.jumps)
  return _internal_jumps();
}
inline void TestRepGameState::_internal_set_jumps(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.jumps_ = value;
}
inline void TestRepGameState::set_jumps(int32_t value) {
  _internal_set_jumps(value);
  // @@protoc_insertion_point(field_set:tpspb.TestRepGameState.jumps)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestRepChannelData

// .unrealpb.GameStateBase gameState = 1;
inline bool TestRepChannelData::_internal_has_gamestate() const {
  return this != internal_default_instance() && _impl_.gamestate_ != nullptr;
}
inline bool TestRepChannelData::has_gamestate() const {
  return _internal_has_gamestate();
}
inline const ::unrealpb::GameStateBase& TestRepChannelData::_internal_gamestate() const {
  const ::unrealpb::GameStateBase* p = _impl_.gamestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::GameStateBase&>(
      ::unrealpb::_GameStateBase_default_instance_);
}
inline const ::unrealpb::GameStateBase& TestRepChannelData::gamestate() const {
  // @@protoc_insertion_point(field_get:tpspb.TestRepChannelData.gameState)
  return _internal_gamestate();
}
inline void TestRepChannelData::unsafe_arena_set_allocated_gamestate(
    ::unrealpb::GameStateBase* gamestate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gamestate_);
  }
  _impl_.gamestate_ = gamestate;
  if (gamestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tpspb.TestRepChannelData.gameState)
}
inline ::unrealpb::GameStateBase* TestRepChannelData::release_gamestate() {
  
  ::unrealpb::GameStateBase* temp = _impl_.gamestate_;
  _impl_.gamestate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::GameStateBase* TestRepChannelData::unsafe_arena_release_gamestate() {
  // @@protoc_insertion_point(field_release:tpspb.TestRepChannelData.gameState)
  
  ::unrealpb::GameStateBase* temp = _impl_.gamestate_;
  _impl_.gamestate_ = nullptr;
  return temp;
}
inline ::unrealpb::GameStateBase* TestRepChannelData::_internal_mutable_gamestate() {
  
  if (_impl_.gamestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::GameStateBase>(GetArenaForAllocation());
    _impl_.gamestate_ = p;
  }
  return _impl_.gamestate_;
}
inline ::unrealpb::GameStateBase* TestRepChannelData::mutable_gamestate() {
  ::unrealpb::GameStateBase* _msg = _internal_mutable_gamestate();
  // @@protoc_insertion_point(field_mutable:tpspb.TestRepChannelData.gameState)
  return _msg;
}
inline void TestRepChannelData::set_allocated_gamestate(::unrealpb::GameStateBase* gamestate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gamestate_);
  }
  if (gamestate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamestate));
    if (message_arena != submessage_arena) {
      gamestate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamestate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gamestate_ = gamestate;
  // @@protoc_insertion_point(field_set_allocated:tpspb.TestRepChannelData.gameState)
}

// map<uint32, .unrealpb.ActorState> actorStates = 2;
inline int TestRepChannelData::_internal_actorstates_size() const {
  return _impl_.actorstates_.size();
}
inline int TestRepChannelData::actorstates_size() const {
  return _internal_actorstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >&
TestRepChannelData::_internal_actorstates() const {
  return _impl_.actorstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >&
TestRepChannelData::actorstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.actorStates)
  return _internal_actorstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >*
TestRepChannelData::_internal_mutable_actorstates() {
  return _impl_.actorstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorState >*
TestRepChannelData::mutable_actorstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.actorStates)
  return _internal_mutable_actorstates();
}

// map<uint32, .unrealpb.PawnState> pawnStates = 3;
inline int TestRepChannelData::_internal_pawnstates_size() const {
  return _impl_.pawnstates_.size();
}
inline int TestRepChannelData::pawnstates_size() const {
  return _internal_pawnstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >&
TestRepChannelData::_internal_pawnstates() const {
  return _impl_.pawnstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >&
TestRepChannelData::pawnstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.pawnStates)
  return _internal_pawnstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >*
TestRepChannelData::_internal_mutable_pawnstates() {
  return _impl_.pawnstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PawnState >*
TestRepChannelData::mutable_pawnstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.pawnStates)
  return _internal_mutable_pawnstates();
}

// map<uint32, .unrealpb.CharacterState> characterStates = 4;
inline int TestRepChannelData::_internal_characterstates_size() const {
  return _impl_.characterstates_.size();
}
inline int TestRepChannelData::characterstates_size() const {
  return _internal_characterstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >&
TestRepChannelData::_internal_characterstates() const {
  return _impl_.characterstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >&
TestRepChannelData::characterstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.characterStates)
  return _internal_characterstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >*
TestRepChannelData::_internal_mutable_characterstates() {
  return _impl_.characterstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::CharacterState >*
TestRepChannelData::mutable_characterstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.characterStates)
  return _internal_mutable_characterstates();
}

// map<uint32, .unrealpb.PlayerState> playerStates = 5;
inline int TestRepChannelData::_internal_playerstates_size() const {
  return _impl_.playerstates_.size();
}
inline int TestRepChannelData::playerstates_size() const {
  return _internal_playerstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >&
TestRepChannelData::_internal_playerstates() const {
  return _impl_.playerstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >&
TestRepChannelData::playerstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.playerStates)
  return _internal_playerstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >*
TestRepChannelData::_internal_mutable_playerstates() {
  return _impl_.playerstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerState >*
TestRepChannelData::mutable_playerstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.playerStates)
  return _internal_mutable_playerstates();
}

// map<uint32, .unrealpb.ControllerState> controllerStates = 6;
inline int TestRepChannelData::_internal_controllerstates_size() const {
  return _impl_.controllerstates_.size();
}
inline int TestRepChannelData::controllerstates_size() const {
  return _internal_controllerstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >&
TestRepChannelData::_internal_controllerstates() const {
  return _impl_.controllerstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >&
TestRepChannelData::controllerstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.controllerStates)
  return _internal_controllerstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >*
TestRepChannelData::_internal_mutable_controllerstates() {
  return _impl_.controllerstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ControllerState >*
TestRepChannelData::mutable_controllerstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.controllerStates)
  return _internal_mutable_controllerstates();
}

// map<uint32, .unrealpb.PlayerControllerState> playerControllerStates = 7;
inline int TestRepChannelData::_internal_playercontrollerstates_size() const {
  return _impl_.playercontrollerstates_.size();
}
inline int TestRepChannelData::playercontrollerstates_size() const {
  return _internal_playercontrollerstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >&
TestRepChannelData::_internal_playercontrollerstates() const {
  return _impl_.playercontrollerstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >&
TestRepChannelData::playercontrollerstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.playerControllerStates)
  return _internal_playercontrollerstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >*
TestRepChannelData::_internal_mutable_playercontrollerstates() {
  return _impl_.playercontrollerstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::PlayerControllerState >*
TestRepChannelData::mutable_playercontrollerstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.playerControllerStates)
  return _internal_mutable_playercontrollerstates();
}

// map<uint32, .unrealpb.ActorComponentState> actorComponentStates = 8;
inline int TestRepChannelData::_internal_actorcomponentstates_size() const {
  return _impl_.actorcomponentstates_.size();
}
inline int TestRepChannelData::actorcomponentstates_size() const {
  return _internal_actorcomponentstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >&
TestRepChannelData::_internal_actorcomponentstates() const {
  return _impl_.actorcomponentstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >&
TestRepChannelData::actorcomponentstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.actorComponentStates)
  return _internal_actorcomponentstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >*
TestRepChannelData::_internal_mutable_actorcomponentstates() {
  return _impl_.actorcomponentstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::ActorComponentState >*
TestRepChannelData::mutable_actorcomponentstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.actorComponentStates)
  return _internal_mutable_actorcomponentstates();
}

// map<uint32, .unrealpb.SceneComponentState> sceneComponentStates = 9;
inline int TestRepChannelData::_internal_scenecomponentstates_size() const {
  return _impl_.scenecomponentstates_.size();
}
inline int TestRepChannelData::scenecomponentstates_size() const {
  return _internal_scenecomponentstates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >&
TestRepChannelData::_internal_scenecomponentstates() const {
  return _impl_.scenecomponentstates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >&
TestRepChannelData::scenecomponentstates() const {
  // @@protoc_insertion_point(field_map:tpspb.TestRepChannelData.sceneComponentStates)
  return _internal_scenecomponentstates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >*
TestRepChannelData::_internal_mutable_scenecomponentstates() {
  return _impl_.scenecomponentstates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::unrealpb::SceneComponentState >*
TestRepChannelData::mutable_scenecomponentstates() {
  // @@protoc_insertion_point(field_mutable_map:tpspb.TestRepChannelData.sceneComponentStates)
  return _internal_mutable_scenecomponentstates();
}

// .tpspb.TestRepGameState testGameState = 10;
inline bool TestRepChannelData::_internal_has_testgamestate() const {
  return this != internal_default_instance() && _impl_.testgamestate_ != nullptr;
}
inline bool TestRepChannelData::has_testgamestate() const {
  return _internal_has_testgamestate();
}
inline void TestRepChannelData::clear_testgamestate() {
  if (GetArenaForAllocation() == nullptr && _impl_.testgamestate_ != nullptr) {
    delete _impl_.testgamestate_;
  }
  _impl_.testgamestate_ = nullptr;
}
inline const ::tpspb::TestRepGameState& TestRepChannelData::_internal_testgamestate() const {
  const ::tpspb::TestRepGameState* p = _impl_.testgamestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::tpspb::TestRepGameState&>(
      ::tpspb::_TestRepGameState_default_instance_);
}
inline const ::tpspb::TestRepGameState& TestRepChannelData::testgamestate() const {
  // @@protoc_insertion_point(field_get:tpspb.TestRepChannelData.testGameState)
  return _internal_testgamestate();
}
inline void TestRepChannelData::unsafe_arena_set_allocated_testgamestate(
    ::tpspb::TestRepGameState* testgamestate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.testgamestate_);
  }
  _impl_.testgamestate_ = testgamestate;
  if (testgamestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tpspb.TestRepChannelData.testGameState)
}
inline ::tpspb::TestRepGameState* TestRepChannelData::release_testgamestate() {
  
  ::tpspb::TestRepGameState* temp = _impl_.testgamestate_;
  _impl_.testgamestate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tpspb::TestRepGameState* TestRepChannelData::unsafe_arena_release_testgamestate() {
  // @@protoc_insertion_point(field_release:tpspb.TestRepChannelData.testGameState)
  
  ::tpspb::TestRepGameState* temp = _impl_.testgamestate_;
  _impl_.testgamestate_ = nullptr;
  return temp;
}
inline ::tpspb::TestRepGameState* TestRepChannelData::_internal_mutable_testgamestate() {
  
  if (_impl_.testgamestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::tpspb::TestRepGameState>(GetArenaForAllocation());
    _impl_.testgamestate_ = p;
  }
  return _impl_.testgamestate_;
}
inline ::tpspb::TestRepGameState* TestRepChannelData::mutable_testgamestate() {
  ::tpspb::TestRepGameState* _msg = _internal_mutable_testgamestate();
  // @@protoc_insertion_point(field_mutable:tpspb.TestRepChannelData.testGameState)
  return _msg;
}
inline void TestRepChannelData::set_allocated_testgamestate(::tpspb::TestRepGameState* testgamestate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.testgamestate_;
  }
  if (testgamestate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(testgamestate);
    if (message_arena != submessage_arena) {
      testgamestate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testgamestate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.testgamestate_ = testgamestate;
  // @@protoc_insertion_point(field_set_allocated:tpspb.TestRepChannelData.testGameState)
}

// -------------------------------------------------------------------

// GlobalChannelData

// .unrealpb.GameStateBase gameState = 1;
inline bool GlobalChannelData::_internal_has_gamestate() const {
  return this != internal_default_instance() && _impl_.gamestate_ != nullptr;
}
inline bool GlobalChannelData::has_gamestate() const {
  return _internal_has_gamestate();
}
inline const ::unrealpb::GameStateBase& GlobalChannelData::_internal_gamestate() const {
  const ::unrealpb::GameStateBase* p = _impl_.gamestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::unrealpb::GameStateBase&>(
      ::unrealpb::_GameStateBase_default_instance_);
}
inline const ::unrealpb::GameStateBase& GlobalChannelData::gamestate() const {
  // @@protoc_insertion_point(field_get:tpspb.GlobalChannelData.gameState)
  return _internal_gamestate();
}
inline void GlobalChannelData::unsafe_arena_set_allocated_gamestate(
    ::unrealpb::GameStateBase* gamestate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gamestate_);
  }
  _impl_.gamestate_ = gamestate;
  if (gamestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tpspb.GlobalChannelData.gameState)
}
inline ::unrealpb::GameStateBase* GlobalChannelData::release_gamestate() {
  
  ::unrealpb::GameStateBase* temp = _impl_.gamestate_;
  _impl_.gamestate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::unrealpb::GameStateBase* GlobalChannelData::unsafe_arena_release_gamestate() {
  // @@protoc_insertion_point(field_release:tpspb.GlobalChannelData.gameState)
  
  ::unrealpb::GameStateBase* temp = _impl_.gamestate_;
  _impl_.gamestate_ = nullptr;
  return temp;
}
inline ::unrealpb::GameStateBase* GlobalChannelData::_internal_mutable_gamestate() {
  
  if (_impl_.gamestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::unrealpb::GameStateBase>(GetArenaForAllocation());
    _impl_.gamestate_ = p;
  }
  return _impl_.gamestate_;
}
inline ::unrealpb::GameStateBase* GlobalChannelData::mutable_gamestate() {
  ::unrealpb::GameStateBase* _msg = _internal_mutable_gamestate();
  // @@protoc_insertion_point(field_mutable:tpspb.GlobalChannelData.gameState)
  return _msg;
}
inline void GlobalChannelData::set_allocated_gamestate(::unrealpb::GameStateBase* gamestate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gamestate_);
  }
  if (gamestate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamestate));
    if (message_arena != submessage_arena) {
      gamestate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamestate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gamestate_ = gamestate;
  // @@protoc_insertion_point(field_set_allocated:tpspb.GlobalChannelData.gameState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpspb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tps_2eproto
